{
    "sourceFile": "lib/view/user/user_run_ride_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1722774243447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722862436855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1273 +0,0 @@\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862492046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722863261407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1273 @@\n+import 'dart:ui';\n \n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n"
                },
                {
                    "date": 1723291670709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1273 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n"
                },
                {
                    "date": 1724062025273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2549 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n+\n+\n+\n+/*import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}*/\n"
                },
                {
                    "date": 1725518893679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1271,1279 +1271,4 @@\n         });\n   }\n }\n \n-\n-\n-/*import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}*/\n"
                },
                {
                    "date": 1725519055441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1270,5 +1270,4 @@\n           );\n         });\n   }\n }\n-\n"
                },
                {
                    "date": 1725522372044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1270,2550 +1270,4 @@\n           );\n         });\n   }\n }\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n"
                },
                {
                    "date": 1725529137968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1220,27 +1220,29 @@\n                     ),\n                     const SizedBox(\n                       height: 15,\n                     ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n+                    Expanded(\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                        children: [\n+                          Text(\n+                            \"Payable Amount:\",\n+                            style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 20,\n+                                fontWeight: FontWeight.w700),\n+                          ),\n+                          Text(\n+                            \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                            style: TextStyle(\n                               color: TColor.primaryText,\n                               fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n+                              fontWeight: FontWeight.w700,\n+                            ),\n                           ),\n-                        ),\n-                      ],\n+                        ],\n+                      ),\n                     ),\n                     const SizedBox(\n                       height: 15,\n                     ),\n"
                },
                {
                    "date": 1725529329011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1220,29 +1220,27 @@\n                     ),\n                     const SizedBox(\n                       height: 15,\n                     ),\n-                    Expanded(\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                        children: [\n-                          Text(\n-                            \"Payable Amount:\",\n-                            style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 20,\n-                                fontWeight: FontWeight.w700),\n-                          ),\n-                          Text(\n-                            \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                            style: TextStyle(\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n                               color: TColor.primaryText,\n                               fontSize: 20,\n-                              fontWeight: FontWeight.w700,\n-                            ),\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n                           ),\n-                        ],\n-                      ),\n+                        ),\n+                      ],\n                     ),\n                     const SizedBox(\n                       height: 15,\n                     ),\n"
                },
                {
                    "date": 1725680762435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,676 @@\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView> {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late GoogleMapController mapController;\n+  Set<Marker> _markers = {};\n+  Set<Polyline> _polylines = {};\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      _markers.add(\n+        Marker(\n+          markerId: MarkerId('pickup'),\n+          position: LatLng(\n+            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+          ),\n+          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),\n+        ),\n+      );\n+    } else {\n+      _markers.add(\n+        Marker(\n+          markerId: MarkerId('dropoff'),\n+          position: LatLng(\n+            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+          ),\n+          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n+        ),\n+      );\n+    }\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    super.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          GoogleMap(\n+            onMapCreated: (GoogleMapController controller) {\n+              mapController = controller;\n+              addMarker();\n+            },\n+            initialCameraPosition: CameraPosition(\n+              target: LatLng(\n+                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+              ),\n+              zoom: 15,\n+            ),\n+            markers: _markers,\n+            polylines: _polylines,\n+            myLocationEnabled: true,\n+            onCameraMove: (CameraPosition position) {\n+              print(\"Camera position: $position\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+\n+\n+\n+/*import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n@@ -736,9 +1404,9 @@\n                       ),\n                       RatingBar.builder(\n                         initialRating: ratingVal,\n                         minRating: 1,\n-                        direction: Axis.horizontal,\n+                        direction: Axis.horizontal,*/\n                         allowHalfRating: true,\n                         itemCount: 5,\n                         itemPadding:\n                             const EdgeInsets.symmetric(horizontal: 4.0),\n"
                },
                {
                    "date": 1725681295482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n       if (data[KKey.status] == \"1\") {\n         if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n           rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n \n-          loadMapRoad();\n+\n         }\n       }\n     });\n \n@@ -124,9 +124,9 @@\n           rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n           rideObj[\"total_distance\"] =\n               data[KKey.payload][\"total_distance\"].toString();\n           rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n+\n           \n           if(mounted) {\n             setState(() {});\n           }\n@@ -157,9 +157,9 @@\n         children: [\n           GoogleMap(\n             onMapCreated: (GoogleMapController controller) {\n               mapController = controller;\n-              addMarker();\n+             \n             },\n             initialCameraPosition: CameraPosition(\n               target: LatLng(\n                 double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n@@ -1498,99 +1498,12 @@\n       ),\n     );\n   }\n \n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n+ \n \n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n \n-    loadMapRoad();\n-  }\n \n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n   //TODO: ApiCalling\n \n   void apiCancelRide() {\n     Globs.showHUD();\n"
                },
                {
                    "date": 1725682156794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,676 +1,8 @@\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView> {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late GoogleMapController mapController;\n-  Set<Marker> _markers = {};\n-  Set<Polyline> _polylines = {};\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId('pickup'),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),\n-        ),\n-      );\n-    } else {\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId('dropoff'),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n-        ),\n-      );\n-    }\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    super.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          GoogleMap(\n-            onMapCreated: (GoogleMapController controller) {\n-              mapController = controller;\n-             \n-            },\n-            initialCameraPosition: CameraPosition(\n-              target: LatLng(\n-                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-              ),\n-              zoom: 15,\n-            ),\n-            markers: _markers,\n-            polylines: _polylines,\n-            myLocationEnabled: true,\n-            onCameraMove: (CameraPosition position) {\n-              print(\"Camera position: $position\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-\n-\n-\n-/*import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n@@ -1404,9 +736,9 @@\n                       ),\n                       RatingBar.builder(\n                         initialRating: ratingVal,\n                         minRating: 1,\n-                        direction: Axis.horizontal,*/\n+                        direction: Axis.horizontal,\n                         allowHalfRating: true,\n                         itemCount: 5,\n                         itemPadding:\n                             const EdgeInsets.symmetric(horizontal: 4.0),\n@@ -1498,12 +830,99 @@\n       ),\n     );\n   }\n \n- \n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n \n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n \n+    loadMapRoad();\n+  }\n \n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n   //TODO: ApiCalling\n \n   void apiCancelRide() {\n     Globs.showHUD();\n"
                },
                {
                    "date": 1725692445128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1186 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:flutter/material.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView> {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late GoogleMapController _controller;\n+  Set<Marker> _markers = {};\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+    Polyline? _polyline;\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+     // _addMarker(\n+        LatLng(\n+          double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+          double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0);\n+        //),\n+       // \"pickup\",\n+        //\"assets/img/pickup_pin.png\",\n+      //);\n+    } else {\n+     // _addMarker(\n+        LatLng(\n+          double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+          double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+       // ),\n+       // \"dropoff\",\n+       // \"assets/img/drop_pin.png\",\n+      );\n+    }\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    super.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          GoogleMap(\n+            initialCameraPosition: CameraPosition(\n+              target: LatLng(\n+                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+              ),\n+              zoom: 15,\n+            ),\n+            markers: _markers,\n+            onMapCreated: (GoogleMapController controller) {\n+              _controller = controller;\n+              loadMapRoad();\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+\n+\n+                        \n+                        \n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+\n+\n+\n+  void addMarker() async {\n+    setState(() {\n+      _markers.add(\n+        Marker(\n+          markerId: MarkerId(\"pickup\"),\n+          position: LatLng(\n+            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+          ),\n+          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),\n+        ),\n+      );\n+\n+      _markers.add(\n+        Marker(\n+          markerId: MarkerId(\"dropoff\"),\n+          position: LatLng(\n+            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+          ),\n+          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n+        ),\n+      );\n+    });\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    LatLng pickupLocation = LatLng(\n+      double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+      double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+    );\n+\n+    LatLng dropoffLocation = LatLng(\n+      double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+      double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+    );\n+\n+    LatLng currentLocation = LatLng(\n+      double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+      double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0,\n+    );\n+\n+    List<LatLng> polylineCoordinates = [];\n+\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      polylineCoordinates.add(currentLocation);\n+      polylineCoordinates.add(pickupLocation);\n+    } else {\n+      polylineCoordinates.add(currentLocation);\n+      polylineCoordinates.add(dropoffLocation);\n+    }\n+\n+    setState(() {\n+      _polyline = Polyline(\n+        polylineId: PolylineId(\"route\"),\n+        points: polylineCoordinates,\n+        color: Colors.blueAccent,\n+        width: 3,\n+      );\n+    });\n+\n+    // Calculate distance and duration (dummy values for now)\n+    timeCount = \"10.0\"; // Replace with actual calculation\n+    km = \"5.0\"; // Replace with actual calculation\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+ \n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n"
                },
                {
                    "date": 1725692479136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1183,1277 +1183,4 @@\n           );\n         });\n   }\n }\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n"
                },
                {
                    "date": 1725698291493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,1282 @@\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n+\n+\n+/*import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n@@ -1183,4 +2458,5 @@\n           );\n         });\n   }\n }\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725699068555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import 'dart:ui';\n+/*import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n@@ -1270,12 +1270,12 @@\n           );\n         });\n   }\n }\n+*/\n \n+import 'dart:ui';\n \n-/*import 'dart:ui';\n-\n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n@@ -2458,5 +2458,4 @@\n           );\n         });\n   }\n }\n-*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725700307521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1336,20 +1336,20 @@\n      // _addMarker(\n         LatLng(\n           double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n           double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0);\n-        //),\n-       // \"pickup\",\n-        //\"assets/img/pickup_pin.png\",\n-      //);\n+        ),\n+        \"pickup\",\n+        \"assets/img/pickup_pin.png\",\n+      );\n     } else {\n      // _addMarker(\n         LatLng(\n           double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n           double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-       // ),\n-       // \"dropoff\",\n-       // \"assets/img/drop_pin.png\",\n+        ),\n+        \"dropoff\",\n+        \"assets/img/drop_pin.png\",\n       );\n     }\n \n     SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n"
                },
                {
                    "date": 1725774722397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1212 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:flutter/material.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView> {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late GoogleMapController _controller;\n+  Set<Marker> _markers = {};\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  Polyline? _polyline;\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      _addMarker(\n+        LatLng(\n+          double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+          double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+        ),\n+        \"pickup\",\n+        \"assets/img/pickup_pin.png\",\n+      );\n+    } else {\n+      _addMarker(\n+        LatLng(\n+          double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+          double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+        ),\n+        \"dropoff\",\n+        \"assets/img/drop_pin.png\",\n+      );\n+    }\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+\n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+void _addMarker(LatLng position, String id, String iconPath) async {\n+  final BitmapDescriptor bitmapIcon = await BitmapDescriptor.fromAssetImage(\n+    ImageConfiguration(size: Size(48, 48)), // Adjust the size as needed\n+    iconPath,\n+  );\n+\n+  final marker = Marker(\n+    markerId: MarkerId(id),\n+    position: position,\n+    icon: bitmapIcon,\n+  );\n+\n+  setState(() {\n+    _markers.add(marker);\n+  });\n+}\n+\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    _controller.dispose();\n+    super.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          GoogleMap(\n+            initialCameraPosition: CameraPosition(\n+              target: LatLng(\n+                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+              ),\n+              zoom: 15,\n+            ),\n+            markers: _markers,\n+            polylines: _polyline != null ? {_polyline!} : {},\n+            onMapCreated: (GoogleMapController controller) {\n+              _controller = controller;\n+              loadMapRoad();\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                             \n+\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+\n+\n+                        \n+                        \n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+\n+\n+\n+  void addMarker() async {\n+    setState(() {\n+      _markers.add(\n+        Marker(\n+          markerId: MarkerId(\"pickup\"),\n+          position: LatLng(\n+            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+          ),\n+          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),\n+        ),\n+      );\n+\n+      _markers.add(\n+        Marker(\n+          markerId: MarkerId(\"dropoff\"),\n+          position: LatLng(\n+            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+          ),\n+          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n+        ),\n+      );\n+    });\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    LatLng pickupLocation = LatLng(\n+      double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+      double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+    );\n+\n+    LatLng dropoffLocation = LatLng(\n+      double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+      double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+    );\n+\n+    LatLng currentLocation = LatLng(\n+      double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+      double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0,\n+    );\n+\n+    List<LatLng> polylineCoordinates = [];\n+\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      polylineCoordinates.add(currentLocation);\n+      polylineCoordinates.add(pickupLocation);\n+    } else {\n+      polylineCoordinates.add(currentLocation);\n+      polylineCoordinates.add(dropoffLocation);\n+    }\n+\n+    setState(() {\n+      _polyline = Polyline(\n+        polylineId: PolylineId(\"route\"),\n+        points: polylineCoordinates,\n+        color: Colors.blueAccent,\n+        width: 3,\n+      );\n+    });\n+\n+    // Calculate distance and duration (dummy values for now)\n+    timeCount = \"10.0\"; // Replace with actual calculation\n+    km = \"5.0\"; // Replace with actual calculation\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+ \n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n"
                },
                {
                    "date": 1725784934050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1273 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n"
                },
                {
                    "date": 1725860989518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2550 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n+\n+\n+\n+/*import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}*/\n"
                },
                {
                    "date": 1725970747260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2550 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin.png\"\n+                                : \"assets/img/drop_pin.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n+\n+\n+\n+/*import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}*/\n"
                },
                {
                    "date": 1725970764428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2547,7500 +2547,4 @@\n           );\n         });\n   }\n }*/\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n-\n-\n-\n-/*import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}*/\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView> {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late GoogleMapController _controller;\n-  Set<Marker> _markers = {};\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  Polyline? _polyline;\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      _addMarker(\n-        LatLng(\n-          double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-          double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-        ),\n-        \"pickup\",\n-        \"assets/img/pickup_pin.png\",\n-      );\n-    } else {\n-      _addMarker(\n-        LatLng(\n-          double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-          double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-        ),\n-        \"dropoff\",\n-        \"assets/img/drop_pin.png\",\n-      );\n-    }\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-\n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-void _addMarker(LatLng position, String id, String iconPath) async {\n-  final BitmapDescriptor bitmapIcon = await BitmapDescriptor.fromAssetImage(\n-    ImageConfiguration(size: Size(48, 48)), // Adjust the size as needed\n-    iconPath,\n-  );\n-\n-  final marker = Marker(\n-    markerId: MarkerId(id),\n-    position: position,\n-    icon: bitmapIcon,\n-  );\n-\n-  setState(() {\n-    _markers.add(marker);\n-  });\n-}\n-\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    _controller.dispose();\n-    super.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          GoogleMap(\n-            initialCameraPosition: CameraPosition(\n-              target: LatLng(\n-                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-              ),\n-              zoom: 15,\n-            ),\n-            markers: _markers,\n-            polylines: _polyline != null ? {_polyline!} : {},\n-            onMapCreated: (GoogleMapController controller) {\n-              _controller = controller;\n-              loadMapRoad();\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                             \n-\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-\n-\n-                        \n-                        \n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-\n-\n-\n-  void addMarker() async {\n-    setState(() {\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId(\"pickup\"),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),\n-        ),\n-      );\n-\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId(\"dropoff\"),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n-        ),\n-      );\n-    });\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    LatLng pickupLocation = LatLng(\n-      double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-      double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-    );\n-\n-    LatLng dropoffLocation = LatLng(\n-      double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-      double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-    );\n-\n-    LatLng currentLocation = LatLng(\n-      double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-      double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0,\n-    );\n-\n-    List<LatLng> polylineCoordinates = [];\n-\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      polylineCoordinates.add(currentLocation);\n-      polylineCoordinates.add(pickupLocation);\n-    } else {\n-      polylineCoordinates.add(currentLocation);\n-      polylineCoordinates.add(dropoffLocation);\n-    }\n-\n-    setState(() {\n-      _polyline = Polyline(\n-        polylineId: PolylineId(\"route\"),\n-        points: polylineCoordinates,\n-        color: Colors.blueAccent,\n-        width: 3,\n-      );\n-    });\n-\n-    // Calculate distance and duration (dummy values for now)\n-    timeCount = \"10.0\"; // Replace with actual calculation\n-    km = \"5.0\"; // Replace with actual calculation\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n- \n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n-/*import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n-*/\n-\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView> {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late GoogleMapController _controller;\n-  Set<Marker> _markers = {};\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-    Polyline? _polyline;\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-     // _addMarker(\n-        LatLng(\n-          double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-          double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0);\n-        ),\n-        \"pickup\",\n-        \"assets/img/pickup_pin.png\",\n-      );\n-    } else {\n-     // _addMarker(\n-        LatLng(\n-          double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-          double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-        ),\n-        \"dropoff\",\n-        \"assets/img/drop_pin.png\",\n-      );\n-    }\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    super.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          GoogleMap(\n-            initialCameraPosition: CameraPosition(\n-              target: LatLng(\n-                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-              ),\n-              zoom: 15,\n-            ),\n-            markers: _markers,\n-            onMapCreated: (GoogleMapController controller) {\n-              _controller = controller;\n-              loadMapRoad();\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-\n-\n-                        \n-                        \n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-\n-\n-\n-  void addMarker() async {\n-    setState(() {\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId(\"pickup\"),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),\n-        ),\n-      );\n-\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId(\"dropoff\"),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n-        ),\n-      );\n-    });\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    LatLng pickupLocation = LatLng(\n-      double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-      double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-    );\n-\n-    LatLng dropoffLocation = LatLng(\n-      double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-      double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-    );\n-\n-    LatLng currentLocation = LatLng(\n-      double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-      double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0,\n-    );\n-\n-    List<LatLng> polylineCoordinates = [];\n-\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      polylineCoordinates.add(currentLocation);\n-      polylineCoordinates.add(pickupLocation);\n-    } else {\n-      polylineCoordinates.add(currentLocation);\n-      polylineCoordinates.add(dropoffLocation);\n-    }\n-\n-    setState(() {\n-      _polyline = Polyline(\n-        polylineId: PolylineId(\"route\"),\n-        points: polylineCoordinates,\n-        color: Colors.blueAccent,\n-        width: 3,\n-      );\n-    });\n-\n-    // Calculate distance and duration (dummy values for now)\n-    timeCount = \"10.0\"; // Replace with actual calculation\n-    km = \"5.0\"; // Replace with actual calculation\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n- \n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n"
                },
                {
                    "date": 1726044671332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n import 'package:taxi_driver/common/service_call.dart';\n import 'package:taxi_driver/common/socket_manager.dart';\n import 'package:taxi_driver/common_widget/icon_title_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n@@ -19,9 +20,9 @@\n   final Map rObj;\n   const UserRunRideView({super.key, required this.rObj});\n \n   @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n+  State<UserRunRideView> createState() => _UserRunRideState();\n }\n \n const bsPending = 0;\n const bsAccept = 1;\n@@ -30,10 +31,9 @@\n const bsStart = 4;\n const bsComplete = 5;\n const bsCancel = 6;\n \n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n+class _UserRunRideState extends State<UserRunRideView> {\n   bool isOpen = true;\n \n   Map rideObj = {};\n \n@@ -43,108 +43,71 @@\n   //1 = Accept Ride\n   //2 = Start\n   //4 = Complete\n \n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n+  GoogleMapController? _controller;\n+  final Set<Marker> _markers = {};\n+  final Set<Polyline> _polylines = {};\n+  \n \n+  Map bookingObj = {};\n+  bool isApiData = false;\n+\n   String timeCount = \"...\";\n   String km = \"...\";\n-\n   double ratingVal = 5.0;\n \n   @override\n   void initState() {\n-    // TODO: implement initState\n     super.initState();\n \n     rideObj = widget.rObj;\n \n     if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      _markers.add(\n+        Marker(\n+          markerId: MarkerId(\"pickup\"),\n+          position: LatLng(\n+            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+          ),\n+          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueGreen),\n+        ),\n       );\n     } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      _markers.add(\n+        Marker(\n+          markerId: MarkerId(\"dropoff\"),\n+          position: LatLng(\n+            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+          ),\n+          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n+        ),\n       );\n     }\n \n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n       if (data[KKey.status] == \"1\") {\n         if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n           openUserRideCancelPopup();\n         }\n       }\n     });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n   }\n \n   void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n       context.pop();\n     }, isForce: true);\n   }\n+  \n \n   @override\n   void dispose() {\n-    // TODO: implement dispose\n+    _controller?.dispose();\n     super.dispose();\n-    controller.dispose();\n   }\n \n   @override\n   Widget build(BuildContext context) {\n@@ -152,43 +115,22 @@\n \n     return Scaffold(\n       body: Stack(\n         children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n+          GoogleMap(\n+            onMapCreated: (GoogleMapController controller) {\n+              _controller = controller;\n+              addMarker();\n             },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n+            initialCameraPosition: CameraPosition(\n+              target: LatLng(\n+                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+              ),\n+              zoom: 14.0,\n+            ),\n+            markers: _markers,\n+            polylines: _polylines,\n           ),\n           if (rideObj[\"booking_status\"] != bsComplete)\n             Column(\n               crossAxisAlignment: CrossAxisAlignment.end,\n@@ -254,69 +196,8 @@\n                         ),\n                       ],\n                     ),\n                   ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n                 Container(\n                   padding: const EdgeInsets.symmetric(vertical: 15),\n                   decoration: const BoxDecoration(\n                       color: Colors.white,\n@@ -417,9 +298,11 @@\n                       if (isOpen)\n                         const SizedBox(\n                           height: 8,\n                         ),\n-                      if (isOpen)\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n                         Padding(\n                           padding: const EdgeInsets.all(15),\n                           child: Row(\n                             children: [\n@@ -457,8 +340,9 @@\n                                               fontWeight: FontWeight.w700),\n                                         ),\n                                       ],\n                                     ),\n+\n                                     Row(\n                                       mainAxisAlignment:\n                                           MainAxisAlignment.spaceBetween,\n                                       children: [\n@@ -485,15 +369,19 @@\n                               )\n                             ],\n                           ),\n                         ),\n-                      if (isOpen)\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n                         const Divider(\n                           height: 0.5,\n                           endIndent: 20,\n                           indent: 20,\n                         ),\n-                      if (isOpen)\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n                         const SizedBox(\n                           height: 8,\n                         ),\n                       if (isOpen)\n@@ -532,16 +420,8 @@\n                                           style: TextStyle(\n                                               color: TColor.secondaryText,\n                                               fontSize: 14),\n                                         ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n                                       ],\n                                     ),\n                                   ],\n                                 ),\n@@ -679,8 +559,226 @@\n                             ),\n                           ],\n                         ),\n                       const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                               \n+\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                         \n+\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n                         height: 25,\n                       ),\n                     ],\n                   ),\n@@ -831,108 +929,106 @@\n       ),\n     );\n   }\n \n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n+ void addMarker() async {\n+    var pickupLat = double.tryParse(bookingObj[\"pickup_lat\"].toString()) ?? 0.0;\n+    var pickupLng = double.tryParse(bookingObj[\"pickup_long\"].toString()) ?? 0.0;\n+    var dropLat = double.tryParse(bookingObj[\"drop_lat\"].toString()) ?? 0.0;\n+    var dropLng = double.tryParse(bookingObj[\"drop_long\"].toString()) ?? 0.0;\n+\n+    var pickupMarker = Marker(\n+      markerId: MarkerId(\"pickup\"),\n+      position: LatLng(pickupLat, pickupLng),\n+      icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),\n     );\n \n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n+    var dropMarker = Marker(\n+      markerId: MarkerId(\"dropoff\"),\n+      position: LatLng(dropLat, dropLng),\n+      icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n     );\n \n+    setState(() {\n+      _markers.add(pickupMarker);\n+      _markers.add(dropMarker);\n+    });\n+\n     loadMapRoad();\n   }\n \n   void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n+  var pickupLat = double.tryParse(bookingObj[\"pickup_lat\"].toString()) ?? 0.0;\n+  var pickupLng = double.tryParse(bookingObj[\"pickup_long\"].toString()) ?? 0.0;\n+  var dropLat = double.tryParse(bookingObj[\"drop_lat\"].toString()) ?? 0.0;\n+  var dropLng = double.tryParse(bookingObj[\"drop_long\"].toString()) ?? 0.0;\n \n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n+  var pickupPoint = LatLng(pickupLat, pickupLng);\n+  var dropPoint = LatLng(dropLat, dropLng);\n \n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n+  var polyline = Polyline(\n+    polylineId: PolylineId(\"road\"),\n+    color: Colors.blueAccent,\n+    width: 3,\n+    points: [pickupPoint, dropPoint],\n+  );\n \n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n+  setState(() {\n+    _polylines.add(polyline);\n+  });\n \n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n+  if (_controller != null) {\n+    _controller!.animateCamera(\n+      CameraUpdate.newLatLngBounds(\n+        LatLngBounds(\n+          southwest: LatLng(\n+            pickupLat < dropLat ? pickupLat : dropLat,\n+            pickupLng < dropLng ? pickupLng : dropLng,\n+          ),\n+          northeast: LatLng(\n+            pickupLat > dropLat ? pickupLat : dropLat,\n+            pickupLng > dropLng ? pickupLng : dropLng,\n+          ),\n+        ),\n+        50,\n+      ),\n+    );\n+  } else {\n+    print(\"MapController is not initialized\");\n   }\n+}\n \n+\n   //TODO: ApiCalling\n \n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n   void apiCancelRide() {\n     Globs.showHUD();\n     ServiceCall.post({\n       \"booking_id\": rideObj[\"booking_id\"].toString(),\n       \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n       Globs.hideHUD();\n \n       if (responseObj[KKey.status] == \"1\") {\n         mdShowAlert(\n@@ -949,1274 +1045,70 @@\n       mdShowAlert(Globs.appName, err.toString(), () {});\n     });\n   }\n \n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n     }\n-  }\n \n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n+    var startLocation = LocationHelper.shared().lastLocation;\n \n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n+    if (startLocation == null) {\n+      return;\n     }\n-  }\n \n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n \n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}\n-\n-\n-\n-/*import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n     });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n   }\n \n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n \n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    if (endLocation == null) {\n+      return;\n     }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n+    LocationHelper.shared().stopRideLocationSave();\n     Globs.showHUD();\n     ServiceCall.post({\n       \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n       Globs.hideHUD();\n \n       if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n       } else {\n         mdShowAlert(Globs.appName,\n             responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n@@ -2257,19 +1149,17 @@\n \n   String statusName() {\n     switch (rideObj[\"booking_status\"]) {\n       case 2:\n-        return \"On Way Driver\";\n+        return \"Pickup Up \";\n       case 3:\n-        return \"Waiting Driver\";\n+        return \"Waiting For \";\n       case 4:\n         return \"Ride Started With\";\n       case 5:\n         return \"Ride Complete With\";\n       case 6:\n         return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n       default:\n         return \"Finding Driver Near By\";\n     }\n   }\n@@ -2310,241 +1200,5 @@\n       default:\n         return Colors.blue;\n     }\n   }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}*/\n+}\n"
                },
                {
                    "date": 1726045006224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2550 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin.png\"\n+                                : \"assets/img/drop_pin.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}\n+\n+\n+\n+/*import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class UserRunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const UserRunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<UserRunRideView> createState() => _UserRunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _UserRunRideViewState extends State<UserRunRideView>\n+    with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n+      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n+      print(\"driver_wait_user socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n+      print(\"ride_start socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+\n+          loadMapRoad();\n+        }\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n+      print(\"ride_stop socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n+          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n+          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n+          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n+          rideObj[\"total_distance\"] =\n+              data[KKey.payload][\"total_distance\"].toString();\n+          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n+          loadMapRoad();\n+          \n+          if(mounted) {\n+            setState(() {});\n+          }\n+          \n+          showRideCompletedPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        if (rideObj[\"booking_status\"] <=\n+                                            bsWaitUser)\n+                                          Text(\n+                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n+                                            style: TextStyle(\n+                                                color: TColor.secondaryText,\n+                                                fontSize: 14),\n+                                          ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n+              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svUserRideCancel, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way Driver\";\n+      case 3:\n+        return \"Waiting Driver\";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      case 7:\n+        return \"No Driver Found\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  void showRideCompletedPopup() async {\n+    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n+    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n+    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n+    var totalAmt = payableAmt - tollAmt - taxAmt;\n+\n+    await showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        barrierColor: Colors.transparent,\n+        isScrollControlled: true,\n+        context: context,\n+        builder: (context) {\n+          return Stack(\n+            alignment: Alignment.bottomCenter,\n+            children: [\n+              BackdropFilter(\n+                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n+                child: Container(\n+                  color: Colors.black38,\n+                ),\n+              ),\n+              Container(\n+                padding: const EdgeInsets.all(20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                      topLeft: Radius.circular(10),\n+                      topRight: Radius.circular(10),\n+                    ),\n+                    boxShadow: [\n+                      BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5))\n+                    ]),\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    Text(\n+                      \"Ride Completed\",\n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 20,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payment Mode:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 20),\n+                        ),\n+                        Text(\n+                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                              ? \"COD\"\n+                              : \"ONLINE\",\n+                          style: TextStyle(\n+                            color: TColor.primary,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Distance:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Duration:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          rideObj[\"duration\"] ?? \" 00:00\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Total Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Tax Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Toll Tax:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 17),\n+                        ),\n+                        Text(\n+                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.end,\n+                      children: [\n+                        Container(\n+                          width: 90,\n+                          height: 2,\n+                          color: TColor.primaryText,\n+                        )\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    Row(\n+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                      children: [\n+                        Text(\n+                          \"Payable Amount:\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 20,\n+                              fontWeight: FontWeight.w700),\n+                        ),\n+                        Text(\n+                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 20,\n+                            fontWeight: FontWeight.w700,\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"Yes, Accept Toll Tax\",\n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                    RoundButton(\n+                        title: \"No\",\n+                        onPressed: () {\n+                          // context.pop();\n+                          context.pop();\n+                        }),\n+                    const SizedBox(\n+                      height: 15,\n+                    ),\n+                  ],\n+                ),\n+              )\n+            ],\n+          );\n+        });\n+  }\n+}*/\n"
                },
                {
                    "date": 1726045228102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2547,1208 +2547,4 @@\n           );\n         });\n   }\n }*/\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/location_helper.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideState extends State<UserRunRideView> {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  GoogleMapController? _controller;\n-  final Set<Marker> _markers = {};\n-  final Set<Polyline> _polylines = {};\n-  \n-\n-  Map bookingObj = {};\n-  bool isApiData = false;\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId(\"pickup\"),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueGreen),\n-        ),\n-      );\n-    } else {\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId(\"dropoff\"),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n-        ),\n-      );\n-    }\n-\n-    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n-      print(\"user_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-  \n-\n-  @override\n-  void dispose() {\n-    _controller?.dispose();\n-    super.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          GoogleMap(\n-            onMapCreated: (GoogleMapController controller) {\n-              _controller = controller;\n-              addMarker();\n-            },\n-            initialCameraPosition: CameraPosition(\n-              target: LatLng(\n-                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-              ),\n-              zoom: 14.0,\n-            ),\n-            markers: _markers,\n-            polylines: _polylines,\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: rideObj[\"booking_status\"] == bsGoUser\n-                                ? \"ARRIVED\"\n-                                : rideObj[\"booking_status\"] == bsWaitUser\n-                                    ? \"START\"\n-                                    : \"COMPLETE\",\n-                            onPressed: () async {\n-                              if (rideObj[\"booking_status\"] == bsGoUser) {\n-                                // Api Calling Waiting For User\n-                                apiWaitingForUser();\n-                              } else if (rideObj[\"booking_status\"] ==\n-                                  bsWaitUser) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtOTP,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"----\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-\n-                                                      apiRideStart();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"RIDE START\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                               \n-\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              } else if (rideObj[\"booking_status\"] == bsStart) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                         \n-\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter Toll Amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter toll amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtToll,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"\\$0\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                      apiRideStop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"DONE\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              }\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin.png\"\n-                                : \"assets/img/drop_pin.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n- void addMarker() async {\n-    var pickupLat = double.tryParse(bookingObj[\"pickup_lat\"].toString()) ?? 0.0;\n-    var pickupLng = double.tryParse(bookingObj[\"pickup_long\"].toString()) ?? 0.0;\n-    var dropLat = double.tryParse(bookingObj[\"drop_lat\"].toString()) ?? 0.0;\n-    var dropLng = double.tryParse(bookingObj[\"drop_long\"].toString()) ?? 0.0;\n-\n-    var pickupMarker = Marker(\n-      markerId: MarkerId(\"pickup\"),\n-      position: LatLng(pickupLat, pickupLng),\n-      icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue),\n-    );\n-\n-    var dropMarker = Marker(\n-      markerId: MarkerId(\"dropoff\"),\n-      position: LatLng(dropLat, dropLng),\n-      icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),\n-    );\n-\n-    setState(() {\n-      _markers.add(pickupMarker);\n-      _markers.add(dropMarker);\n-    });\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-  var pickupLat = double.tryParse(bookingObj[\"pickup_lat\"].toString()) ?? 0.0;\n-  var pickupLng = double.tryParse(bookingObj[\"pickup_long\"].toString()) ?? 0.0;\n-  var dropLat = double.tryParse(bookingObj[\"drop_lat\"].toString()) ?? 0.0;\n-  var dropLng = double.tryParse(bookingObj[\"drop_long\"].toString()) ?? 0.0;\n-\n-  var pickupPoint = LatLng(pickupLat, pickupLng);\n-  var dropPoint = LatLng(dropLat, dropLng);\n-\n-  var polyline = Polyline(\n-    polylineId: PolylineId(\"road\"),\n-    color: Colors.blueAccent,\n-    width: 3,\n-    points: [pickupPoint, dropPoint],\n-  );\n-\n-  setState(() {\n-    _polylines.add(polyline);\n-  });\n-\n-  if (_controller != null) {\n-    _controller!.animateCamera(\n-      CameraUpdate.newLatLngBounds(\n-        LatLngBounds(\n-          southwest: LatLng(\n-            pickupLat < dropLat ? pickupLat : dropLat,\n-            pickupLng < dropLng ? pickupLng : dropLng,\n-          ),\n-          northeast: LatLng(\n-            pickupLat > dropLat ? pickupLat : dropLat,\n-            pickupLng > dropLng ? pickupLng : dropLng,\n-          ),\n-        ),\n-        50,\n-      ),\n-    );\n-  } else {\n-    print(\"MapController is not initialized\");\n-  }\n-}\n-\n-\n-  //TODO: ApiCalling\n-\n-  void apiWaitingForUser() {\n-    Globs.showHUD();\n-    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n-        SVKey.svDriverWaitUser, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStart() {\n-    if (txtOTP.text.length != 4) {\n-      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n-      return;\n-    }\n-\n-    var startLocation = LocationHelper.shared().lastLocation;\n-\n-    if (startLocation == null) {\n-      return;\n-    }\n-\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"pickup_latitude\": \"${startLocation.latitude}\",\n-      \"pickup_longitude\": \"${startLocation.longitude}\",\n-      \"otp_code\": txtOTP.text\n-    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        LocationHelper.shared().startRideLocationSave(\n-            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStop() {\n-    var endLocation = LocationHelper.shared().lastLocation;\n-\n-    if (endLocation == null) {\n-      return;\n-    }\n-    LocationHelper.shared().stopRideLocationSave();\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"drop_latitude\": \"${endLocation.latitude}\",\n-      \"drop_longitude\": \"${endLocation.longitude}\",\n-      \"ride_location\": LocationHelper.shared()\n-          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n-      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n-    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-\n-        mdShowAlert(\"Ride Completed\",\n-            responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"Pickup Up \";\n-      case 3:\n-        return \"Waiting For \";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1726389640836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1272,1279 +1272,4 @@\n         });\n   }\n }\n \n-\n-\n-/*import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class UserRunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const UserRunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<UserRunRideView> createState() => _UserRunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _UserRunRideViewState extends State<UserRunRideView>\n-    with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-\n-  double ratingVal = 5.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n-      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n-      print(\"driver_wait_user socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n-      print(\"ride_start socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-\n-          loadMapRoad();\n-        }\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n-      print(\"ride_stop socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n-          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n-          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n-          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n-          rideObj[\"total_distance\"] =\n-              data[KKey.payload][\"total_distance\"].toString();\n-          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n-          loadMapRoad();\n-          \n-          if(mounted) {\n-            setState(() {});\n-          }\n-          \n-          showRideCompletedPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        if (rideObj[\"booking_status\"] <=\n-                                            bsWaitUser)\n-                                          Text(\n-                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n-                                            style: TextStyle(\n-                                                color: TColor.secondaryText,\n-                                                fontSize: 14),\n-                                          ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n-              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svUserRideCancel, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way Driver\";\n-      case 3:\n-        return \"Waiting Driver\";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      case 7:\n-        return \"No Driver Found\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  void showRideCompletedPopup() async {\n-    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n-    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n-    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n-    var totalAmt = payableAmt - tollAmt - taxAmt;\n-\n-    await showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        barrierColor: Colors.transparent,\n-        isScrollControlled: true,\n-        context: context,\n-        builder: (context) {\n-          return Stack(\n-            alignment: Alignment.bottomCenter,\n-            children: [\n-              BackdropFilter(\n-                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n-                child: Container(\n-                  color: Colors.black38,\n-                ),\n-              ),\n-              Container(\n-                padding: const EdgeInsets.all(20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                      topLeft: Radius.circular(10),\n-                      topRight: Radius.circular(10),\n-                    ),\n-                    boxShadow: [\n-                      BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5))\n-                    ]),\n-                child: Column(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                    Text(\n-                      \"Ride Completed\",\n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 20,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payment Mode:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 20),\n-                        ),\n-                        Text(\n-                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                              ? \"COD\"\n-                              : \"ONLINE\",\n-                          style: TextStyle(\n-                            color: TColor.primary,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Distance:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Duration:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          rideObj[\"duration\"] ?? \" 00:00\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Total Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Tax Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Toll Tax:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 17),\n-                        ),\n-                        Text(\n-                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.end,\n-                      children: [\n-                        Container(\n-                          width: 90,\n-                          height: 2,\n-                          color: TColor.primaryText,\n-                        )\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    Row(\n-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                      children: [\n-                        Text(\n-                          \"Payable Amount:\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 20,\n-                              fontWeight: FontWeight.w700),\n-                        ),\n-                        Text(\n-                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 20,\n-                            fontWeight: FontWeight.w700,\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"Yes, Accept Toll Tax\",\n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                    RoundButton(\n-                        title: \"No\",\n-                        onPressed: () {\n-                          // context.pop();\n-                          context.pop();\n-                        }),\n-                    const SizedBox(\n-                      height: 15,\n-                    ),\n-                  ],\n-                ),\n-              )\n-            ],\n-          );\n-        });\n-  }\n-}*/\n"
                }
            ],
            "date": 1722774243447,
            "name": "Commit-0",
            "content": "import 'dart:ui';\n\nimport 'package:cached_network_image/cached_network_image.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\nimport 'package:flutter_rating_bar/flutter_rating_bar.dart';\nimport 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/common/socket_manager.dart';\nimport 'package:taxi_driver/common_widget/icon_title_button.dart';\nimport 'package:taxi_driver/common_widget/round_button.dart';\nimport 'package:taxi_driver/view/home/support/support_message_view.dart';\n\nclass UserRunRideView extends StatefulWidget {\n  final Map rObj;\n  const UserRunRideView({super.key, required this.rObj});\n\n  @override\n  State<UserRunRideView> createState() => _UserRunRideViewState();\n}\n\nconst bsPending = 0;\nconst bsAccept = 1;\nconst bsGoUser = 2;\nconst bsWaitUser = 3;\nconst bsStart = 4;\nconst bsComplete = 5;\nconst bsCancel = 6;\n\nclass _UserRunRideViewState extends State<UserRunRideView>\n    with OSMMixinObserver {\n  bool isOpen = true;\n\n  Map rideObj = {};\n\n  TextEditingController txtOTP = TextEditingController();\n  TextEditingController txtToll = TextEditingController();\n\n  //1 = Accept Ride\n  //2 = Start\n  //4 = Complete\n\n  late MapController controller;\n  //23.02756018230479, 72.58131973941731\n  //23.02726396414328, 72.5851928489523\n\n  String timeCount = \"...\";\n  String km = \"...\";\n\n  double ratingVal = 5.0;\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n\n    rideObj = widget.rObj;\n\n    if (rideObj[\"booking_status\"] < bsStart) {\n      controller = MapController(\n        initPosition: GeoPoint(\n            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n            longitude:\n                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n      );\n    } else {\n      controller = MapController(\n        initPosition: GeoPoint(\n            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n      );\n    }\n\n    controller.addObserver(this);\n\n    SocketManager.shared.socket?.on(\"driver_cancel_ride\", (data) {\n      print(\"driver_cancel_ride socket get : ${data.toString()}\");\n      if (data[KKey.status] == \"1\") {\n        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n          openUserRideCancelPopup();\n        }\n      }\n    });\n\n    SocketManager.shared.socket?.on(\"driver_wait_user\", (data) {\n      print(\"driver_wait_user socket get : ${data.toString()}\");\n      if (data[KKey.status] == \"1\") {\n        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n\n          if (mounted) {\n            setState(() {});\n          }\n        }\n      }\n    });\n\n    SocketManager.shared.socket?.on(\"ride_start\", (data) {\n      print(\"ride_start socket get : ${data.toString()}\");\n      if (data[KKey.status] == \"1\") {\n        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n\n          loadMapRoad();\n        }\n      }\n    });\n\n    SocketManager.shared.socket?.on(\"ride_stop\", (data) {\n      print(\"ride_stop socket get : ${data.toString()}\");\n      if (data[KKey.status] == \"1\") {\n        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n          rideObj[\"booking_status\"] = data[KKey.payload][\"booking_status\"];\n          rideObj[\"amt\"] = data[KKey.payload][\"amount\"].toString();\n          rideObj[\"tax_amt\"] = data[KKey.payload][\"tax_amount\"].toString();\n          rideObj[\"duration\"] = data[KKey.payload][\"duration\"];\n          rideObj[\"total_distance\"] =\n              data[KKey.payload][\"total_distance\"].toString();\n          rideObj[\"toll_tax\"] = data[KKey.payload][\"toll_tax\"].toString();\n          loadMapRoad();\n          \n          if(mounted) {\n            setState(() {});\n          }\n          \n          showRideCompletedPopup();\n        }\n      }\n    });\n  }\n\n  void openUserRideCancelPopup() async {\n    mdShowAlert(\"Ride Cancel\", \"Driver cancel ride\", () {\n      context.pop();\n    }, isForce: true);\n  }\n\n  @override\n  void dispose() {\n    // TODO: implement dispose\n    super.dispose();\n    controller.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n\n    return Scaffold(\n      body: Stack(\n        children: [\n          OSMFlutter(\n            controller: controller,\n            osmOption: OSMOption(\n                enableRotationByGesture: true,\n                zoomOption: const ZoomOption(\n                  initZoom: 15,\n                  minZoomLevel: 3,\n                  maxZoomLevel: 19,\n                  stepZoom: 1.0,\n                ),\n                staticPoints: [],\n                roadConfiguration: const RoadOption(\n                  roadColor: Colors.blueAccent,\n                ),\n                markerOption: MarkerOption(\n                  defaultMarker: const MarkerIcon(\n                    icon: Icon(\n                      Icons.person_pin_circle,\n                      color: Colors.blue,\n                      size: 56,\n                    ),\n                  ),\n                ),\n                showDefaultInfoWindow: false),\n            onMapIsReady: (isReady) {\n              if (isReady) {\n                print(\"map is ready\");\n              }\n            },\n            onLocationChanged: (myLocation) {\n              print(\"user location :$myLocation\");\n            },\n            onGeoPointClicked: (myLocation) {\n              print(\"GeoPointClicked location :$myLocation\");\n            },\n          ),\n          if (rideObj[\"booking_status\"] != bsComplete)\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.end,\n              mainAxisAlignment: MainAxisAlignment.end,\n              children: [\n                if (rideObj[\"booking_status\"] == bsWaitUser)\n                  // Ride Arrived Status\n                  Container(\n                    margin: const EdgeInsets.all(20),\n                    padding: const EdgeInsets.symmetric(\n                        vertical: 10, horizontal: 25),\n                    decoration: BoxDecoration(\n                        color: Colors.white,\n                        borderRadius: BorderRadius.circular(50),\n                        boxShadow: const [\n                          BoxShadow(\n                            color: Colors.black12,\n                            blurRadius: 10,\n                            offset: Offset(0, -5),\n                          ),\n                        ]),\n                    child: Column(\n                      mainAxisSize: MainAxisSize.min,\n                      children: [\n                        Stack(\n                          alignment: Alignment.bottomCenter,\n                          children: [\n                            TimerCountdown(\n                              format: CountDownTimerFormat.minutesSeconds,\n                              endTime: DateTime.now().add(\n                                const Duration(\n                                  minutes: 2,\n                                ),\n                              ),\n                              onEnd: () {\n                                print(\"Timer finished\");\n                              },\n                              timeTextStyle: TextStyle(\n                                color: TColor.secondary,\n                                fontWeight: FontWeight.w800,\n                                fontSize: 25,\n                              ),\n                              colonsTextStyle: TextStyle(\n                                color: TColor.secondary,\n                                fontWeight: FontWeight.w800,\n                                fontSize: 25,\n                              ),\n                              spacerWidth: 0,\n                              daysDescription: \"\",\n                              hoursDescription: \"\",\n                              minutesDescription: \"\",\n                              secondsDescription: \"\",\n                            ),\n                            Text(\n                              \"Waiting for rider\",\n                              textAlign: TextAlign.center,\n                              style: TextStyle(\n                                color: TColor.secondaryText,\n                                fontSize: 16,\n                              ),\n                            ),\n                          ],\n                        ),\n                      ],\n                    ),\n                  ),\n                // if (rideObj[\"booking_status\"] == bsStart)\n                //   // Ride Started Status\n                //   Container(\n                //     margin: const EdgeInsets.all(20),\n                //     padding: const EdgeInsets.symmetric(\n                //         vertical: 10, horizontal: 25),\n                //     decoration: BoxDecoration(\n                //         color: Colors.white,\n                //         borderRadius: BorderRadius.circular(50),\n                //         boxShadow: const [\n                //           BoxShadow(\n                //             color: Colors.black12,\n                //             blurRadius: 10,\n                //             offset: Offset(0, -5),\n                //           ),\n                //         ]),\n                //     child: Column(\n                //       mainAxisSize: MainAxisSize.min,\n                //       children: [\n                //         Stack(\n                //           alignment: Alignment.bottomCenter,\n                //           children: [\n                //             TimerCountdown(\n                //               format: CountDownTimerFormat.minutesSeconds,\n                //               endTime: DateTime.now().add(\n                //                 const Duration(\n                //                   minutes: 2,\n                //                 ),\n                //               ),\n                //               onEnd: () {\n                //                 print(\"Timer finished\");\n                //               },\n                //               timeTextStyle: TextStyle(\n                //                 color: TColor.secondary,\n                //                 fontWeight: FontWeight.w800,\n                //                 fontSize: 25,\n                //               ),\n                //               colonsTextStyle: TextStyle(\n                //                 color: TColor.secondary,\n                //                 fontWeight: FontWeight.w800,\n                //                 fontSize: 25,\n                //               ),\n                //               spacerWidth: 0,\n                //               daysDescription: \"\",\n                //               hoursDescription: \"\",\n                //               minutesDescription: \"\",\n                //               secondsDescription: \"\",\n                //             ),\n                //             Text(\n                //               \"Arrived at dropoff\",\n                //               textAlign: TextAlign.center,\n                //               style: TextStyle(\n                //                 color: TColor.secondaryText,\n                //                 fontSize: 16,\n                //               ),\n                //             ),\n                //           ],\n                //         ),\n                //       ],\n                //     ),\n                //   ),\n                Container(\n                  padding: const EdgeInsets.symmetric(vertical: 15),\n                  decoration: const BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.only(\n                          topLeft: Radius.circular(10),\n                          topRight: Radius.circular(10)),\n                      boxShadow: [\n                        BoxShadow(\n                          color: Colors.black12,\n                          blurRadius: 10,\n                          offset: Offset(0, -5),\n                        ),\n                      ]),\n                  child: Column(\n                    children: [\n                      Padding(\n                        padding: const EdgeInsets.symmetric(horizontal: 15),\n                        child: Row(\n                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                          children: [\n                            IconButton(\n                              onPressed: () {\n                                setState(() {\n                                  isOpen = !isOpen;\n                                });\n                              },\n                              icon: Image.asset(\n                                isOpen\n                                    ? \"assets/img/open_btn.png\"\n                                    : \"assets/img/close_btn.png\",\n                                width: 15,\n                                height: 15,\n                              ),\n                            ),\n                            Row(\n                              mainAxisSize: MainAxisSize.min,\n                              children: [\n                                Text(\n                                  \"$timeCount min\",\n                                  style: TextStyle(\n                                      color: TColor.primaryText,\n                                      fontSize: 18,\n                                      fontWeight: FontWeight.w800),\n                                ),\n                                const SizedBox(\n                                  width: 15,\n                                ),\n                                ClipRRect(\n                                  borderRadius: BorderRadius.circular(17.5),\n                                  child: CachedNetworkImage(\n                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n                                    width: 35,\n                                    height: 35,\n                                    fit: BoxFit.contain,\n                                  ),\n                                ),\n                                const SizedBox(\n                                  width: 15,\n                                ),\n                                Text(\n                                  \"$km km\",\n                                  style: TextStyle(\n                                      color: TColor.primaryText,\n                                      fontSize: 18,\n                                      fontWeight: FontWeight.w800),\n                                ),\n                              ],\n                            ),\n                            IconButton(\n                              onPressed: () {},\n                              icon: Image.asset(\n                                \"assets/img/call.png\",\n                                width: 30,\n                                height: 30,\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                      Text(\n                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                          color: TColor.secondaryText,\n                          fontSize: 16,\n                        ),\n                      ),\n                      if (isOpen)\n                        const SizedBox(\n                          height: 8,\n                        ),\n                      if (isOpen)\n                        const Divider(\n                          height: 0.5,\n                          endIndent: 20,\n                          indent: 20,\n                        ),\n                      if (isOpen)\n                        const SizedBox(\n                          height: 8,\n                        ),\n                      if (isOpen)\n                        Padding(\n                          padding: const EdgeInsets.all(15),\n                          child: Row(\n                            children: [\n                              ClipRRect(\n                                borderRadius: BorderRadius.circular(5),\n                                child: CachedNetworkImage(\n                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n                                  width: 50,\n                                  height: 50,\n                                  fit: BoxFit.contain,\n                                ),\n                              ),\n                              const SizedBox(\n                                width: 15,\n                              ),\n                              Expanded(\n                                child: Column(\n                                  crossAxisAlignment: CrossAxisAlignment.start,\n                                  children: [\n                                    Row(\n                                      mainAxisAlignment:\n                                          MainAxisAlignment.spaceBetween,\n                                      children: [\n                                        Text(\n                                          rideObj[\"name\"] as String? ?? \"\",\n                                          style: const TextStyle(\n                                              fontSize: 16,\n                                              fontWeight: FontWeight.w700),\n                                        ),\n                                        Text(\n                                          statusText(),\n                                          style: TextStyle(\n                                              color: statusColor(),\n                                              fontSize: 20,\n                                              fontWeight: FontWeight.w700),\n                                        ),\n                                      ],\n                                    ),\n                                    Row(\n                                      mainAxisAlignment:\n                                          MainAxisAlignment.spaceBetween,\n                                      children: [\n                                        Text(\n                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n                                          style: TextStyle(\n                                              color: TColor.secondaryText,\n                                              fontSize: 14),\n                                        ),\n                                        Text(\n                                          (rideObj[\"payment_type\"] ?? 1) == 1\n                                              ? \"COD\"\n                                              : \"Online\",\n                                          style: TextStyle(\n                                            color: TColor.secondaryText,\n                                            fontSize: 20,\n                                            fontWeight: FontWeight.w700,\n                                          ),\n                                        ),\n                                      ],\n                                    ),\n                                  ],\n                                ),\n                              )\n                            ],\n                          ),\n                        ),\n                      if (isOpen)\n                        const Divider(\n                          height: 0.5,\n                          endIndent: 20,\n                          indent: 20,\n                        ),\n                      if (isOpen)\n                        const SizedBox(\n                          height: 8,\n                        ),\n                      if (isOpen)\n                        Padding(\n                          padding: const EdgeInsets.all(15),\n                          child: Row(\n                            children: [\n                              ClipRRect(\n                                borderRadius: BorderRadius.circular(5),\n                                child: CachedNetworkImage(\n                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n                                  width: 50,\n                                  height: 50,\n                                  fit: BoxFit.contain,\n                                ),\n                              ),\n                              const SizedBox(\n                                width: 15,\n                              ),\n                              Expanded(\n                                child: Column(\n                                  crossAxisAlignment: CrossAxisAlignment.start,\n                                  children: [\n                                    Text(\n                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n                                      style: const TextStyle(\n                                          fontSize: 16,\n                                          fontWeight: FontWeight.w700),\n                                    ),\n                                    Row(\n                                      mainAxisAlignment:\n                                          MainAxisAlignment.spaceBetween,\n                                      children: [\n                                        Text(\n                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n                                          style: TextStyle(\n                                              color: TColor.secondaryText,\n                                              fontSize: 14),\n                                        ),\n                                        if (rideObj[\"booking_status\"] <=\n                                            bsWaitUser)\n                                          Text(\n                                            \"OTP Code: ${rideObj[\"otp_code\"] as String? ?? \"\"}\",\n                                            style: TextStyle(\n                                                color: TColor.secondaryText,\n                                                fontSize: 14),\n                                          ),\n                                      ],\n                                    ),\n                                  ],\n                                ),\n                              )\n                            ],\n                          ),\n                        ),\n                      if (isOpen)\n                        const Divider(\n                          height: 0.5,\n                          endIndent: 20,\n                          indent: 20,\n                        ),\n                      if (isOpen)\n                        const SizedBox(\n                          height: 8,\n                        ),\n                      if (isOpen)\n                        Row(\n                          children: [\n                            Expanded(\n                              child: IconTitleButton(\n                                icon: \"assets/img/chat.png\",\n                                title: \"Chat\",\n                                onPressed: () {\n                                  context.push(SupportMessageView(uObj: {\n                                    \"user_id\": rideObj[\"user_id\"],\n                                    \"name\": rideObj[\"name\"],\n                                    \"image\": rideObj[\"image\"]\n                                  }));\n                                },\n                              ),\n                            ),\n                            Expanded(\n                              child: IconTitleButton(\n                                icon: \"assets/img/message.png\",\n                                title: \"Message\",\n                                onPressed: () {},\n                              ),\n                            ),\n                            Expanded(\n                              child: IconTitleButton(\n                                icon: \"assets/img/cancel_trip.png\",\n                                title: \"Cancel Tip\",\n                                onPressed: () async {\n                                  await showModalBottomSheet(\n                                      backgroundColor: Colors.transparent,\n                                      barrierColor: Colors.transparent,\n                                      isScrollControlled: true,\n                                      context: context,\n                                      builder: (context) {\n                                        return Stack(\n                                            alignment: Alignment.bottomCenter,\n                                            children: [\n                                              BackdropFilter(\n                                                filter: ImageFilter.blur(\n                                                    sigmaX: 5, sigmaY: 5),\n                                                child: Container(\n                                                  color: Colors.black38,\n                                                ),\n                                              ),\n                                              Container(\n                                                padding:\n                                                    const EdgeInsets.symmetric(\n                                                        vertical: 20,\n                                                        horizontal: 20),\n                                                decoration: const BoxDecoration(\n                                                    color: Colors.white,\n                                                    borderRadius:\n                                                        BorderRadius.only(\n                                                            topLeft: Radius\n                                                                .circular(10),\n                                                            topRight:\n                                                                Radius.circular(\n                                                                    10)),\n                                                    boxShadow: [\n                                                      BoxShadow(\n                                                        color: Colors.black12,\n                                                        blurRadius: 10,\n                                                        offset: Offset(0, -5),\n                                                      ),\n                                                    ]),\n                                                child: Column(\n                                                  mainAxisSize:\n                                                      MainAxisSize.min,\n                                                  children: [\n                                                    Text(\n                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n                                                      style: TextStyle(\n                                                          color: TColor\n                                                              .primaryText,\n                                                          fontSize: 18,\n                                                          fontWeight:\n                                                              FontWeight.w800),\n                                                    ),\n                                                    const SizedBox(\n                                                      height: 15,\n                                                    ),\n                                                    const Divider(),\n                                                    const SizedBox(\n                                                      height: 15,\n                                                    ),\n                                                    RoundButton(\n                                                        title: \"YES, CANCEL\",\n                                                        type:\n                                                            RoundButtonType.red,\n                                                        onPressed: () {\n                                                          context.pop();\n\n                                                          apiCancelRide();\n\n                                                          // context.push(\n                                                          //     const ReasonView());\n                                                        }),\n                                                    const SizedBox(\n                                                      height: 15,\n                                                    ),\n                                                    RoundButton(\n                                                        title: \"NO\",\n                                                        type: RoundButtonType\n                                                            .boarded,\n                                                        onPressed: () {\n                                                          context.pop();\n                                                        }),\n                                                    const SizedBox(\n                                                      height: 15,\n                                                    ),\n                                                  ],\n                                                ),\n                                              ),\n                                            ]);\n                                      });\n                                },\n                              ),\n                            ),\n                          ],\n                        ),\n                      const SizedBox(\n                        height: 25,\n                      ),\n                    ],\n                  ),\n                )\n              ],\n            )\n          else\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.end,\n              mainAxisAlignment: MainAxisAlignment.end,\n              children: [\n                Container(\n                  padding: const EdgeInsets.symmetric(vertical: 15),\n                  decoration: const BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.only(\n                          topLeft: Radius.circular(10),\n                          topRight: Radius.circular(10)),\n                      boxShadow: [\n                        BoxShadow(\n                          color: Colors.black12,\n                          blurRadius: 10,\n                          offset: Offset(0, -5),\n                        ),\n                      ]),\n                  child: Column(\n                    children: [\n                      const SizedBox(\n                        height: 15,\n                      ),\n                      Padding(\n                        padding: const EdgeInsets.symmetric(horizontal: 15),\n                        child: Text(\n                          \"How was your rider?\",\n                          textAlign: TextAlign.center,\n                          style: TextStyle(\n                              color: TColor.primaryText, fontSize: 18),\n                        ),\n                      ),\n                      const SizedBox(\n                        height: 15,\n                      ),\n                      Text(\n                        rideObj[\"name\"] as String? ?? \"\",\n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                          color: TColor.primaryText,\n                          fontSize: 25,\n                          fontWeight: FontWeight.w800,\n                        ),\n                      ),\n                      const SizedBox(\n                        height: 8,\n                      ),\n                      RatingBar.builder(\n                        initialRating: ratingVal,\n                        minRating: 1,\n                        direction: Axis.horizontal,\n                        allowHalfRating: true,\n                        itemCount: 5,\n                        itemPadding:\n                            const EdgeInsets.symmetric(horizontal: 4.0),\n                        itemBuilder: (context, _) => const Icon(\n                          Icons.star,\n                          color: Colors.amber,\n                        ),\n                        onRatingUpdate: (rating) {\n                          ratingVal = rating;\n                          print(rating);\n                        },\n                      ),\n                      const SizedBox(\n                        height: 30,\n                      ),\n                      Padding(\n                        padding: const EdgeInsets.symmetric(horizontal: 20),\n                        child: RoundButton(\n                            title: \"RATE RIDER\",\n                            onPressed: () {\n                              apiSubmitRate();\n                              // context.push(const TipDetailsView());\n                            }),\n                      ),\n                      const SizedBox(\n                        height: 25,\n                      ),\n                    ],\n                  ),\n                )\n              ],\n            ),\n          SafeArea(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.start,\n              children: [\n                Padding(\n                  padding:\n                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n                  child: InkWell(\n                    onTap: () {\n                      context.pop();\n                    },\n                    child: Container(\n                      padding: const EdgeInsets.symmetric(\n                          vertical: 15, horizontal: 25),\n                      decoration: BoxDecoration(\n                          color: Colors.white,\n                          borderRadius: BorderRadius.circular(50),\n                          boxShadow: const [\n                            BoxShadow(\n                              color: Colors.black26,\n                              blurRadius: 10,\n                            ),\n                          ]),\n                      child: Row(\n                        children: [\n                          Image.asset(\n                            showPickUp\n                                ? \"assets/img/pickup_pin_1.png\"\n                                : \"assets/img/drop_pin_1.png\",\n                            width: 30,\n                            height: 30,\n                          ),\n                          const SizedBox(\n                            width: 8,\n                          ),\n                          Expanded(\n                            child: Text(\n                              rideObj[showPickUp\n                                      ? \"pickup_address\"\n                                      : \"drop_address\"] as String? ??\n                                  \"\",\n                              style: TextStyle(\n                                color: TColor.primaryText,\n                                fontSize: 15,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                )\n              ],\n            ),\n          )\n        ],\n      ),\n    );\n  }\n\n  void addMarker() async {\n    await controller.setMarkerOfStaticPoint(\n      id: \"pickup\",\n      markerIcon: MarkerIcon(\n        iconWidget: Image.asset(\n          \"assets/img/pickup_pin.png\",\n          width: 80,\n          height: 80,\n        ),\n      ),\n    );\n\n    await controller.setMarkerOfStaticPoint(\n      id: \"dropoff\",\n      markerIcon: MarkerIcon(\n        iconWidget: Image.asset(\n          \"assets/img/drop_pin.png\",\n          width: 80,\n          height: 80,\n        ),\n      ),\n    );\n\n    loadMapRoad();\n  }\n\n  void loadMapRoad() async {\n    if (rideObj[\"booking_status\"] == bsGoUser ||\n        rideObj[\"booking_status\"] == bsWaitUser) {\n      // Current to Pickup Location Road Draw\n      await controller.setStaticPosition([\n        GeoPoint(\n            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n            longitude:\n                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n      ], \"pickup\");\n\n      await controller.setStaticPosition([\n        GeoPoint(\n            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n      ], \"dropoff\");\n\n      var roadInfo = await controller.drawRoad(\n          GeoPoint(\n              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n          GeoPoint(\n              latitude:\n                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n              longitude:\n                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n          roadType: RoadType.car,\n          roadOption: const RoadOption(\n              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n    } else {\n      // Current Location to Drop Off Location Draw Road\n      await controller.setStaticPosition([\n        GeoPoint(\n            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n      ], \"dropoff\");\n\n      var roadInfo = await controller.drawRoad(\n          GeoPoint(\n              latitude: double.tryParse(rideObj[\"lati\"].toString()) ?? 0.0,\n              longitude: double.tryParse(rideObj[\"longi\"].toString()) ?? 0.0),\n          GeoPoint(\n              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n              longitude:\n                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n          roadType: RoadType.car,\n          roadOption: const RoadOption(\n              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n    }\n    if (mounted) {\n      setState(() {});\n    }\n  }\n\n  @override\n  Future<void> mapIsReady(bool isReady) async {\n    if (isReady) {\n      addMarker();\n    }\n  }\n\n  //TODO: ApiCalling\n\n  void apiCancelRide() {\n    Globs.showHUD();\n    ServiceCall.post({\n      \"booking_id\": rideObj[\"booking_id\"].toString(),\n      \"booking_status\": rideObj[\"booking_status\"].toString()\n    }, SVKey.svUserRideCancel, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      Globs.hideHUD();\n\n      if (responseObj[KKey.status] == \"1\") {\n        mdShowAlert(\n            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n            () {\n          context.pop();\n        });\n      } else {\n        mdShowAlert(Globs.appName,\n            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n      }\n    }, failure: (err) async {\n      Globs.hideHUD();\n      mdShowAlert(Globs.appName, err.toString(), () {});\n    });\n  }\n\n  void apiSubmitRate() {\n    Globs.showHUD();\n    ServiceCall.post(\n      {\n        \"booking_id\": rideObj[\"booking_id\"].toString(),\n        \"rating\": ratingVal.toString(),\n        \"comment\": \"\",\n      },\n      SVKey.svRideRating,\n      isTokenApi: true,\n      withSuccess: (responseObj) async {\n        Globs.hideHUD();\n        if (responseObj[KKey.status] == \"1\") {\n          mdShowAlert(Globs.appName,\n              responseObj[KKey.message] as String? ?? MSG.success, () {\n            context.pop();\n          });\n        } else {\n          mdShowAlert(Globs.appName,\n              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n        }\n      },\n      failure: (err) async {\n        Globs.hideHUD();\n        mdShowAlert(Globs.appName, err.toString(), () {});\n      },\n    );\n  }\n\n  String statusName() {\n    switch (rideObj[\"booking_status\"]) {\n      case 2:\n        return \"On Way Driver\";\n      case 3:\n        return \"Waiting Driver\";\n      case 4:\n        return \"Ride Started With\";\n      case 5:\n        return \"Ride Complete With\";\n      case 6:\n        return \"Ride Cancel\";\n      case 7:\n        return \"No Driver Found\";\n      default:\n        return \"Finding Driver Near By\";\n    }\n  }\n\n  String statusText() {\n    switch (rideObj[\"booking_status\"]) {\n      case 2:\n        return \"On Way\";\n      case 3:\n        return \"Waiting\";\n      case 4:\n        return \"Started\";\n      case 5:\n        return \"Completed\";\n      case 6:\n        return \"Cancel\";\n      case 7:\n        return \"No Drivers\";\n      default:\n        return \"Pending\";\n    }\n  }\n\n  Color statusColor() {\n    switch (rideObj[\"booking_status\"]) {\n      case 2:\n        return Colors.green;\n      case 3:\n        return Colors.orange;\n      case 4:\n        return Colors.green;\n      case 5:\n        return Colors.green;\n      case 6:\n        return Colors.red;\n      case 7:\n        return Colors.red;\n      default:\n        return Colors.blue;\n    }\n  }\n\n  void showRideCompletedPopup() async {\n    var taxAmt = double.tryParse(rideObj[\"tax_amt\"] ?? \"0.0\") ?? 0.0;\n    var tollAmt = double.tryParse(rideObj[\"toll_tax\"] ?? \"0.0\") ?? 0.0;\n    var payableAmt = double.tryParse(rideObj[\"amt\"] ?? \"0.0\") ?? 0.0;\n    var totalAmt = payableAmt - tollAmt - taxAmt;\n\n    await showModalBottomSheet(\n        backgroundColor: Colors.transparent,\n        barrierColor: Colors.transparent,\n        isScrollControlled: true,\n        context: context,\n        builder: (context) {\n          return Stack(\n            alignment: Alignment.bottomCenter,\n            children: [\n              BackdropFilter(\n                filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n                child: Container(\n                  color: Colors.black38,\n                ),\n              ),\n              Container(\n                padding: const EdgeInsets.all(20),\n                decoration: const BoxDecoration(\n                    color: Colors.white,\n                    borderRadius: BorderRadius.only(\n                      topLeft: Radius.circular(10),\n                      topRight: Radius.circular(10),\n                    ),\n                    boxShadow: [\n                      BoxShadow(\n                          color: Colors.black12,\n                          blurRadius: 10,\n                          offset: Offset(0, -5))\n                    ]),\n                child: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  children: [\n                    Text(\n                      \"Ride Completed\",\n                      style: TextStyle(\n                        color: TColor.primaryText,\n                        fontSize: 20,\n                        fontWeight: FontWeight.w800,\n                      ),\n                    ),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                    const Divider(),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Payment Mode:\",\n                          style: TextStyle(\n                              color: TColor.primaryText, fontSize: 20),\n                        ),\n                        Text(\n                          (rideObj[\"payment_type\"] ?? 1) == 1\n                              ? \"COD\"\n                              : \"ONLINE\",\n                          style: TextStyle(\n                            color: TColor.primary,\n                            fontSize: 20,\n                            fontWeight: FontWeight.w700,\n                          ),\n                        ),\n                      ],\n                    ),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Total Distance:\",\n                          style: TextStyle(\n                              color: TColor.primaryText, fontSize: 17),\n                        ),\n                        Text(\n                          \"${(double.tryParse(rideObj[\"total_distance\"] ?? \"0\") ?? 0.0).toStringAsFixed(2)} KM\",\n                          style: TextStyle(\n                            color: TColor.primaryText,\n                            fontSize: 17,\n                            fontWeight: FontWeight.w700,\n                          ),\n                        ),\n                      ],\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Total Duration:\",\n                          style: TextStyle(\n                              color: TColor.primaryText, fontSize: 17),\n                        ),\n                        Text(\n                          rideObj[\"duration\"] ?? \" 00:00\",\n                          style: TextStyle(\n                            color: TColor.primaryText,\n                            fontSize: 17,\n                            fontWeight: FontWeight.w700,\n                          ),\n                        ),\n                      ],\n                    ),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                    const Divider(),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Total Amount:\",\n                          style: TextStyle(\n                              color: TColor.primaryText, fontSize: 17),\n                        ),\n                        Text(\n                          \"\\$${totalAmt.toStringAsFixed(2)}\",\n                          style: TextStyle(\n                            color: TColor.primaryText,\n                            fontSize: 17,\n                            fontWeight: FontWeight.w700,\n                          ),\n                        ),\n                      ],\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Tax Amount:\",\n                          style: TextStyle(\n                              color: TColor.primaryText, fontSize: 17),\n                        ),\n                        Text(\n                          \"+\\$${taxAmt.toStringAsFixed(2)}\",\n                          style: TextStyle(\n                            color: TColor.primaryText,\n                            fontSize: 17,\n                            fontWeight: FontWeight.w700,\n                          ),\n                        ),\n                      ],\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Toll Tax:\",\n                          style: TextStyle(\n                              color: TColor.primaryText, fontSize: 17),\n                        ),\n                        Text(\n                          \"+\\$${tollAmt.toStringAsFixed(2)}\",\n                          style: TextStyle(\n                            color: TColor.primaryText,\n                            fontSize: 17,\n                            fontWeight: FontWeight.w700,\n                          ),\n                        ),\n                      ],\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.end,\n                      children: [\n                        Container(\n                          width: 90,\n                          height: 2,\n                          color: TColor.primaryText,\n                        )\n                      ],\n                    ),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                    Row(\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                      children: [\n                        Text(\n                          \"Payable Amount:\",\n                          style: TextStyle(\n                              color: TColor.primaryText,\n                              fontSize: 20,\n                              fontWeight: FontWeight.w700),\n                        ),\n                        Text(\n                          \"\\$${payableAmt.toStringAsFixed(2)}\",\n                          style: TextStyle(\n                            color: TColor.primaryText,\n                            fontSize: 20,\n                            fontWeight: FontWeight.w700,\n                          ),\n                        ),\n                      ],\n                    ),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                    RoundButton(\n                        title: \"Yes, Accept Toll Tax\",\n                        type: RoundButtonType.red,\n                        onPressed: () {\n                          // context.pop();\n                          context.pop();\n                        }),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                    RoundButton(\n                        title: \"No\",\n                        onPressed: () {\n                          // context.pop();\n                          context.pop();\n                        }),\n                    const SizedBox(\n                      height: 15,\n                    ),\n                  ],\n                ),\n              )\n            ],\n          );\n        });\n  }\n}\n"
        }
    ]
}