{
    "sourceFile": "lib/view/user/user_home_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 49,
            "patches": [
                {
                    "date": 1722709468011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722710558842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -565,9 +565,9 @@\n         var rObj =\n             (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n \n         if (rObj.keys.isNotEmpty) {\n-          //context.push(UserRunRideView(rObj: rObj));\n+          context.push(UserRunRideView(rObj: rObj));\n         }\n       } else {\n         mdShowAlert(\n             \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n"
                },
                {
                    "date": 1722774243596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n import 'package:taxi_driver/model/price_detail_model.dart';\n import 'package:taxi_driver/model/zone_list_model.dart';\n import 'package:taxi_driver/view/menu/menu_view.dart';\n import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n \n class UserHomeView extends StatefulWidget {\n   const UserHomeView({super.key});\n \n"
                },
                {
                    "date": 1722862436667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,582 +0,0 @@\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862495365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722863258214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,582 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n \n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n"
                },
                {
                    "date": 1723291393798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,582 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n"
                },
                {
                    "date": 1723291532938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,582 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n"
                },
                {
                    "date": 1723972351052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,10 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n   );\n \n   @override\n   void initState() {\n@@ -82,9 +83,10 @@\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+     controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n"
                },
                {
                    "date": 1724061573042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,593 @@\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n     initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n   );\n \n   @override\n@@ -580,5 +1165,5 @@\n       mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n \n-}\n+}*/\n"
                },
                {
                    "date": 1724071508965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,13 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+    initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n   );\n+    //latitude: 33.583332, longitude: 130.399994\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n \n   @override\n   void initState() {\n     // TODO: implement initState\n"
                },
                {
                    "date": 1724071705557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1169,1168 +1169,4 @@\n     });\n   }\n \n }*/\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}\n"
                },
                {
                    "date": 1724071777573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,12 +82,15 @@\n     // TODO: implement dispose\n     super.dispose();\n     controller.dispose();\n   }\n+  //latitude: 33.583332, longitude: 130.399994\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n"
                },
                {
                    "date": 1724076708996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,10 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+        initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n   );\n     //latitude: 33.583332, longitude: 130.399994\n   //23.02756018230479, 72.58131973941731\n   //23.02726396414328, 72.5851928489523\n@@ -88,9 +89,10 @@\n   //23.02726396414328, 72.5851928489523\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+   // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n"
                },
                {
                    "date": 1724403640201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1177 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+        initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+  );\n+    //latitude: 33.583332, longitude: 130.399994\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+  //latitude: 33.583332, longitude: 130.399994\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+   // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+     controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}*/\n"
                },
                {
                    "date": 1724403683007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n   //23.02726396414328, 72.5851928489523\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n    // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n@@ -1174,1181 +1174,4 @@\n     });\n   }\n \n }*/\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-        initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-  );\n-    //latitude: 33.583332, longitude: 130.399994\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-  //latitude: 33.583332, longitude: 130.399994\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-   // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}\n-\n-\n-\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}*/\n"
                },
                {
                    "date": 1724672565163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1178 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+     initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+        //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+  );\n+    //latitude: 33.583332, longitude: 130.399994\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+  //latitude: 33.583332, longitude: 130.399994\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+   // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+     controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}*/\n"
                },
                {
                    "date": 1724672746791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,10 @@\n   //23.02726396414328, 72.5851928489523\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+        controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n    // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n"
                },
                {
                    "date": 1725274936306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,10 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-     initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-        //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+     //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+        initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n   );\n     //latitude: 33.583332, longitude: 130.399994\n   //23.02756018230479, 72.58131973941731\n@@ -1176,1181 +1176,4 @@\n     });\n   }\n \n }*/\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-        initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-  );\n-    //latitude: 33.583332, longitude: 130.399994\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-  //latitude: 33.583332, longitude: 130.399994\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-   // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}\n-\n-\n-\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}*/\n"
                },
                {
                    "date": 1725274958480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,10 +90,10 @@\n   //23.02726396414328, 72.5851928489523\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-        controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+        //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n    // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n"
                },
                {
                    "date": 1725277235038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1179 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+     initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+        //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+  );\n+    //latitude: 33.583332, longitude: 130.399994\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+  //latitude: 33.583332, longitude: 130.399994\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+        //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+   // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+     controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}*/\n"
                },
                {
                    "date": 1725277261103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,10 +90,10 @@\n   //23.02726396414328, 72.5851928489523\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-        //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+        controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n    // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n"
                },
                {
                    "date": 1725300983086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,10 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-     initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-        //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+     //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+        initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n   );\n     //latitude: 33.583332, longitude: 130.399994\n   //23.02756018230479, 72.58131973941731\n"
                },
                {
                    "date": 1725301108054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,10 +90,10 @@\n   //23.02726396414328, 72.5851928489523\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-        controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+        //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n    // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n"
                },
                {
                    "date": 1725518642297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,15 +45,11 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-     //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-        initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+     initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n   );\n-    //latitude: 33.583332, longitude: 130.399994\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n \n   @override\n   void initState() {\n     // TODO: implement initState\n@@ -84,17 +80,13 @@\n     // TODO: implement dispose\n     super.dispose();\n     controller.dispose();\n   }\n-  //latitude: 33.583332, longitude: 130.399994\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-        //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-   // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+     controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n@@ -589,591 +581,4 @@\n     });\n   }\n \n }\n-\n-\n-\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}*/\n"
                },
                {
                    "date": 1725526375726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,10 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-     initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n     //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n   );\n \n   @override\n@@ -581,1183 +582,4 @@\n     });\n   }\n \n }\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-     //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-        initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-  );\n-    //latitude: 33.583332, longitude: 130.399994\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-  //latitude: 33.583332, longitude: 130.399994\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-        //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-   // controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}\n-\n-\n-\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-    //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-    //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}*/\n"
                },
                {
                    "date": 1725526438216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,10 @@\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n     //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n"
                },
                {
                    "date": 1725680762157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,493 @@\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart' as google_maps;\n+import 'package:maps_toolkit/maps_toolkit.dart' as maps_toolkit;\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  google_maps.LatLng? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  google_maps.LatLng? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  GoogleMapController? mapController;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    changeLocation();\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if (data[KKey.status] == \"1\") {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    super.dispose();\n+    mapController?.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    mapController?.animateCamera(CameraUpdate.newLatLng(google_maps.LatLng(27.700769, 85.300140)));\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    google_maps.LatLng centerMap = await mapController!.getLatLng(ScreenCoordinate(x: 0, y: 0));\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr = await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (maps_toolkit.PolygonUtil.containsLocation(\n+            maps_toolkit.LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      // Implement road drawing logic using Google Maps API or a suitable package\n+      // Update estTimesInMin and estKm accordingly\n+\n+      if (selectZone != null) {\n+        servicePriceArr = (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(selectZone!.zoneId)).map((pObj) {\n+          var price = getESTValue(pObj);\n+          return {\n+            \"est_price_min\": price,\n+            \"est_price_max\": price * 1.3,\n+            \"service_name\": pObj[\"service_name\"],\n+            \"icon\": pObj[\"icon\"],\n+            \"service_id\": pObj[\"service_id\"],\n+            \"price_id\": pObj[\"price_id\"],\n+          };\n+        }).toList();\n+      }\n+    }\n+  }\n+\n+  double getESTValue(dynamic pObj) {\n+    var amount = (double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+        ((double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm) +\n+        ((double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin) +\n+        (double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if ((double.tryParse(pObj[\"mini_km\"]) ?? 0.0) >= estKm) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+    var minPrice = amount;\n+\n+    if ((double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(google_maps.LatLng point, String icon) async {\n+    mapController?.addMarker(Marker(\n+      markerId: MarkerId(point.toString()),\n+      position: point,\n+      icon: BitmapDescriptor.fromAsset(icon),\n+    ));\n+  }\n+\n+  void removeMarkerLocation(google_maps.LatLng point) async {\n+    mapController?.removeMarker(MarkerId(point.toString()));\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          GoogleMap(\n+            onMapCreated: (GoogleMapController controller) {\n+              mapController = controller;\n+            },\n+            initialCameraPosition: CameraPosition(\n+              target: google_maps.LatLng(27.700769, 85.300140),\n+              zoom: 13,\n+            ),\n+            markers: Set<Marker>(),\n+            onCameraMove: (CameraPosition position) {\n+              if (isLock && !isLocationChange) {\n+                return;\n+              }\n+              getSelectLocation(isSelectPickup);\n+            },\n+          ),\n+          Image.asset(\n+            isSelectPickup ? \"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty && dropLocation != null) {\n+                            addMarkerLocation(dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            mapController?.animateCamera(CameraUpdate.newLatLng(pickupLocation!));\n+                            await Future.delayed(const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty && pickupLocation != null) {\n+                            addMarkerLocation(pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            mapController?.animateCamera(CameraUpdate.newLatLng(dropLocation!));\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+              print(selectObj);\n+\n+              apiBookingRequest({\n+                \"pickup_latitude\": \"${pickupLocation?.latitude ?? 0.0}\",\n+                \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                \"pickup_address\": pickupAddressString,\n+                \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                \"drop_address\": dropAddressString,\n+                \"pickup_date\": DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\"),\n+                \"payment_type\": \"1\",\n+                \"card_id\": \"\",\n+                \"price_id\": selectObj[\"price_id\"].toString(),\n+                \"service_id\": selectObj[\"service_id\"].toString(),\n+                \"est_total_distance\": estKm.toStringAsFixed(2),\n+                \"est_duration\": estTimesInMin.toString(),\n+                \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2),\n+              });\n+            },\n+          );\n+        });\n+  }\n+\n+  void apiBookingRequest(Map<String, String> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      debugPrint(err.toString());\n+    });\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj = (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+}\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:geocoding/geocoding.dart';\n import 'package:maps_toolkit/maps_toolkit.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n@@ -583,4 +1070,5 @@\n     });\n   }\n \n }\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725681314223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,20 +172,10 @@\n       setState(() {});\n     }\n   }\n \n-  void addMarkerLocation(google_maps.LatLng point, String icon) async {\n-    mapController?.addMarker(Marker(\n-      markerId: MarkerId(point.toString()),\n-      position: point,\n-      icon: BitmapDescriptor.fromAsset(icon),\n-    ));\n-  }\n+ \n \n-  void removeMarkerLocation(google_maps.LatLng point) async {\n-    mapController?.removeMarker(MarkerId(point.toString()));\n-  }\n-\n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       body: Stack(\n@@ -275,20 +265,9 @@\n                           setState(() {\n                             isSelectPickup = true;\n                           });\n \n-                          if (dropAddressString.isNotEmpty && dropLocation != null) {\n-                            addMarkerLocation(dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            mapController?.animateCamera(CameraUpdate.newLatLng(pickupLocation!));\n-                            await Future.delayed(const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n+                        \n                         }),\n                     const SizedBox(\n                       height: 8,\n                     ),\n@@ -303,18 +282,18 @@\n                             isSelectPickup = false;\n                           });\n \n                           if (pickupAddressString.isNotEmpty && pickupLocation != null) {\n-                            addMarkerLocation(pickupLocation!, \"assets/img/pickup_pin.png\");\n+                           \n                           }\n \n                           if (dropAddressString.isEmpty) {\n                             getSelectLocation(isSelectPickup);\n                           } else {\n                             isLocationChange = false;\n                             mapController?.animateCamera(CameraUpdate.newLatLng(dropLocation!));\n                             isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n+\n                           }\n                         }),\n                     const SizedBox(\n                       height: 20,\n"
                },
                {
                    "date": 1725682157246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,472 +1,6 @@\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart' as google_maps;\n-import 'package:maps_toolkit/maps_toolkit.dart' as maps_toolkit;\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  google_maps.LatLng? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  google_maps.LatLng? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  GoogleMapController? mapController;\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-    changeLocation();\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if (data[KKey.status] == \"1\") {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    super.dispose();\n-    mapController?.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    mapController?.animateCamera(CameraUpdate.newLatLng(google_maps.LatLng(27.700769, 85.300140)));\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    google_maps.LatLng centerMap = await mapController!.getLatLng(ScreenCoordinate(x: 0, y: 0));\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr = await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (maps_toolkit.PolygonUtil.containsLocation(\n-            maps_toolkit.LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      // Implement road drawing logic using Google Maps API or a suitable package\n-      // Update estTimesInMin and estKm accordingly\n-\n-      if (selectZone != null) {\n-        servicePriceArr = (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(selectZone!.zoneId)).map((pObj) {\n-          var price = getESTValue(pObj);\n-          return {\n-            \"est_price_min\": price,\n-            \"est_price_max\": price * 1.3,\n-            \"service_name\": pObj[\"service_name\"],\n-            \"icon\": pObj[\"icon\"],\n-            \"service_id\": pObj[\"service_id\"],\n-            \"price_id\": pObj[\"price_id\"],\n-          };\n-        }).toList();\n-      }\n-    }\n-  }\n-\n-  double getESTValue(dynamic pObj) {\n-    var amount = (double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-        ((double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm) +\n-        ((double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin) +\n-        (double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if ((double.tryParse(pObj[\"mini_km\"]) ?? 0.0) >= estKm) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-    var minPrice = amount;\n-\n-    if ((double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n- \n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          GoogleMap(\n-            onMapCreated: (GoogleMapController controller) {\n-              mapController = controller;\n-            },\n-            initialCameraPosition: CameraPosition(\n-              target: google_maps.LatLng(27.700769, 85.300140),\n-              zoom: 13,\n-            ),\n-            markers: Set<Marker>(),\n-            onCameraMove: (CameraPosition position) {\n-              if (isLock && !isLocationChange) {\n-                return;\n-              }\n-              getSelectLocation(isSelectPickup);\n-            },\n-          ),\n-          Image.asset(\n-            isSelectPickup ? \"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                        \n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty && pickupLocation != null) {\n-                           \n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            mapController?.animateCamera(CameraUpdate.newLatLng(dropLocation!));\n-                            isLocationChange = true;\n-\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-              print(selectObj);\n-\n-              apiBookingRequest({\n-                \"pickup_latitude\": \"${pickupLocation?.latitude ?? 0.0}\",\n-                \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                \"pickup_address\": pickupAddressString,\n-                \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                \"drop_address\": dropAddressString,\n-                \"pickup_date\": DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\"),\n-                \"payment_type\": \"1\",\n-                \"card_id\": \"\",\n-                \"price_id\": selectObj[\"price_id\"].toString(),\n-                \"service_id\": selectObj[\"service_id\"].toString(),\n-                \"est_total_distance\": estKm.toStringAsFixed(2),\n-                \"est_duration\": estTimesInMin.toString(),\n-                \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2),\n-              });\n-            },\n-          );\n-        });\n-  }\n-\n-  void apiBookingRequest(Map<String, String> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      debugPrint(err.toString());\n-    });\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj = (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-}\n-\n-\n-\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:geocoding/geocoding.dart';\n import 'package:maps_toolkit/maps_toolkit.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n@@ -1049,5 +583,4 @@\n     });\n   }\n \n }\n-*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725692474026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,480 @@\n+\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:geocoding/geocoding.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart' as maps_toolkit;\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  LatLng? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  LatLng? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  late GoogleMapController mapController;\n+  final LatLng initialPosition = LatLng(27.700769, 85.300140);\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    changeLocation();\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if (data[KKey.status] == \"1\") {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  void _onMapCreated(GoogleMapController controller) {\n+    mapController = controller;\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    mapController.animateCamera(CameraUpdate.newLatLng(initialPosition));\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    LatLng centerMap = await mapController.getLatLng(\n+      ScreenCoordinate(\n+        x: MediaQuery.of(context).size.width ~/ 2,\n+        y: MediaQuery.of(context).size.height ~/ 2,\n+      ),\n+    );\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (maps_toolkit.PolygonUtil.containsLocation(\n+            maps_toolkit.LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          selectZone = zmObj;\n+        }\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    // Implement road drawing logic using Google Maps Polyline\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(LatLng point, String icon) async {\n+   // mapController.addMarker(\n+     // MarkerOptions(\n+       // position: point,\n+       // icon: BitmapDescriptor.fromAsset(icon),\n+      //),\n+    //);\n+  }\n+\n+  void removeMarkerLocation(LatLng point) async {\n+    // Implement marker removal logic\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          GoogleMap(\n+            onMapCreated: _onMapCreated,\n+            initialCameraPosition: CameraPosition(\n+              target: initialPosition,\n+              zoom: 13,\n+            ),\n+            myLocationEnabled: true,\n+            myLocationButtonEnabled: false,\n+            markers: {\n+              if (pickupLocation != null)\n+                Marker(\n+                  markerId: MarkerId('pickup'),\n+                  position: pickupLocation!,\n+                  //icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n+                ),\n+              if (dropLocation != null)\n+                Marker(\n+                  markerId: MarkerId('dropoff'),\n+                  position: dropLocation!,\n+                  //icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n+                ),\n+            },\n+          ),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            mapController.animateCamera(\n+                              CameraUpdate.newLatLng(pickupLocation!),\n+                            );\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            mapController.animateCamera(\n+                              CameraUpdate.newLatLng(dropLocation!),\n+                            );\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+              apiBookingRequest({\n+                \"pickup_latitude\": \"${pickupLocation?.latitude ?? 0.0}\",\n+                \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                \"pickup_address\": pickupAddressString,\n+                \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                \"drop_address\": dropAddressString,\n+                \"pickup_date\": DateTime.now()\n+                    .stringFormat(format: \"yyyy-MM-dd HH:mm:ss\"),\n+                \"payment_type\": \"1\",\n+                \"card_id\": \"\",\n+                \"price_id\": selectObj[\"price_id\"].toString(),\n+                \"service_id\": selectObj[\"service_id\"].toString(),\n+                \"est_total_distance\": estKm.toStringAsFixed(2),\n+                \"est_duration\": estTimesInMin.toString(),\n+                \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2),\n+              });\n+            },\n+          );\n+        });\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String, String> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail,\n+            () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      debugPrint(err.toString());\n+    });\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+}\n+\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+\n+\n+import 'package:geocoding/geocoding.dart';\n import 'package:maps_toolkit/maps_toolkit.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n@@ -583,4 +1055,5 @@\n     });\n   }\n \n }\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725697291540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,14 +126,14 @@\n     }\n   }\n \n   void addMarkerLocation(LatLng point, String icon) async {\n-   // mapController.addMarker(\n-     // MarkerOptions(\n-       // position: point,\n-       // icon: BitmapDescriptor.fromAsset(icon),\n-      //),\n-    //);\n+    mapController.addMarker(\n+      MarkerOptions(\n+        position: point,\n+        icon: BitmapDescriptor.fromAsset(icon),\n+      ),\n+    );\n   }\n \n   void removeMarkerLocation(LatLng point) async {\n     // Implement marker removal logic\n@@ -157,15 +157,15 @@\n               if (pickupLocation != null)\n                 Marker(\n                   markerId: MarkerId('pickup'),\n                   position: pickupLocation!,\n-                  //icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n+                  icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n                 ),\n               if (dropLocation != null)\n                 Marker(\n                   markerId: MarkerId('dropoff'),\n                   position: dropLocation!,\n-                  //icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n+                  icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n                 ),\n             },\n           ),\n           Image.asset(\n"
                },
                {
                    "date": 1725697344509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,14 +126,14 @@\n     }\n   }\n \n   void addMarkerLocation(LatLng point, String icon) async {\n-    mapController.addMarker(\n-      MarkerOptions(\n-        position: point,\n-        icon: BitmapDescriptor.fromAsset(icon),\n-      ),\n-    );\n+   // mapController.addMarker(\n+     // MarkerOptions(\n+       // position: point,\n+       // icon: BitmapDescriptor.fromAsset(icon),\n+      //),\n+    //);\n   }\n \n   void removeMarkerLocation(LatLng point) async {\n     // Implement marker removal logic\n@@ -157,15 +157,15 @@\n               if (pickupLocation != null)\n                 Marker(\n                   markerId: MarkerId('pickup'),\n                   position: pickupLocation!,\n-                  icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n+                  //icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n                 ),\n               if (dropLocation != null)\n                 Marker(\n                   markerId: MarkerId('dropoff'),\n                   position: dropLocation!,\n-                  icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n+                  //icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n                 ),\n             },\n           ),\n           Image.asset(\n"
                },
                {
                    "date": 1725698292907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n-\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:geocoding/geocoding.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart' as maps_toolkit;\n+import 'package:maps_toolkit/maps_toolkit.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n@@ -15,9 +14,8 @@\n import 'package:taxi_driver/model/zone_list_model.dart';\n import 'package:taxi_driver/view/menu/menu_view.dart';\n import 'package:taxi_driver/view/user/car_service_select_view.dart';\n import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart';\n \n class UserHomeView extends StatefulWidget {\n   const UserHomeView({super.key});\n \n@@ -30,13 +28,13 @@\n   bool isSelectPickup = true;\n   bool isLock = false;\n   bool isLocationChange = true;\n \n-  LatLng? pickupLocation;\n+  GeoPoint? pickupLocation;\n   Placemark? pickupAddressObj;\n   String pickupAddressString = \"\";\n \n-  LatLng? dropLocation;\n+  GeoPoint? dropLocation;\n   Placemark? dropAddressObj;\n   String dropAddressString = \"\";\n \n   List<ZoneListModel> zoneListArr = [];\n@@ -46,129 +44,248 @@\n \n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n-  late GoogleMapController mapController;\n-  final LatLng initialPosition = LatLng(27.700769, 85.300140);\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n \n   @override\n   void initState() {\n+    // TODO: implement initState\n     super.initState();\n     changeLocation();\n \n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n     SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if (data[KKey.status] == \"1\") {\n+      if(data[KKey.status] == \"1\" ) {\n         apiHome();\n       }\n     });\n \n     apiHome();\n   }\n \n-  void _onMapCreated(GoogleMapController controller) {\n-    mapController = controller;\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    mapController.animateCamera(CameraUpdate.newLatLng(initialPosition));\n+    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n   void getSelectLocation(bool isPickup) async {\n-    LatLng centerMap = await mapController.getLatLng(\n-      ScreenCoordinate(\n-        x: MediaQuery.of(context).size.width ~/ 2,\n-        y: MediaQuery.of(context).size.height ~/ 2,\n-      ),\n-    );\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n \n     List<Placemark> addressArr =\n         await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n \n     if (addressArr.isNotEmpty) {\n       if (isPickup) {\n         pickupLocation = centerMap;\n         pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n         pickupAddressString =\n             \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n       } else {\n         dropLocation = centerMap;\n         dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n         dropAddressString =\n             \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n       }\n \n       updateView();\n     }\n \n+    //Select Location inside zone find\n     if (isPickup) {\n       selectZone = null;\n       for (var zmObj in zoneListArr) {\n-        if (maps_toolkit.PolygonUtil.containsLocation(\n-            maps_toolkit.LatLng(centerMap.latitude, centerMap.longitude),\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n             zmObj.zonePathArr,\n             true)) {\n+          // Found Inside Zone\n+\n           selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n         }\n       }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n     }\n \n     drawRoadPickupToDrop();\n   }\n \n   void drawRoadPickupToDrop() async {\n-    // Implement road drawing logic using Google Maps Polyline\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n   }\n \n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n   void updateView() {\n     if (mounted) {\n       setState(() {});\n     }\n   }\n \n-  void addMarkerLocation(LatLng point, String icon) async {\n-   // mapController.addMarker(\n-     // MarkerOptions(\n-       // position: point,\n-       // icon: BitmapDescriptor.fromAsset(icon),\n-      //),\n-    //);\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n   }\n \n-  void removeMarkerLocation(LatLng point) async {\n-    // Implement marker removal logic\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n   }\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       body: Stack(\n         alignment: Alignment.center,\n         children: [\n-          GoogleMap(\n-            onMapCreated: _onMapCreated,\n-            initialCameraPosition: CameraPosition(\n-              target: initialPosition,\n-              zoom: 13,\n-            ),\n-            myLocationEnabled: true,\n-            myLocationButtonEnabled: false,\n-            markers: {\n-              if (pickupLocation != null)\n-                Marker(\n-                  markerId: MarkerId('pickup'),\n-                  position: pickupLocation!,\n-                  //icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n                 ),\n-              if (dropLocation != null)\n-                Marker(\n-                  markerId: MarkerId('dropoff'),\n-                  position: dropLocation!,\n-                  //icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n                 ),\n-            },\n-          ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n           Image.asset(\n             isSelectPickup\n                 ? \"assets/img/pickup_pin.png\"\n                 : \"assets/img/drop_pin.png\",\n@@ -241,17 +358,16 @@\n                           });\n \n                           if (dropAddressString.isNotEmpty &&\n                               dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n                             addMarkerLocation(\n                                 dropLocation!, \"assets/img/drop_pin.png\");\n                           }\n \n                           if (pickupLocation != null) {\n                             isLocationChange = false;\n-                            mapController.animateCamera(\n-                              CameraUpdate.newLatLng(pickupLocation!),\n-                            );\n+                            controller.goToLocation(pickupLocation!);\n                             await Future.delayed(\n                                 const Duration(milliseconds: 500));\n                             isLocationChange = true;\n \n@@ -281,11 +397,9 @@\n                           if (dropAddressString.isEmpty) {\n                             getSelectLocation(isSelectPickup);\n                           } else {\n                             isLocationChange = false;\n-                            mapController.animateCamera(\n-                              CameraUpdate.newLatLng(dropLocation!),\n-                            );\n+                            controller.goToLocation(dropLocation!);\n                             isLocationChange = true;\n                             removeMarkerLocation(dropLocation!);\n                           }\n                         }),\n@@ -399,48 +513,52 @@\n         builder: (context) {\n           return CarServiceSelectView(\n             serviceArr: servicePriceArr,\n             didSelect: (selectObj) {\n-              apiBookingRequest({\n-                \"pickup_latitude\": \"${pickupLocation?.latitude ?? 0.0}\",\n-                \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                \"pickup_address\": pickupAddressString,\n-                \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                \"drop_address\": dropAddressString,\n-                \"pickup_date\": DateTime.now()\n-                    .stringFormat(format: \"yyyy-MM-dd HH:mm:ss\"),\n-                \"payment_type\": \"1\",\n-                \"card_id\": \"\",\n-                \"price_id\": selectObj[\"price_id\"].toString(),\n-                \"service_id\": selectObj[\"service_id\"].toString(),\n-                \"est_total_distance\": estKm.toStringAsFixed(2),\n-                \"est_duration\": estTimesInMin.toString(),\n-                \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2),\n-              });\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n             },\n           );\n         });\n   }\n \n+  \n+\n   //TODO: ApiCalling\n \n-  void apiBookingRequest(Map<String, String> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n             Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail,\n-            () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      debugPrint(err.toString());\n-    });\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n   }\n \n   void apiHome() {\n     Globs.showHUD();\n@@ -463,19 +581,19 @@\n       Globs.hideHUD();\n       mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n+\n }\n \n \n \n \n /*import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n-\n-\n import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart' as maps_toolkit;\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n@@ -486,8 +604,9 @@\n import 'package:taxi_driver/model/zone_list_model.dart';\n import 'package:taxi_driver/view/menu/menu_view.dart';\n import 'package:taxi_driver/view/user/car_service_select_view.dart';\n import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart';\n \n class UserHomeView extends StatefulWidget {\n   const UserHomeView({super.key});\n \n@@ -500,13 +619,13 @@\n   bool isSelectPickup = true;\n   bool isLock = false;\n   bool isLocationChange = true;\n \n-  GeoPoint? pickupLocation;\n+  LatLng? pickupLocation;\n   Placemark? pickupAddressObj;\n   String pickupAddressString = \"\";\n \n-  GeoPoint? dropLocation;\n+  LatLng? dropLocation;\n   Placemark? dropAddressObj;\n   String dropAddressString = \"\";\n \n   List<ZoneListModel> zoneListArr = [];\n@@ -516,248 +635,129 @@\n \n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n+  late GoogleMapController mapController;\n+  final LatLng initialPosition = LatLng(27.700769, 85.300140);\n \n   @override\n   void initState() {\n-    // TODO: implement initState\n     super.initState();\n     changeLocation();\n \n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n     SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n+      if (data[KKey.status] == \"1\") {\n         apiHome();\n       }\n     });\n \n     apiHome();\n   }\n \n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n+  void _onMapCreated(GoogleMapController controller) {\n+    mapController = controller;\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n-     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n+    mapController.animateCamera(CameraUpdate.newLatLng(initialPosition));\n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n   void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+    LatLng centerMap = await mapController.getLatLng(\n+      ScreenCoordinate(\n+        x: MediaQuery.of(context).size.width ~/ 2,\n+        y: MediaQuery.of(context).size.height ~/ 2,\n+      ),\n+    );\n \n     List<Placemark> addressArr =\n         await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n \n     if (addressArr.isNotEmpty) {\n       if (isPickup) {\n         pickupLocation = centerMap;\n         pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n         pickupAddressString =\n             \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n       } else {\n         dropLocation = centerMap;\n         dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n         dropAddressString =\n             \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n       }\n \n       updateView();\n     }\n \n-    //Select Location inside zone find\n     if (isPickup) {\n       selectZone = null;\n       for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n+        if (maps_toolkit.PolygonUtil.containsLocation(\n+            maps_toolkit.LatLng(centerMap.latitude, centerMap.longitude),\n             zmObj.zonePathArr,\n             true)) {\n-          // Found Inside Zone\n-\n           selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n         }\n       }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n     }\n \n     drawRoadPickupToDrop();\n   }\n \n   void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n+    // Implement road drawing logic using Google Maps Polyline\n   }\n \n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n   void updateView() {\n     if (mounted) {\n       setState(() {});\n     }\n   }\n \n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n+  void addMarkerLocation(LatLng point, String icon) async {\n+   // mapController.addMarker(\n+     // MarkerOptions(\n+       // position: point,\n+       // icon: BitmapDescriptor.fromAsset(icon),\n+      //),\n+    //);\n   }\n \n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n+  void removeMarkerLocation(LatLng point) async {\n+    // Implement marker removal logic\n   }\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       body: Stack(\n         alignment: Alignment.center,\n         children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n+          GoogleMap(\n+            onMapCreated: _onMapCreated,\n+            initialCameraPosition: CameraPosition(\n+              target: initialPosition,\n+              zoom: 13,\n+            ),\n+            myLocationEnabled: true,\n+            myLocationButtonEnabled: false,\n+            markers: {\n+              if (pickupLocation != null)\n+                Marker(\n+                  markerId: MarkerId('pickup'),\n+                  position: pickupLocation!,\n+                  //icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n                 ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n+              if (dropLocation != null)\n+                Marker(\n+                  markerId: MarkerId('dropoff'),\n+                  position: dropLocation!,\n+                  //icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n                 ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n+            },\n+          ),\n           Image.asset(\n             isSelectPickup\n                 ? \"assets/img/pickup_pin.png\"\n                 : \"assets/img/drop_pin.png\",\n@@ -830,16 +830,17 @@\n                           });\n \n                           if (dropAddressString.isNotEmpty &&\n                               dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n                             addMarkerLocation(\n                                 dropLocation!, \"assets/img/drop_pin.png\");\n                           }\n \n                           if (pickupLocation != null) {\n                             isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n+                            mapController.animateCamera(\n+                              CameraUpdate.newLatLng(pickupLocation!),\n+                            );\n                             await Future.delayed(\n                                 const Duration(milliseconds: 500));\n                             isLocationChange = true;\n \n@@ -869,9 +870,11 @@\n                           if (dropAddressString.isEmpty) {\n                             getSelectLocation(isSelectPickup);\n                           } else {\n                             isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n+                            mapController.animateCamera(\n+                              CameraUpdate.newLatLng(dropLocation!),\n+                            );\n                             isLocationChange = true;\n                             removeMarkerLocation(dropLocation!);\n                           }\n                         }),\n@@ -985,52 +988,48 @@\n         builder: (context) {\n           return CarServiceSelectView(\n             serviceArr: servicePriceArr,\n             didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n+              apiBookingRequest({\n+                \"pickup_latitude\": \"${pickupLocation?.latitude ?? 0.0}\",\n+                \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                \"pickup_address\": pickupAddressString,\n+                \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                \"drop_address\": dropAddressString,\n+                \"pickup_date\": DateTime.now()\n+                    .stringFormat(format: \"yyyy-MM-dd HH:mm:ss\"),\n+                \"payment_type\": \"1\",\n+                \"card_id\": \"\",\n+                \"price_id\": selectObj[\"price_id\"].toString(),\n+                \"service_id\": selectObj[\"service_id\"].toString(),\n+                \"est_total_distance\": estKm.toStringAsFixed(2),\n+                \"est_duration\": estTimesInMin.toString(),\n+                \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2),\n+              });\n             },\n           );\n         });\n   }\n \n-  \n-\n   //TODO: ApiCalling\n \n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n+  void apiBookingRequest(Map<String, String> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n             Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail,\n+            () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      debugPrint(err.toString());\n+    });\n   }\n \n   void apiHome() {\n     Globs.showHUD();\n@@ -1053,7 +1052,7 @@\n       Globs.hideHUD();\n       mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n+}\n \n-}\n */\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725699069474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import 'package:flutter/foundation.dart';\n+/*import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:geocoding/geocoding.dart';\n import 'package:maps_toolkit/maps_toolkit.dart';\n@@ -583,13 +583,13 @@\n     });\n   }\n \n }\n+*/\n \n \n \n-\n-/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n import 'package:geocoding/geocoding.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:maps_toolkit/maps_toolkit.dart' as maps_toolkit;\n@@ -1054,5 +1054,4 @@\n     });\n   }\n }\n \n-*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725700307749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -715,14 +715,14 @@\n     }\n   }\n \n   void addMarkerLocation(LatLng point, String icon) async {\n-   // mapController.addMarker(\n-     // MarkerOptions(\n-       // position: point,\n-       // icon: BitmapDescriptor.fromAsset(icon),\n-      //),\n-    //);\n+    mapController.addMarker(\n+      MarkerOptions(\n+        position: point,\n+        icon: BitmapDescriptor.fromAsset(icon),\n+      ),\n+    );\n   }\n \n   void removeMarkerLocation(LatLng point) async {\n     // Implement marker removal logic\n@@ -746,15 +746,15 @@\n               if (pickupLocation != null)\n                 Marker(\n                   markerId: MarkerId('pickup'),\n                   position: pickupLocation!,\n-                  //icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n+                  icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n                 ),\n               if (dropLocation != null)\n                 Marker(\n                   markerId: MarkerId('dropoff'),\n                   position: dropLocation!,\n-                  //icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n+                  icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n                 ),\n             },\n           ),\n           Image.asset(\n"
                },
                {
                    "date": 1725778037954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,594 +1,4 @@\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n-     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}\n-*/\n-\n-\n-\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n import 'package:geocoding/geocoding.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n@@ -637,8 +47,10 @@\n   double estKm = 0.0;\n \n   late GoogleMapController mapController;\n   final LatLng initialPosition = LatLng(27.700769, 85.300140);\n+  Set<Marker> markers = {};\n+  Set<Polyline> polylines = {}; // Add this line\n \n   @override\n   void initState() {\n     super.initState();\n@@ -705,9 +117,27 @@\n     drawRoadPickupToDrop();\n   }\n \n   void drawRoadPickupToDrop() async {\n-    // Implement road drawing logic using Google Maps Polyline\n+    if (pickupLocation == null || dropLocation == null) return;\n+\n+    List<LatLng> polylineCoordinates = [pickupLocation!, dropLocation!];\n+\n+    setState(() {\n+      // Add polyline to the map\n+      polylines.add(\n+        Polyline(\n+          polylineId: PolylineId('route'),\n+          points: polylineCoordinates,\n+          color: Colors.blueAccent,\n+          width: 5,\n+        ),\n+      );\n+    });\n+\n+    // Calculate distance and duration (dummy values for now)\n+    estTimesInMin = 10.0; // Replace with actual calculation\n+    estKm = 5.0; // Replace with actual calculation\n   }\n \n   void updateView() {\n     if (mounted) {\n@@ -715,18 +145,28 @@\n     }\n   }\n \n   void addMarkerLocation(LatLng point, String icon) async {\n-    mapController.addMarker(\n-      MarkerOptions(\n-        position: point,\n-        icon: BitmapDescriptor.fromAsset(icon),\n-      ),\n+    final BitmapDescriptor bitmapIcon = await BitmapDescriptor.fromAssetImage(\n+      ImageConfiguration(size: Size(48, 48)), // Adjust the size as needed\n+      icon,\n     );\n+\n+    final Marker marker = Marker(\n+      markerId: MarkerId(point.toString()),\n+      position: point,\n+      icon: bitmapIcon,\n+    );\n+\n+    setState(() {\n+      markers.add(marker);\n+    });\n   }\n \n   void removeMarkerLocation(LatLng point) async {\n-    // Implement marker removal logic\n+    setState(() {\n+      markers.removeWhere((marker) => marker.position == point);\n+    });\n   }\n \n   @override\n   Widget build(BuildContext context) {\n@@ -741,22 +181,10 @@\n               zoom: 13,\n             ),\n             myLocationEnabled: true,\n             myLocationButtonEnabled: false,\n-            markers: {\n-              if (pickupLocation != null)\n-                Marker(\n-                  markerId: MarkerId('pickup'),\n-                  position: pickupLocation!,\n-                  icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n-                ),\n-              if (dropLocation != null)\n-                Marker(\n-                  markerId: MarkerId('dropoff'),\n-                  position: dropLocation!,\n-                  icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n-                ),\n-            },\n+            markers: markers,\n+            polylines: polylines, // Add this line\n           ),\n           Image.asset(\n             isSelectPickup\n                 ? \"assets/img/pickup_pin.png\"\n@@ -1053,5 +481,4 @@\n       mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n }\n-\n"
                },
                {
                    "date": 1725785050459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:geocoding/geocoding.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart' as maps_toolkit;\n+import 'package:maps_toolkit/maps_toolkit.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n@@ -14,9 +14,8 @@\n import 'package:taxi_driver/model/zone_list_model.dart';\n import 'package:taxi_driver/view/menu/menu_view.dart';\n import 'package:taxi_driver/view/user/car_service_select_view.dart';\n import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-import 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart';\n \n class UserHomeView extends StatefulWidget {\n   const UserHomeView({super.key});\n \n@@ -29,13 +28,13 @@\n   bool isSelectPickup = true;\n   bool isLock = false;\n   bool isLocationChange = true;\n \n-  LatLng? pickupLocation;\n+  GeoPoint? pickupLocation;\n   Placemark? pickupAddressObj;\n   String pickupAddressString = \"\";\n \n-  LatLng? dropLocation;\n+  GeoPoint? dropLocation;\n   Placemark? dropAddressObj;\n   String dropAddressString = \"\";\n \n   List<ZoneListModel> zoneListArr = [];\n@@ -45,147 +44,248 @@\n \n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n-  late GoogleMapController mapController;\n-  final LatLng initialPosition = LatLng(27.700769, 85.300140);\n-  Set<Marker> markers = {};\n-  Set<Polyline> polylines = {}; // Add this line\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n \n   @override\n   void initState() {\n+    // TODO: implement initState\n     super.initState();\n     changeLocation();\n \n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n     SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if (data[KKey.status] == \"1\") {\n+      if(data[KKey.status] == \"1\" ) {\n         apiHome();\n       }\n     });\n \n     apiHome();\n   }\n \n-  void _onMapCreated(GoogleMapController controller) {\n-    mapController = controller;\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    mapController.animateCamera(CameraUpdate.newLatLng(initialPosition));\n+    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n   void getSelectLocation(bool isPickup) async {\n-    LatLng centerMap = await mapController.getLatLng(\n-      ScreenCoordinate(\n-        x: MediaQuery.of(context).size.width ~/ 2,\n-        y: MediaQuery.of(context).size.height ~/ 2,\n-      ),\n-    );\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n \n     List<Placemark> addressArr =\n         await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n \n     if (addressArr.isNotEmpty) {\n       if (isPickup) {\n         pickupLocation = centerMap;\n         pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n         pickupAddressString =\n             \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n       } else {\n         dropLocation = centerMap;\n         dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n         dropAddressString =\n             \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n       }\n \n       updateView();\n     }\n \n+    //Select Location inside zone find\n     if (isPickup) {\n       selectZone = null;\n       for (var zmObj in zoneListArr) {\n-        if (maps_toolkit.PolygonUtil.containsLocation(\n-            maps_toolkit.LatLng(centerMap.latitude, centerMap.longitude),\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n             zmObj.zonePathArr,\n             true)) {\n+          // Found Inside Zone\n+\n           selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n         }\n       }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n     }\n \n     drawRoadPickupToDrop();\n   }\n \n   void drawRoadPickupToDrop() async {\n-    if (pickupLocation == null || dropLocation == null) return;\n+    await controller.clearAllRoads();\n \n-    List<LatLng> polylineCoordinates = [pickupLocation!, dropLocation!];\n-\n-    setState(() {\n-      // Add polyline to the map\n-      polylines.add(\n-        Polyline(\n-          polylineId: PolylineId('route'),\n-          points: polylineCoordinates,\n-          color: Colors.blueAccent,\n-          width: 5,\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n         ),\n       );\n-    });\n \n-    // Calculate distance and duration (dummy values for now)\n-    estTimesInMin = 10.0; // Replace with actual calculation\n-    estKm = 5.0; // Replace with actual calculation\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n   }\n \n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n   void updateView() {\n     if (mounted) {\n       setState(() {});\n     }\n   }\n \n-  void addMarkerLocation(LatLng point, String icon) async {\n-    final BitmapDescriptor bitmapIcon = await BitmapDescriptor.fromAssetImage(\n-      ImageConfiguration(size: Size(48, 48)), // Adjust the size as needed\n-      icon,\n-    );\n-\n-    final Marker marker = Marker(\n-      markerId: MarkerId(point.toString()),\n-      position: point,\n-      icon: bitmapIcon,\n-    );\n-\n-    setState(() {\n-      markers.add(marker);\n-    });\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n   }\n \n-  void removeMarkerLocation(LatLng point) async {\n-    setState(() {\n-      markers.removeWhere((marker) => marker.position == point);\n-    });\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n   }\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       body: Stack(\n         alignment: Alignment.center,\n         children: [\n-          GoogleMap(\n-            onMapCreated: _onMapCreated,\n-            initialCameraPosition: CameraPosition(\n-              target: initialPosition,\n-              zoom: 13,\n-            ),\n-            myLocationEnabled: true,\n-            myLocationButtonEnabled: false,\n-            markers: markers,\n-            polylines: polylines, // Add this line\n-          ),\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n           Image.asset(\n             isSelectPickup\n                 ? \"assets/img/pickup_pin.png\"\n                 : \"assets/img/drop_pin.png\",\n@@ -258,17 +358,16 @@\n                           });\n \n                           if (dropAddressString.isNotEmpty &&\n                               dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n                             addMarkerLocation(\n                                 dropLocation!, \"assets/img/drop_pin.png\");\n                           }\n \n                           if (pickupLocation != null) {\n                             isLocationChange = false;\n-                            mapController.animateCamera(\n-                              CameraUpdate.newLatLng(pickupLocation!),\n-                            );\n+                            controller.goToLocation(pickupLocation!);\n                             await Future.delayed(\n                                 const Duration(milliseconds: 500));\n                             isLocationChange = true;\n \n@@ -298,11 +397,9 @@\n                           if (dropAddressString.isEmpty) {\n                             getSelectLocation(isSelectPickup);\n                           } else {\n                             isLocationChange = false;\n-                            mapController.animateCamera(\n-                              CameraUpdate.newLatLng(dropLocation!),\n-                            );\n+                            controller.goToLocation(dropLocation!);\n                             isLocationChange = true;\n                             removeMarkerLocation(dropLocation!);\n                           }\n                         }),\n@@ -416,48 +513,52 @@\n         builder: (context) {\n           return CarServiceSelectView(\n             serviceArr: servicePriceArr,\n             didSelect: (selectObj) {\n-              apiBookingRequest({\n-                \"pickup_latitude\": \"${pickupLocation?.latitude ?? 0.0}\",\n-                \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                \"pickup_address\": pickupAddressString,\n-                \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                \"drop_address\": dropAddressString,\n-                \"pickup_date\": DateTime.now()\n-                    .stringFormat(format: \"yyyy-MM-dd HH:mm:ss\"),\n-                \"payment_type\": \"1\",\n-                \"card_id\": \"\",\n-                \"price_id\": selectObj[\"price_id\"].toString(),\n-                \"service_id\": selectObj[\"service_id\"].toString(),\n-                \"est_total_distance\": estKm.toStringAsFixed(2),\n-                \"est_duration\": estTimesInMin.toString(),\n-                \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2),\n-              });\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n             },\n           );\n         });\n   }\n \n+  \n+\n   //TODO: ApiCalling\n \n-  void apiBookingRequest(Map<String, String> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n             Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail,\n-            () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      debugPrint(err.toString());\n-    });\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n   }\n \n   void apiHome() {\n     Globs.showHUD();\n@@ -480,5 +581,6 @@\n       Globs.hideHUD();\n       mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n+\n }\n"
                },
                {
                    "date": 1725786281723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,18 +392,23 @@\n                               pickupLocation != null) {\n                             addMarkerLocation(\n                                 pickupLocation!, \"assets/img/pickup_pin.png\");\n                           }\n-\n+ \n+ \n                           if (dropAddressString.isEmpty) {\n                             getSelectLocation(isSelectPickup);\n                           } else {\n                             isLocationChange = false;\n                             controller.goToLocation(dropLocation!);\n                             isLocationChange = true;\n                             removeMarkerLocation(dropLocation!);\n                           }\n-                        }),\n+\n+\n+                        }\n+                        ),\n+\n                     const SizedBox(\n                       height: 20,\n                     ),\n                     RoundButton(\n"
                },
                {
                    "date": 1725860820705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,18 @@\n import 'package:taxi_driver/common/service_call.dart';\n import 'package:taxi_driver/common/socket_manager.dart';\n import 'package:taxi_driver/common_widget/location_select_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n+\n import 'package:taxi_driver/model/price_detail_model.dart';\n import 'package:taxi_driver/model/zone_list_model.dart';\n import 'package:taxi_driver/view/menu/menu_view.dart';\n import 'package:taxi_driver/view/user/car_service_select_view.dart';\n import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n \n+\n+\n+\n class UserHomeView extends StatefulWidget {\n   const UserHomeView({super.key});\n \n   @override\n@@ -84,8 +88,597 @@\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n+   controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n     controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n      //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n     //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n \n@@ -587,5 +1180,5 @@\n       mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n \n-}\n+}*/\n"
                },
                {
                    "date": 1725861787186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,10 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n     //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n   );\n \n   @override\n"
                },
                {
                    "date": 1725861933237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,11 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 33.652832, longitude: 139.839478),\n     //initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n     //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n   );\n \n   @override\n"
                },
                {
                    "date": 1725862103165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,10 @@\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-   controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     controller.goToLocation(GeoPoint(latitude: 33.652832, longitude: 139.839478));\n+  // controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n      //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n     //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n \n     zoneListArr = await ZoneListModel.getActiveList();\n"
                },
                {
                    "date": 1725863209290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n   MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 33.652832, longitude: 139.839478),\n+    initPosition: GeoPoint(latitude: 35.685272, longitude: 139.709442),\n     //initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n      //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n     //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n   );\n"
                },
                {
                    "date": 1725863246801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 33.652832, longitude: 139.839478));\n+     controller.goToLocation(GeoPoint(latitude: 35.685272, longitude: 139.709442));\n   // controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n      //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n     //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n \n"
                },
                {
                    "date": 1725955346726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1186 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+\n+\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 35.7247, longitude: 139.7067),\n+    //initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+     controller.goToLocation(GeoPoint(latitude: 35.685272, longitude: 139.709442));\n+  // controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+\n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+ \n+ \n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+\n+\n+                        }\n+                        ),\n+\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n+    });\n+  }\n+\n+}*/\n"
                },
                {
                    "date": 1725955374741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 35.685272, longitude: 139.709442));\n+     controller.goToLocation(GeoPoint(latitude: 35.7247, longitude: 139.7067));\n   // controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n      //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n     //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n \n@@ -1183,1190 +1183,4 @@\n     });\n   }\n \n }*/\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-\n-\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 35.685272, longitude: 139.709442),\n-    //initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 35.685272, longitude: 139.709442));\n-  // controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n-     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n-\n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}\n-\n-\n-\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n-     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n- \n- \n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-\n-\n-                        }\n-                        ),\n-\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}*/\n"
                },
                {
                    "date": 1726044688366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,22 @@\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart' as gmaps;\n import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart' as mtk;\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n import 'package:taxi_driver/common/socket_manager.dart';\n import 'package:taxi_driver/common_widget/location_select_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n-\n import 'package:taxi_driver/model/price_detail_model.dart';\n import 'package:taxi_driver/model/zone_list_model.dart';\n import 'package:taxi_driver/view/menu/menu_view.dart';\n import 'package:taxi_driver/view/user/car_service_select_view.dart';\n import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n \n-\n-\n-\n class UserHomeView extends StatefulWidget {\n   const UserHomeView({super.key});\n \n   @override\n@@ -32,13 +28,13 @@\n   bool isSelectPickup = true;\n   bool isLock = false;\n   bool isLocationChange = true;\n \n-  GeoPoint? pickupLocation;\n+  gmaps.LatLng? pickupLocation;\n   Placemark? pickupAddressObj;\n   String pickupAddressString = \"\";\n \n-  GeoPoint? dropLocation;\n+  gmaps.LatLng? dropLocation;\n   Placemark? dropAddressObj;\n   String dropAddressString = \"\";\n \n   List<ZoneListModel> zoneListArr = [];\n@@ -48,33 +44,18 @@\n \n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 35.7247, longitude: 139.7067),\n-    //initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n+  gmaps.GoogleMapController? mapController;\n+  Set<gmaps.Marker> markers = {};\n \n   @override\n   void initState() {\n-    // TODO: implement initState\n     super.initState();\n     changeLocation();\n \n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n     SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n+      if (data[KKey.status] == \"1\") {\n         apiHome();\n       }\n     });\n \n@@ -82,146 +63,71 @@\n   }\n \n   @override\n   void dispose() {\n-    // TODO: implement dispose\n     super.dispose();\n-    controller.dispose();\n+    mapController?.dispose();\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-     controller.goToLocation(GeoPoint(latitude: 35.7247, longitude: 139.7067));\n-  // controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n-     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n+    mapController?.animateCamera(gmaps.CameraUpdate.newLatLng(gmaps.LatLng(35.7247, 139.7067)));\n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n   void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+    gmaps.LatLng centerMap = await mapController!.getLatLng(gmaps.ScreenCoordinate(x: 0, y: 0));\n+    List<Placemark> addressArr = await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n \n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n     if (addressArr.isNotEmpty) {\n       if (isPickup) {\n         pickupLocation = centerMap;\n         pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+        pickupAddressString = \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n       } else {\n         dropLocation = centerMap;\n         dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+        dropAddressString = \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n       }\n \n       updateView();\n     }\n \n-    //Select Location inside zone find\n     if (isPickup) {\n       selectZone = null;\n       for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n+        if (mtk.PolygonUtil.containsLocation(\n+            mtk.LatLng(centerMap.latitude, centerMap.longitude),\n             zmObj.zonePathArr,\n             true)) {\n-          // Found Inside Zone\n-\n           selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n         }\n       }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n     }\n \n     drawRoadPickupToDrop();\n   }\n \n   void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n+    // Implement road drawing logic using Google Maps Directions API\n   }\n \n+  double getESTValue(dynamic pObj) {\n+    var amount = (double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+        ((double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm) +\n+        ((double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin) +\n+        (double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n \n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+    if ((double.tryParse(pObj[\"mini_km\"]) ?? 0.0) >= estKm) {\n       amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n     }\n \n     var minPrice = amount;\n \n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+    if ((double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice) {\n       minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n     }\n \n-\n     return minPrice;\n   }\n \n   void updateView() {\n@@ -229,73 +135,47 @@\n       setState(() {});\n     }\n   }\n \n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n+  void addMarkerLocation(gmaps.LatLng point, String icon) async {\n+    final marker = gmaps.Marker(\n+      markerId: gmaps.MarkerId(point.toString()),\n+      position: point,\n+      icon: await gmaps.BitmapDescriptor.fromAssetImage(\n+        ImageConfiguration(size: Size(48, 48)),\n+        icon,\n+      ),\n+    );\n+\n+    setState(() {\n+      markers.add(marker);\n+    });\n   }\n \n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n+  void removeMarkerLocation(gmaps.LatLng point) {\n+    setState(() {\n+      markers.removeWhere((marker) => marker.markerId == gmaps.MarkerId(point.toString()));\n+    });\n   }\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       body: Stack(\n         alignment: Alignment.center,\n         children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n+          gmaps.GoogleMap(\n+            onMapCreated: (gmaps.GoogleMapController controller) {\n+              mapController = controller;\n+            },\n+            initialCameraPosition: gmaps.CameraPosition(\n+              target: gmaps.LatLng(35.7247, 139.7067),\n+              zoom: 13,\n+            ),\n+            markers: markers,\n+          ),\n           Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n+            isSelectPickup ? \"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\",\n             width: 100,\n             height: 100,\n           ),\n           Column(\n@@ -335,10 +215,9 @@\n               const SizedBox(\n                 height: 15,\n               ),\n               Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n                 decoration: const BoxDecoration(\n                     color: Colors.white,\n                     borderRadius: BorderRadius.only(\n                         topLeft: Radius.circular(10),\n@@ -362,22 +241,17 @@\n                           setState(() {\n                             isSelectPickup = true;\n                           });\n \n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          if (dropAddressString.isNotEmpty && dropLocation != null) {\n+                            addMarkerLocation(dropLocation!, \"assets/img/drop_pin.png\");\n                           }\n \n                           if (pickupLocation != null) {\n                             isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n+                            mapController?.animateCamera(gmaps.CameraUpdate.newLatLng(pickupLocation!));\n+                            await Future.delayed(const Duration(milliseconds: 500));\n                             isLocationChange = true;\n-\n                             removeMarkerLocation(pickupLocation!);\n                           }\n                         }),\n                     const SizedBox(\n@@ -393,19 +267,17 @@\n                           setState(() {\n                             isSelectPickup = false;\n                           });\n \n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          if (pickupAddressString.isNotEmpty && pickupLocation != null) {\n+                            addMarkerLocation(pickupLocation!, \"assets/img/pickup_pin.png\");\n                           }\n \n                           if (dropAddressString.isEmpty) {\n                             getSelectLocation(isSelectPickup);\n                           } else {\n                             isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n+                            mapController?.animateCamera(gmaps.CameraUpdate.newLatLng(dropLocation!));\n                             isLocationChange = true;\n                             removeMarkerLocation(dropLocation!);\n                           }\n                         }),\n@@ -460,10 +332,9 @@\n                                 ),\n                               ),\n                             ),\n                             Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n+                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 1),\n                               decoration: BoxDecoration(\n                                 color: Colors.red,\n                                 borderRadius: BorderRadius.circular(30),\n                               ),\n@@ -519,668 +390,64 @@\n         builder: (context) {\n           return CarServiceSelectView(\n             serviceArr: servicePriceArr,\n             didSelect: (selectObj) {\n+              print(selectObj);\n \n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n+              apiBookingRequest({\n+                \"pickup_latitude\": \"${pickupLocation?.latitude ?? 0.0}\",\n+                \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                \"pickup_address\": pickupAddressString,\n+                \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                \"drop_address\": dropAddressString,\n+                \"pickup_date\": DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\"),\n+                \"payment_type\": \"1\",\n+                \"card_id\": \"\",\n+                \"price_id\": selectObj[\"price_id\"].toString(),\n+                \"service_id\": selectObj[\"service_id\"].toString(),\n+                \"est_total_distance\": estKm.toStringAsFixed(2),\n+                \"est_duration\": estTimesInMin.toString(),\n+                \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2),\n+              });\n             },\n           );\n         });\n   }\n \n-  \n-\n   //TODO: ApiCalling\n \n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n+  void apiBookingRequest(Map<String, String> parameter) {\n     Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n+    ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true, withSuccess: (responseObj) async {\n       Globs.hideHUD();\n-\n       if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n+        mdShowAlert(Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n       } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n-    }, failure: (error) async {\n+    }, failure: (err) async {\n       Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n+      debugPrint(err.toString());\n     });\n   }\n \n-}\n-\n-\n-\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n-     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n- \n- \n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-\n-\n-                        }\n-                        ),\n-\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n   void apiHome() {\n     Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true, withSuccess: (responseObj) async {\n       Globs.hideHUD();\n \n       if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+        var rObj = (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n \n         if (rObj.keys.isNotEmpty) {\n           context.push(UserRunRideView(rObj: rObj));\n         }\n       } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n     }, failure: (error) async {\n       Globs.hideHUD();\n       mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n-\n-}*/\n+}\n"
                },
                {
                    "date": 1726045014437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,26 @@\n import 'package:flutter/foundation.dart';\n import 'package:flutter/material.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart' as gmaps;\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart' as mtk;\n+import 'package:maps_toolkit/maps_toolkit.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n import 'package:taxi_driver/common/socket_manager.dart';\n import 'package:taxi_driver/common_widget/location_select_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n+\n import 'package:taxi_driver/model/price_detail_model.dart';\n import 'package:taxi_driver/model/zone_list_model.dart';\n import 'package:taxi_driver/view/menu/menu_view.dart';\n import 'package:taxi_driver/view/user/car_service_select_view.dart';\n import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n \n+\n+\n+\n class UserHomeView extends StatefulWidget {\n   const UserHomeView({super.key});\n \n   @override\n@@ -28,13 +32,13 @@\n   bool isSelectPickup = true;\n   bool isLock = false;\n   bool isLocationChange = true;\n \n-  gmaps.LatLng? pickupLocation;\n+  GeoPoint? pickupLocation;\n   Placemark? pickupAddressObj;\n   String pickupAddressString = \"\";\n \n-  gmaps.LatLng? dropLocation;\n+  GeoPoint? dropLocation;\n   Placemark? dropAddressObj;\n   String dropAddressString = \"\";\n \n   List<ZoneListModel> zoneListArr = [];\n@@ -44,18 +48,33 @@\n \n   double estTimesInMin = 0.0;\n   double estKm = 0.0;\n \n-  gmaps.GoogleMapController? mapController;\n-  Set<gmaps.Marker> markers = {};\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 35.7247, longitude: 139.7067),\n+    //initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n \n   @override\n   void initState() {\n+    // TODO: implement initState\n     super.initState();\n     changeLocation();\n \n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n     SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if (data[KKey.status] == \"1\") {\n+      if(data[KKey.status] == \"1\" ) {\n         apiHome();\n       }\n     });\n \n@@ -63,71 +82,146 @@\n   }\n \n   @override\n   void dispose() {\n+    // TODO: implement dispose\n     super.dispose();\n-    mapController?.dispose();\n+    controller.dispose();\n   }\n \n   void changeLocation() async {\n     await Future.delayed(const Duration(milliseconds: 4000));\n-    mapController?.animateCamera(gmaps.CameraUpdate.newLatLng(gmaps.LatLng(35.7247, 139.7067)));\n+     controller.goToLocation(GeoPoint(latitude: 35.7247, longitude: 139.7067));\n+  // controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n     zoneListArr = await ZoneListModel.getActiveList();\n   }\n \n   void getSelectLocation(bool isPickup) async {\n-    gmaps.LatLng centerMap = await mapController!.getLatLng(gmaps.ScreenCoordinate(x: 0, y: 0));\n-    List<Placemark> addressArr = await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n \n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n     if (addressArr.isNotEmpty) {\n       if (isPickup) {\n         pickupLocation = centerMap;\n         pickupAddressObj = addressArr.first;\n-        pickupAddressString = \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n       } else {\n         dropLocation = centerMap;\n         dropAddressObj = addressArr.first;\n-        dropAddressString = \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n       }\n \n       updateView();\n     }\n \n+    //Select Location inside zone find\n     if (isPickup) {\n       selectZone = null;\n       for (var zmObj in zoneListArr) {\n-        if (mtk.PolygonUtil.containsLocation(\n-            mtk.LatLng(centerMap.latitude, centerMap.longitude),\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n             zmObj.zonePathArr,\n             true)) {\n+          // Found Inside Zone\n+\n           selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n         }\n       }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n     }\n \n     drawRoadPickupToDrop();\n   }\n \n   void drawRoadPickupToDrop() async {\n-    // Implement road drawing logic using Google Maps Directions API\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n   }\n \n-  double getESTValue(dynamic pObj) {\n-    var amount = (double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-        ((double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm) +\n-        ((double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin) +\n-        (double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n \n-    if ((double.tryParse(pObj[\"mini_km\"]) ?? 0.0) >= estKm) {\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n       amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n     }\n \n     var minPrice = amount;\n \n-    if ((double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice) {\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n       minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n     }\n \n+\n     return minPrice;\n   }\n \n   void updateView() {\n@@ -135,47 +229,73 @@\n       setState(() {});\n     }\n   }\n \n-  void addMarkerLocation(gmaps.LatLng point, String icon) async {\n-    final marker = gmaps.Marker(\n-      markerId: gmaps.MarkerId(point.toString()),\n-      position: point,\n-      icon: await gmaps.BitmapDescriptor.fromAssetImage(\n-        ImageConfiguration(size: Size(48, 48)),\n-        icon,\n-      ),\n-    );\n-\n-    setState(() {\n-      markers.add(marker);\n-    });\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n   }\n \n-  void removeMarkerLocation(gmaps.LatLng point) {\n-    setState(() {\n-      markers.removeWhere((marker) => marker.markerId == gmaps.MarkerId(point.toString()));\n-    });\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n   }\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       body: Stack(\n         alignment: Alignment.center,\n         children: [\n-          gmaps.GoogleMap(\n-            onMapCreated: (gmaps.GoogleMapController controller) {\n-              mapController = controller;\n-            },\n-            initialCameraPosition: gmaps.CameraPosition(\n-              target: gmaps.LatLng(35.7247, 139.7067),\n-              zoom: 13,\n-            ),\n-            markers: markers,\n-          ),\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n           Image.asset(\n-            isSelectPickup ? \"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\",\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n             width: 100,\n             height: 100,\n           ),\n           Column(\n@@ -215,9 +335,10 @@\n               const SizedBox(\n                 height: 15,\n               ),\n               Container(\n-                padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n                 decoration: const BoxDecoration(\n                     color: Colors.white,\n                     borderRadius: BorderRadius.only(\n                         topLeft: Radius.circular(10),\n@@ -241,17 +362,22 @@\n                           setState(() {\n                             isSelectPickup = true;\n                           });\n \n-                          if (dropAddressString.isNotEmpty && dropLocation != null) {\n-                            addMarkerLocation(dropLocation!, \"assets/img/drop_pin.png\");\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n                           }\n \n                           if (pickupLocation != null) {\n                             isLocationChange = false;\n-                            mapController?.animateCamera(gmaps.CameraUpdate.newLatLng(pickupLocation!));\n-                            await Future.delayed(const Duration(milliseconds: 500));\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n                             isLocationChange = true;\n+\n                             removeMarkerLocation(pickupLocation!);\n                           }\n                         }),\n                     const SizedBox(\n@@ -267,17 +393,19 @@\n                           setState(() {\n                             isSelectPickup = false;\n                           });\n \n-                          if (pickupAddressString.isNotEmpty && pickupLocation != null) {\n-                            addMarkerLocation(pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n                           }\n \n                           if (dropAddressString.isEmpty) {\n                             getSelectLocation(isSelectPickup);\n                           } else {\n                             isLocationChange = false;\n-                            mapController?.animateCamera(gmaps.CameraUpdate.newLatLng(dropLocation!));\n+                            controller.goToLocation(dropLocation!);\n                             isLocationChange = true;\n                             removeMarkerLocation(dropLocation!);\n                           }\n                         }),\n@@ -332,9 +460,10 @@\n                                 ),\n                               ),\n                             ),\n                             Container(\n-                              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 1),\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n                               decoration: BoxDecoration(\n                                 color: Colors.red,\n                                 borderRadius: BorderRadius.circular(30),\n                               ),\n@@ -390,64 +519,668 @@\n         builder: (context) {\n           return CarServiceSelectView(\n             serviceArr: servicePriceArr,\n             didSelect: (selectObj) {\n-              print(selectObj);\n \n-              apiBookingRequest({\n-                \"pickup_latitude\": \"${pickupLocation?.latitude ?? 0.0}\",\n-                \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                \"pickup_address\": pickupAddressString,\n-                \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                \"drop_address\": dropAddressString,\n-                \"pickup_date\": DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\"),\n-                \"payment_type\": \"1\",\n-                \"card_id\": \"\",\n-                \"price_id\": selectObj[\"price_id\"].toString(),\n-                \"service_id\": selectObj[\"service_id\"].toString(),\n-                \"est_total_distance\": estKm.toStringAsFixed(2),\n-                \"est_duration\": estTimesInMin.toString(),\n-                \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2),\n-              });\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n             },\n           );\n         });\n   }\n \n+  \n+\n   //TODO: ApiCalling\n \n-  void apiBookingRequest(Map<String, String> parameter) {\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n+  void apiHome() {\n     Globs.showHUD();\n-    ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true, withSuccess: (responseObj) async {\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n       Globs.hideHUD();\n+\n       if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+\n+        if (rObj.keys.isNotEmpty) {\n+          context.push(UserRunRideView(rObj: rObj));\n+        }\n       } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n-    }, failure: (err) async {\n+    }, failure: (error) async {\n       Globs.hideHUD();\n-      debugPrint(err.toString());\n+      mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n \n+}\n+\n+\n+\n+/*import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:geocoding/geocoding.dart';\n+import 'package:maps_toolkit/maps_toolkit.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/location_select_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+import 'package:taxi_driver/view/menu/menu_view.dart';\n+import 'package:taxi_driver/view/user/car_service_select_view.dart';\n+import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n+\n+class UserHomeView extends StatefulWidget {\n+  const UserHomeView({super.key});\n+\n+  @override\n+  State<UserHomeView> createState() => _UserHomeViewState();\n+}\n+\n+class _UserHomeViewState extends State<UserHomeView> {\n+  bool isOpen = true;\n+  bool isSelectPickup = true;\n+  bool isLock = false;\n+  bool isLocationChange = true;\n+\n+  GeoPoint? pickupLocation;\n+  Placemark? pickupAddressObj;\n+  String pickupAddressString = \"\";\n+\n+  GeoPoint? dropLocation;\n+  Placemark? dropAddressObj;\n+  String dropAddressString = \"\";\n+\n+  List<ZoneListModel> zoneListArr = [];\n+  ZoneListModel? selectZone;\n+\n+  List servicePriceArr = [];\n+\n+  double estTimesInMin = 0.0;\n+  double estKm = 0.0;\n+\n+  MapController controller = MapController(\n+    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n+     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n+    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n+  );\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    changeLocation();\n+\n+    controller.listenerRegionIsChanging.addListener(() {\n+      if (controller.listenerRegionIsChanging.value != null) {\n+        if (isLock && !isLocationChange) {\n+          return;\n+        }\n+\n+        getSelectLocation(isSelectPickup);\n+      }\n+    });\n+\n+    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n+      if(data[KKey.status] == \"1\" ) {\n+        apiHome();\n+      }\n+    });\n+\n+    apiHome();\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  void changeLocation() async {\n+    await Future.delayed(const Duration(milliseconds: 4000));\n+    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n+     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n+    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n+\n+    zoneListArr = await ZoneListModel.getActiveList();\n+  }\n+\n+  void getSelectLocation(bool isPickup) async {\n+    GeoPoint centerMap = await controller.centerMap;\n+    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n+\n+    List<Placemark> addressArr =\n+        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n+    print(\"------------------\");\n+\n+    if (addressArr.isNotEmpty) {\n+      if (isPickup) {\n+        pickupLocation = centerMap;\n+        pickupAddressObj = addressArr.first;\n+        print(pickupAddressObj.toString());\n+\n+        pickupAddressString =\n+            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n+      } else {\n+        dropLocation = centerMap;\n+        dropAddressObj = addressArr.first;\n+        print(dropAddressObj.toString());\n+\n+        dropAddressString =\n+            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n+      }\n+\n+      updateView();\n+    }\n+\n+    //Select Location inside zone find\n+    if (isPickup) {\n+      selectZone = null;\n+      for (var zmObj in zoneListArr) {\n+        if (PolygonUtil.containsLocation(\n+            LatLng(centerMap.latitude, centerMap.longitude),\n+            zmObj.zonePathArr,\n+            true)) {\n+          // Found Inside Zone\n+\n+          selectZone = zmObj;\n+          print(\"Found Inside Zone -------\");\n+\n+          print(zmObj.toMap().toString());\n+        }\n+      }\n+\n+      if (selectZone == null) {\n+        print(\"Not Found Inside Zone -------\");\n+      }\n+    }\n+\n+    drawRoadPickupToDrop();\n+  }\n+\n+  void drawRoadPickupToDrop() async {\n+    await controller.clearAllRoads();\n+\n+    if (pickupLocation != null &&\n+        dropLocation != null &&\n+        pickupLocation?.latitude != dropLocation?.latitude &&\n+        pickupLocation?.longitude != dropLocation?.longitude) {\n+      RoadInfo roadObj = await controller.drawRoad(\n+        pickupLocation!,\n+        dropLocation!,\n+        roadType: RoadType.car,\n+        roadOption: RoadOption(\n+          roadColor: TColor.secondary,\n+          roadWidth: 10,\n+          zoomInto: false,\n+        ),\n+      );\n+\n+      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n+      estKm = roadObj.distance ?? 0.0;\n+\n+      if (kDebugMode) {\n+        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n+        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n+      }\n+\n+      if (selectZone != null) {\n+        servicePriceArr =\n+            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n+                selectZone!.zoneId)).map((pObj) {\n+                     var price = getESTValue(pObj);\n+                  return {\n+                    \"est_price_min\": price,\n+                    \"est_price_max\": price * 1.3,\n+                    \"service_name\": pObj[\"service_name\"],\n+                    \"icon\": pObj[\"icon\"],\n+                    \"service_id\": pObj[\"service_id\"],\n+                    \"price_id\": pObj[\"price_id\"],\n+                  };\n+                } ).toList();\n+\n+\n+       \n+      \n+      }\n+\n+\n+    }\n+  }\n+\n+\n+  double getESTValue( dynamic pObj ) {\n+\n+    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n+     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n+     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n+      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n+\n+    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n+      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+      \n+    }\n+\n+    var minPrice = amount;\n+\n+    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n+      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n+    }\n+\n+\n+    return minPrice;\n+  }\n+\n+  void updateView() {\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  void addMarkerLocation(GeoPoint point, String icon) async {\n+    await controller.addMarker(point,\n+        markerIcon: MarkerIcon(\n+          iconWidget: Image.asset(\n+            icon,\n+            width: 100,\n+            height: 100,\n+          ),\n+        ));\n+  }\n+\n+  void removeMarkerLocation(GeoPoint point) async {\n+    await controller.removeMarker(point);\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      body: Stack(\n+        alignment: Alignment.center,\n+        children: [\n+          OSMFlutter(\n+              controller: controller,\n+              osmOption: OSMOption(\n+                userTrackingOption: const UserTrackingOption(\n+                  enableTracking: false,\n+                  unFollowUser: false,\n+                ),\n+                zoomOption: const ZoomOption(\n+                  initZoom: 13,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                userLocationMarker: UserLocationMaker(\n+                  personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.location_history_rounded,\n+                      color: Colors.red,\n+                      size: 48,\n+                    ),\n+                  ),\n+                  directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.double_arrow,\n+                      size: 48,\n+                    ),\n+                  ),\n+                ),\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.yellowAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                    defaultMarker: const MarkerIcon(\n+                  icon: Icon(\n+                    Icons.person_pin_circle,\n+                    color: Colors.blue,\n+                    size: 56,\n+                  ),\n+                )),\n+              )),\n+          Image.asset(\n+            isSelectPickup\n+                ? \"assets/img/pickup_pin.png\"\n+                : \"assets/img/drop_pin.png\",\n+            width: 100,\n+            height: 100,\n+          ),\n+          Column(\n+            mainAxisAlignment: MainAxisAlignment.end,\n+            children: [\n+              Padding(\n+                padding: const EdgeInsets.symmetric(horizontal: 20),\n+                child: Row(\n+                  mainAxisAlignment: MainAxisAlignment.end,\n+                  crossAxisAlignment: CrossAxisAlignment.end,\n+                  children: [\n+                    InkWell(\n+                      borderRadius: BorderRadius.circular(20),\n+                      onTap: () {},\n+                      child: Container(\n+                        width: 50,\n+                        height: 50,\n+                        decoration: BoxDecoration(\n+                            borderRadius: BorderRadius.circular(35),\n+                            boxShadow: const [\n+                              BoxShadow(\n+                                color: Colors.black12,\n+                                blurRadius: 10,\n+                                offset: Offset(0, 5),\n+                              ),\n+                            ]),\n+                        child: Image.asset(\n+                          \"assets/img/current_location.png\",\n+                          width: 50,\n+                          height: 50,\n+                        ),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                decoration: const BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.only(\n+                        topLeft: Radius.circular(10),\n+                        topRight: Radius.circular(10)),\n+                    boxShadow: [\n+                      BoxShadow(\n+                        color: Colors.black12,\n+                        blurRadius: 10,\n+                        offset: Offset(0, -5),\n+                      ),\n+                    ]),\n+                child: Column(\n+                  children: [\n+                    LocationSelectButton(\n+                        title: \"Pickup\",\n+                        placeholder: \"Select Pickup Location\",\n+                        color: TColor.secondary,\n+                        value: pickupAddressString,\n+                        isSelect: isSelectPickup,\n+                        onPressed: () async {\n+                          setState(() {\n+                            isSelectPickup = true;\n+                          });\n+\n+                          if (dropAddressString.isNotEmpty &&\n+                              dropLocation != null) {\n+                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n+                            addMarkerLocation(\n+                                dropLocation!, \"assets/img/drop_pin.png\");\n+                          }\n+\n+                          if (pickupLocation != null) {\n+                            isLocationChange = false;\n+                            controller.goToLocation(pickupLocation!);\n+                            await Future.delayed(\n+                                const Duration(milliseconds: 500));\n+                            isLocationChange = true;\n+\n+                            removeMarkerLocation(pickupLocation!);\n+                          }\n+                        }),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    LocationSelectButton(\n+                        title: \"DropOff\",\n+                        placeholder: \"Select DropOff Location\",\n+                        color: TColor.primary,\n+                        value: dropAddressString,\n+                        isSelect: !isSelectPickup,\n+                        onPressed: () {\n+                          setState(() {\n+                            isSelectPickup = false;\n+                          });\n+\n+                          if (pickupAddressString.isNotEmpty &&\n+                              pickupLocation != null) {\n+                            addMarkerLocation(\n+                                pickupLocation!, \"assets/img/pickup_pin.png\");\n+                          }\n+ \n+ \n+                          if (dropAddressString.isEmpty) {\n+                            getSelectLocation(isSelectPickup);\n+                          } else {\n+                            isLocationChange = false;\n+                            controller.goToLocation(dropLocation!);\n+                            isLocationChange = true;\n+                            removeMarkerLocation(dropLocation!);\n+                          }\n+\n+\n+                        }\n+                        ),\n+\n+                    const SizedBox(\n+                      height: 20,\n+                    ),\n+                    RoundButton(\n+                        title: \"Continue\",\n+                        onPressed: () {\n+                          openCarService();\n+                        }),\n+                    const SizedBox(\n+                      height: 25,\n+                    )\n+                  ],\n+                ),\n+              )\n+            ],\n+          ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding: const EdgeInsets.all(15),\n+                  child: Row(\n+                    mainAxisAlignment: MainAxisAlignment.end,\n+                    children: [\n+                      SizedBox(\n+                        width: 60,\n+                        child: Stack(\n+                          alignment: Alignment.bottomLeft,\n+                          children: [\n+                            InkWell(\n+                              onTap: () {\n+                                context.push(const MenuView());\n+                              },\n+                              child: Container(\n+                                margin: const EdgeInsets.only(left: 10),\n+                                padding: const EdgeInsets.all(2),\n+                                decoration: BoxDecoration(\n+                                  color: Colors.white,\n+                                  borderRadius: BorderRadius.circular(30),\n+                                ),\n+                                child: ClipRRect(\n+                                  borderRadius: BorderRadius.circular(20),\n+                                  child: Image.asset(\n+                                    \"assets/img/u1.png\",\n+                                    width: 40,\n+                                    height: 40,\n+                                  ),\n+                                ),\n+                              ),\n+                            ),\n+                            Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 8, vertical: 1),\n+                              decoration: BoxDecoration(\n+                                color: Colors.red,\n+                                borderRadius: BorderRadius.circular(30),\n+                              ),\n+                              constraints: const BoxConstraints(minWidth: 15),\n+                              child: const Text(\n+                                \"3\",\n+                                style: TextStyle(\n+                                  color: Colors.white,\n+                                  fontSize: 10,\n+                                ),\n+                              ),\n+                            )\n+                          ],\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  void openCarService() {\n+    if (pickupLocation == null) {\n+      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n+      return;\n+    }\n+\n+    if (dropLocation == null) {\n+      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    if (servicePriceArr.isEmpty) {\n+      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n+      return;\n+    }\n+\n+    showModalBottomSheet(\n+        backgroundColor: Colors.transparent,\n+        context: context,\n+        builder: (context) {\n+          return CarServiceSelectView(\n+            serviceArr: servicePriceArr,\n+            didSelect: (selectObj) {\n+\n+                print(selectObj);\n+\n+                apiBookingRequest({\n+                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n+                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n+                  \"pickup_address\": pickupAddressString ,\n+                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n+                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n+                  \"drop_address\": dropAddressString,\n+                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n+                  \"payment_type\":\"1\",\n+                  \"card_id\":\"\",\n+                  \"price_id\": selectObj[\"price_id\"].toString() ,\n+                  \"service_id\": selectObj[\"service_id\"].toString(),\n+                  \"est_total_distance\": estKm.toStringAsFixed(2),\n+                  \"est_duration\": estTimesInMin.toString(),\n+                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n+                });\n+\n+            },\n+          );\n+        });\n+  }\n+\n+  \n+\n+  //TODO: ApiCalling\n+\n+  void apiBookingRequest(Map<String,String> parameter) {\n+      Globs.showHUD();\n+      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n+        Globs.hideHUD();\n+        if( responseObj[KKey.status] == \"1\" ) {\n+            mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n+        }else{\n+          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n+        }\n+      }, failure: (err) async {\n+          Globs.hideHUD();\n+          debugPrint(err.toString());\n+      } );\n+\n+  }\n+\n   void apiHome() {\n     Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true, withSuccess: (responseObj) async {\n+    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n       Globs.hideHUD();\n \n       if (responseObj[KKey.status] == \"1\") {\n-        var rObj = (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n+        var rObj =\n+            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n \n         if (rObj.keys.isNotEmpty) {\n           context.push(UserRunRideView(rObj: rObj));\n         }\n       } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n     }, failure: (error) async {\n       Globs.hideHUD();\n       mdShowAlert(Globs.appName, error.toString(), () {});\n     });\n   }\n-}\n+\n+}*/\n"
                },
                {
                    "date": 1726389666880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -590,597 +590,4 @@\n   }\n \n }\n \n-\n-\n-/*import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:geocoding/geocoding.dart';\n-import 'package:maps_toolkit/maps_toolkit.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/location_select_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-import 'package:taxi_driver/view/menu/menu_view.dart';\n-import 'package:taxi_driver/view/user/car_service_select_view.dart';\n-import 'package:taxi_driver/view/user/user_run_ride_view.dart';\n-\n-class UserHomeView extends StatefulWidget {\n-  const UserHomeView({super.key});\n-\n-  @override\n-  State<UserHomeView> createState() => _UserHomeViewState();\n-}\n-\n-class _UserHomeViewState extends State<UserHomeView> {\n-  bool isOpen = true;\n-  bool isSelectPickup = true;\n-  bool isLock = false;\n-  bool isLocationChange = true;\n-\n-  GeoPoint? pickupLocation;\n-  Placemark? pickupAddressObj;\n-  String pickupAddressString = \"\";\n-\n-  GeoPoint? dropLocation;\n-  Placemark? dropAddressObj;\n-  String dropAddressString = \"\";\n-\n-  List<ZoneListModel> zoneListArr = [];\n-  ZoneListModel? selectZone;\n-\n-  List servicePriceArr = [];\n-\n-  double estTimesInMin = 0.0;\n-  double estKm = 0.0;\n-\n-  MapController controller = MapController(\n-    initPosition: GeoPoint(latitude: 27.700769, longitude: 85.300140),\n-     //initPosition: GeoPoint(latitude: 33.583332, longitude: 130.399994),\n-    //initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n-  );\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    changeLocation();\n-\n-    controller.listenerRegionIsChanging.addListener(() {\n-      if (controller.listenerRegionIsChanging.value != null) {\n-        if (isLock && !isLocationChange) {\n-          return;\n-        }\n-\n-        getSelectLocation(isSelectPickup);\n-      }\n-    });\n-\n-    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n-      if(data[KKey.status] == \"1\" ) {\n-        apiHome();\n-      }\n-    });\n-\n-    apiHome();\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  void changeLocation() async {\n-    await Future.delayed(const Duration(milliseconds: 4000));\n-    controller.goToLocation(GeoPoint(latitude: 27.700769, longitude: 85.300140));\n-     //controller.goToLocation(GeoPoint(latitude: 33.583332, longitude: 130.399994));\n-    //controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n-\n-    zoneListArr = await ZoneListModel.getActiveList();\n-  }\n-\n-  void getSelectLocation(bool isPickup) async {\n-    GeoPoint centerMap = await controller.centerMap;\n-    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n-\n-    List<Placemark> addressArr =\n-        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n-    print(\"------------------\");\n-\n-    if (addressArr.isNotEmpty) {\n-      if (isPickup) {\n-        pickupLocation = centerMap;\n-        pickupAddressObj = addressArr.first;\n-        print(pickupAddressObj.toString());\n-\n-        pickupAddressString =\n-            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n-      } else {\n-        dropLocation = centerMap;\n-        dropAddressObj = addressArr.first;\n-        print(dropAddressObj.toString());\n-\n-        dropAddressString =\n-            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n-      }\n-\n-      updateView();\n-    }\n-\n-    //Select Location inside zone find\n-    if (isPickup) {\n-      selectZone = null;\n-      for (var zmObj in zoneListArr) {\n-        if (PolygonUtil.containsLocation(\n-            LatLng(centerMap.latitude, centerMap.longitude),\n-            zmObj.zonePathArr,\n-            true)) {\n-          // Found Inside Zone\n-\n-          selectZone = zmObj;\n-          print(\"Found Inside Zone -------\");\n-\n-          print(zmObj.toMap().toString());\n-        }\n-      }\n-\n-      if (selectZone == null) {\n-        print(\"Not Found Inside Zone -------\");\n-      }\n-    }\n-\n-    drawRoadPickupToDrop();\n-  }\n-\n-  void drawRoadPickupToDrop() async {\n-    await controller.clearAllRoads();\n-\n-    if (pickupLocation != null &&\n-        dropLocation != null &&\n-        pickupLocation?.latitude != dropLocation?.latitude &&\n-        pickupLocation?.longitude != dropLocation?.longitude) {\n-      RoadInfo roadObj = await controller.drawRoad(\n-        pickupLocation!,\n-        dropLocation!,\n-        roadType: RoadType.car,\n-        roadOption: RoadOption(\n-          roadColor: TColor.secondary,\n-          roadWidth: 10,\n-          zoomInto: false,\n-        ),\n-      );\n-\n-      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n-      estKm = roadObj.distance ?? 0.0;\n-\n-      if (kDebugMode) {\n-        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n-        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n-      }\n-\n-      if (selectZone != null) {\n-        servicePriceArr =\n-            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n-                selectZone!.zoneId)).map((pObj) {\n-                     var price = getESTValue(pObj);\n-                  return {\n-                    \"est_price_min\": price,\n-                    \"est_price_max\": price * 1.3,\n-                    \"service_name\": pObj[\"service_name\"],\n-                    \"icon\": pObj[\"icon\"],\n-                    \"service_id\": pObj[\"service_id\"],\n-                    \"price_id\": pObj[\"price_id\"],\n-                  };\n-                } ).toList();\n-\n-\n-       \n-      \n-      }\n-\n-\n-    }\n-  }\n-\n-\n-  double getESTValue( dynamic pObj ) {\n-\n-    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n-     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n-     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n-      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n-\n-    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n-      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-      \n-    }\n-\n-    var minPrice = amount;\n-\n-    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n-      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n-    }\n-\n-\n-    return minPrice;\n-  }\n-\n-  void updateView() {\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  void addMarkerLocation(GeoPoint point, String icon) async {\n-    await controller.addMarker(point,\n-        markerIcon: MarkerIcon(\n-          iconWidget: Image.asset(\n-            icon,\n-            width: 100,\n-            height: 100,\n-          ),\n-        ));\n-  }\n-\n-  void removeMarkerLocation(GeoPoint point) async {\n-    await controller.removeMarker(point);\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      body: Stack(\n-        alignment: Alignment.center,\n-        children: [\n-          OSMFlutter(\n-              controller: controller,\n-              osmOption: OSMOption(\n-                userTrackingOption: const UserTrackingOption(\n-                  enableTracking: false,\n-                  unFollowUser: false,\n-                ),\n-                zoomOption: const ZoomOption(\n-                  initZoom: 13,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                userLocationMarker: UserLocationMaker(\n-                  personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.location_history_rounded,\n-                      color: Colors.red,\n-                      size: 48,\n-                    ),\n-                  ),\n-                  directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.double_arrow,\n-                      size: 48,\n-                    ),\n-                  ),\n-                ),\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.yellowAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                    defaultMarker: const MarkerIcon(\n-                  icon: Icon(\n-                    Icons.person_pin_circle,\n-                    color: Colors.blue,\n-                    size: 56,\n-                  ),\n-                )),\n-              )),\n-          Image.asset(\n-            isSelectPickup\n-                ? \"assets/img/pickup_pin.png\"\n-                : \"assets/img/drop_pin.png\",\n-            width: 100,\n-            height: 100,\n-          ),\n-          Column(\n-            mainAxisAlignment: MainAxisAlignment.end,\n-            children: [\n-              Padding(\n-                padding: const EdgeInsets.symmetric(horizontal: 20),\n-                child: Row(\n-                  mainAxisAlignment: MainAxisAlignment.end,\n-                  crossAxisAlignment: CrossAxisAlignment.end,\n-                  children: [\n-                    InkWell(\n-                      borderRadius: BorderRadius.circular(20),\n-                      onTap: () {},\n-                      child: Container(\n-                        width: 50,\n-                        height: 50,\n-                        decoration: BoxDecoration(\n-                            borderRadius: BorderRadius.circular(35),\n-                            boxShadow: const [\n-                              BoxShadow(\n-                                color: Colors.black12,\n-                                blurRadius: 10,\n-                                offset: Offset(0, 5),\n-                              ),\n-                            ]),\n-                        child: Image.asset(\n-                          \"assets/img/current_location.png\",\n-                          width: 50,\n-                          height: 50,\n-                        ),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                decoration: const BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.only(\n-                        topLeft: Radius.circular(10),\n-                        topRight: Radius.circular(10)),\n-                    boxShadow: [\n-                      BoxShadow(\n-                        color: Colors.black12,\n-                        blurRadius: 10,\n-                        offset: Offset(0, -5),\n-                      ),\n-                    ]),\n-                child: Column(\n-                  children: [\n-                    LocationSelectButton(\n-                        title: \"Pickup\",\n-                        placeholder: \"Select Pickup Location\",\n-                        color: TColor.secondary,\n-                        value: pickupAddressString,\n-                        isSelect: isSelectPickup,\n-                        onPressed: () async {\n-                          setState(() {\n-                            isSelectPickup = true;\n-                          });\n-\n-                          if (dropAddressString.isNotEmpty &&\n-                              dropLocation != null) {\n-                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n-                            addMarkerLocation(\n-                                dropLocation!, \"assets/img/drop_pin.png\");\n-                          }\n-\n-                          if (pickupLocation != null) {\n-                            isLocationChange = false;\n-                            controller.goToLocation(pickupLocation!);\n-                            await Future.delayed(\n-                                const Duration(milliseconds: 500));\n-                            isLocationChange = true;\n-\n-                            removeMarkerLocation(pickupLocation!);\n-                          }\n-                        }),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    LocationSelectButton(\n-                        title: \"DropOff\",\n-                        placeholder: \"Select DropOff Location\",\n-                        color: TColor.primary,\n-                        value: dropAddressString,\n-                        isSelect: !isSelectPickup,\n-                        onPressed: () {\n-                          setState(() {\n-                            isSelectPickup = false;\n-                          });\n-\n-                          if (pickupAddressString.isNotEmpty &&\n-                              pickupLocation != null) {\n-                            addMarkerLocation(\n-                                pickupLocation!, \"assets/img/pickup_pin.png\");\n-                          }\n- \n- \n-                          if (dropAddressString.isEmpty) {\n-                            getSelectLocation(isSelectPickup);\n-                          } else {\n-                            isLocationChange = false;\n-                            controller.goToLocation(dropLocation!);\n-                            isLocationChange = true;\n-                            removeMarkerLocation(dropLocation!);\n-                          }\n-\n-\n-                        }\n-                        ),\n-\n-                    const SizedBox(\n-                      height: 20,\n-                    ),\n-                    RoundButton(\n-                        title: \"Continue\",\n-                        onPressed: () {\n-                          openCarService();\n-                        }),\n-                    const SizedBox(\n-                      height: 25,\n-                    )\n-                  ],\n-                ),\n-              )\n-            ],\n-          ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding: const EdgeInsets.all(15),\n-                  child: Row(\n-                    mainAxisAlignment: MainAxisAlignment.end,\n-                    children: [\n-                      SizedBox(\n-                        width: 60,\n-                        child: Stack(\n-                          alignment: Alignment.bottomLeft,\n-                          children: [\n-                            InkWell(\n-                              onTap: () {\n-                                context.push(const MenuView());\n-                              },\n-                              child: Container(\n-                                margin: const EdgeInsets.only(left: 10),\n-                                padding: const EdgeInsets.all(2),\n-                                decoration: BoxDecoration(\n-                                  color: Colors.white,\n-                                  borderRadius: BorderRadius.circular(30),\n-                                ),\n-                                child: ClipRRect(\n-                                  borderRadius: BorderRadius.circular(20),\n-                                  child: Image.asset(\n-                                    \"assets/img/u1.png\",\n-                                    width: 40,\n-                                    height: 40,\n-                                  ),\n-                                ),\n-                              ),\n-                            ),\n-                            Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                  horizontal: 8, vertical: 1),\n-                              decoration: BoxDecoration(\n-                                color: Colors.red,\n-                                borderRadius: BorderRadius.circular(30),\n-                              ),\n-                              constraints: const BoxConstraints(minWidth: 15),\n-                              child: const Text(\n-                                \"3\",\n-                                style: TextStyle(\n-                                  color: Colors.white,\n-                                  fontSize: 10,\n-                                ),\n-                              ),\n-                            )\n-                          ],\n-                        ),\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  void openCarService() {\n-    if (pickupLocation == null) {\n-      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n-      return;\n-    }\n-\n-    if (dropLocation == null) {\n-      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    if (servicePriceArr.isEmpty) {\n-      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n-      return;\n-    }\n-\n-    showModalBottomSheet(\n-        backgroundColor: Colors.transparent,\n-        context: context,\n-        builder: (context) {\n-          return CarServiceSelectView(\n-            serviceArr: servicePriceArr,\n-            didSelect: (selectObj) {\n-\n-                print(selectObj);\n-\n-                apiBookingRequest({\n-                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n-                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n-                  \"pickup_address\": pickupAddressString ,\n-                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n-                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n-                  \"drop_address\": dropAddressString,\n-                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n-                  \"payment_type\":\"1\",\n-                  \"card_id\":\"\",\n-                  \"price_id\": selectObj[\"price_id\"].toString() ,\n-                  \"service_id\": selectObj[\"service_id\"].toString(),\n-                  \"est_total_distance\": estKm.toStringAsFixed(2),\n-                  \"est_duration\": estTimesInMin.toString(),\n-                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n-                });\n-\n-            },\n-          );\n-        });\n-  }\n-\n-  \n-\n-  //TODO: ApiCalling\n-\n-  void apiBookingRequest(Map<String,String> parameter) {\n-      Globs.showHUD();\n-      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n-        Globs.hideHUD();\n-        if( responseObj[KKey.status] == \"1\" ) {\n-            mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n-        }else{\n-          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n-        }\n-      }, failure: (err) async {\n-          Globs.hideHUD();\n-          debugPrint(err.toString());\n-      } );\n-\n-  }\n-\n-  void apiHome() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        var rObj =\n-            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n-\n-        if (rObj.keys.isNotEmpty) {\n-          context.push(UserRunRideView(rObj: rObj));\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error.toString(), () {});\n-    });\n-  }\n-\n-}*/\n"
                }
            ],
            "date": 1722709468011,
            "name": "Commit-0",
            "content": "import 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\nimport 'package:geocoding/geocoding.dart';\nimport 'package:maps_toolkit/maps_toolkit.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/common/socket_manager.dart';\nimport 'package:taxi_driver/common_widget/location_select_button.dart';\nimport 'package:taxi_driver/common_widget/round_button.dart';\nimport 'package:taxi_driver/model/price_detail_model.dart';\nimport 'package:taxi_driver/model/zone_list_model.dart';\nimport 'package:taxi_driver/view/menu/menu_view.dart';\nimport 'package:taxi_driver/view/user/car_service_select_view.dart';\n\nclass UserHomeView extends StatefulWidget {\n  const UserHomeView({super.key});\n\n  @override\n  State<UserHomeView> createState() => _UserHomeViewState();\n}\n\nclass _UserHomeViewState extends State<UserHomeView> {\n  bool isOpen = true;\n  bool isSelectPickup = true;\n  bool isLock = false;\n  bool isLocationChange = true;\n\n  GeoPoint? pickupLocation;\n  Placemark? pickupAddressObj;\n  String pickupAddressString = \"\";\n\n  GeoPoint? dropLocation;\n  Placemark? dropAddressObj;\n  String dropAddressString = \"\";\n\n  List<ZoneListModel> zoneListArr = [];\n  ZoneListModel? selectZone;\n\n  List servicePriceArr = [];\n\n  double estTimesInMin = 0.0;\n  double estKm = 0.0;\n\n  MapController controller = MapController(\n    initPosition: GeoPoint(latitude: 21.1702, longitude: 72.8311),\n  );\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n    changeLocation();\n\n    controller.listenerRegionIsChanging.addListener(() {\n      if (controller.listenerRegionIsChanging.value != null) {\n        if (isLock && !isLocationChange) {\n          return;\n        }\n\n        getSelectLocation(isSelectPickup);\n      }\n    });\n\n    SocketManager.shared.socket?.on(\"user_request_accept\", (data) {\n      if(data[KKey.status] == \"1\" ) {\n        apiHome();\n      }\n    });\n\n    apiHome();\n  }\n\n  @override\n  void dispose() {\n    // TODO: implement dispose\n    super.dispose();\n    controller.dispose();\n  }\n\n  void changeLocation() async {\n    await Future.delayed(const Duration(milliseconds: 4000));\n    controller.goToLocation(GeoPoint(latitude: 21.1702, longitude: 72.8311));\n\n    zoneListArr = await ZoneListModel.getActiveList();\n  }\n\n  void getSelectLocation(bool isPickup) async {\n    GeoPoint centerMap = await controller.centerMap;\n    print(\"lat: ${centerMap.latitude}, long:${centerMap.longitude}\");\n\n    List<Placemark> addressArr =\n        await placemarkFromCoordinates(centerMap.latitude, centerMap.longitude);\n    print(\"------------------\");\n\n    if (addressArr.isNotEmpty) {\n      if (isPickup) {\n        pickupLocation = centerMap;\n        pickupAddressObj = addressArr.first;\n        print(pickupAddressObj.toString());\n\n        pickupAddressString =\n            \"${pickupAddressObj?.name}, ${pickupAddressObj?.street}, ${pickupAddressObj?.subLocality}, ${pickupAddressObj?.subAdministrativeArea}, ${pickupAddressObj?.administrativeArea}, ${pickupAddressObj?.postalCode}\";\n      } else {\n        dropLocation = centerMap;\n        dropAddressObj = addressArr.first;\n        print(dropAddressObj.toString());\n\n        dropAddressString =\n            \"${dropAddressObj?.name}, ${dropAddressObj?.street}, ${dropAddressObj?.subLocality}, ${dropAddressObj?.subAdministrativeArea}, ${dropAddressObj?.administrativeArea}, ${dropAddressObj?.postalCode}\";\n      }\n\n      updateView();\n    }\n\n    //Select Location inside zone find\n    if (isPickup) {\n      selectZone = null;\n      for (var zmObj in zoneListArr) {\n        if (PolygonUtil.containsLocation(\n            LatLng(centerMap.latitude, centerMap.longitude),\n            zmObj.zonePathArr,\n            true)) {\n          // Found Inside Zone\n\n          selectZone = zmObj;\n          print(\"Found Inside Zone -------\");\n\n          print(zmObj.toMap().toString());\n        }\n      }\n\n      if (selectZone == null) {\n        print(\"Not Found Inside Zone -------\");\n      }\n    }\n\n    drawRoadPickupToDrop();\n  }\n\n  void drawRoadPickupToDrop() async {\n    await controller.clearAllRoads();\n\n    if (pickupLocation != null &&\n        dropLocation != null &&\n        pickupLocation?.latitude != dropLocation?.latitude &&\n        pickupLocation?.longitude != dropLocation?.longitude) {\n      RoadInfo roadObj = await controller.drawRoad(\n        pickupLocation!,\n        dropLocation!,\n        roadType: RoadType.car,\n        roadOption: RoadOption(\n          roadColor: TColor.secondary,\n          roadWidth: 10,\n          zoomInto: false,\n        ),\n      );\n\n      estTimesInMin = (roadObj.duration ?? 0) / 60.0;\n      estKm = roadObj.distance ?? 0.0;\n\n      if (kDebugMode) {\n        print(\"EST Duration in Sec : ${roadObj.duration ?? 0.0} sec\");\n        print(\"EST Distance in Km : ${roadObj.distance ?? 0.0} km\");\n      }\n\n      if (selectZone != null) {\n        servicePriceArr =\n            (await PriceDetailModel.getSelectZoneGetServiceAndPriceList(\n                selectZone!.zoneId)).map((pObj) {\n                     var price = getESTValue(pObj);\n                  return {\n                    \"est_price_min\": price,\n                    \"est_price_max\": price * 1.3,\n                    \"service_name\": pObj[\"service_name\"],\n                    \"icon\": pObj[\"icon\"],\n                    \"service_id\": pObj[\"service_id\"],\n                    \"price_id\": pObj[\"price_id\"],\n                  };\n                } ).toList();\n\n\n       \n      \n      }\n\n\n    }\n  }\n\n\n  double getESTValue( dynamic pObj ) {\n\n    var amount = ( double.tryParse(pObj[\"base_charge\"]) ?? 0.0) +\n     (( double.tryParse(pObj[\"per_km_charge\"]) ?? 0.0) * estKm ) +\n     (( double.tryParse(pObj[\"per_min_charge\"]) ?? 0.0) * estTimesInMin ) +\n      ( double.tryParse(pObj[\"booking_charge\"]) ?? 0.0);\n\n    if( ( double.tryParse(pObj[\"mini_km\"]) ?? 0.0 ) >= estKm ) {\n      amount = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n      \n    }\n\n    var minPrice = amount;\n\n    if( (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0) >= minPrice ) {\n      minPrice = (double.tryParse(pObj[\"mini_fair\"]) ?? 0.0);\n    }\n\n\n    return minPrice;\n  }\n\n  void updateView() {\n    if (mounted) {\n      setState(() {});\n    }\n  }\n\n  void addMarkerLocation(GeoPoint point, String icon) async {\n    await controller.addMarker(point,\n        markerIcon: MarkerIcon(\n          iconWidget: Image.asset(\n            icon,\n            width: 100,\n            height: 100,\n          ),\n        ));\n  }\n\n  void removeMarkerLocation(GeoPoint point) async {\n    await controller.removeMarker(point);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Stack(\n        alignment: Alignment.center,\n        children: [\n          OSMFlutter(\n              controller: controller,\n              osmOption: OSMOption(\n                userTrackingOption: const UserTrackingOption(\n                  enableTracking: false,\n                  unFollowUser: false,\n                ),\n                zoomOption: const ZoomOption(\n                  initZoom: 13,\n                  minZoomLevel: 3,\n                  maxZoomLevel: 19,\n                  stepZoom: 1.0,\n                ),\n                userLocationMarker: UserLocationMaker(\n                  personMarker: const MarkerIcon(\n                    icon: Icon(\n                      Icons.location_history_rounded,\n                      color: Colors.red,\n                      size: 48,\n                    ),\n                  ),\n                  directionArrowMarker: const MarkerIcon(\n                    icon: Icon(\n                      Icons.double_arrow,\n                      size: 48,\n                    ),\n                  ),\n                ),\n                roadConfiguration: const RoadOption(\n                  roadColor: Colors.yellowAccent,\n                ),\n                markerOption: MarkerOption(\n                    defaultMarker: const MarkerIcon(\n                  icon: Icon(\n                    Icons.person_pin_circle,\n                    color: Colors.blue,\n                    size: 56,\n                  ),\n                )),\n              )),\n          Image.asset(\n            isSelectPickup\n                ? \"assets/img/pickup_pin.png\"\n                : \"assets/img/drop_pin.png\",\n            width: 100,\n            height: 100,\n          ),\n          Column(\n            mainAxisAlignment: MainAxisAlignment.end,\n            children: [\n              Padding(\n                padding: const EdgeInsets.symmetric(horizontal: 20),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.end,\n                  crossAxisAlignment: CrossAxisAlignment.end,\n                  children: [\n                    InkWell(\n                      borderRadius: BorderRadius.circular(20),\n                      onTap: () {},\n                      child: Container(\n                        width: 50,\n                        height: 50,\n                        decoration: BoxDecoration(\n                            borderRadius: BorderRadius.circular(35),\n                            boxShadow: const [\n                              BoxShadow(\n                                color: Colors.black12,\n                                blurRadius: 10,\n                                offset: Offset(0, 5),\n                              ),\n                            ]),\n                        child: Image.asset(\n                          \"assets/img/current_location.png\",\n                          width: 50,\n                          height: 50,\n                        ),\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n              const SizedBox(\n                height: 15,\n              ),\n              Container(\n                padding:\n                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n                decoration: const BoxDecoration(\n                    color: Colors.white,\n                    borderRadius: BorderRadius.only(\n                        topLeft: Radius.circular(10),\n                        topRight: Radius.circular(10)),\n                    boxShadow: [\n                      BoxShadow(\n                        color: Colors.black12,\n                        blurRadius: 10,\n                        offset: Offset(0, -5),\n                      ),\n                    ]),\n                child: Column(\n                  children: [\n                    LocationSelectButton(\n                        title: \"Pickup\",\n                        placeholder: \"Select Pickup Location\",\n                        color: TColor.secondary,\n                        value: pickupAddressString,\n                        isSelect: isSelectPickup,\n                        onPressed: () async {\n                          setState(() {\n                            isSelectPickup = true;\n                          });\n\n                          if (dropAddressString.isNotEmpty &&\n                              dropLocation != null) {\n                            //\"assets/img/pickup_pin.png\" : \"assets/img/drop_pin.png\"\n                            addMarkerLocation(\n                                dropLocation!, \"assets/img/drop_pin.png\");\n                          }\n\n                          if (pickupLocation != null) {\n                            isLocationChange = false;\n                            controller.goToLocation(pickupLocation!);\n                            await Future.delayed(\n                                const Duration(milliseconds: 500));\n                            isLocationChange = true;\n\n                            removeMarkerLocation(pickupLocation!);\n                          }\n                        }),\n                    const SizedBox(\n                      height: 8,\n                    ),\n                    LocationSelectButton(\n                        title: \"DropOff\",\n                        placeholder: \"Select DropOff Location\",\n                        color: TColor.primary,\n                        value: dropAddressString,\n                        isSelect: !isSelectPickup,\n                        onPressed: () {\n                          setState(() {\n                            isSelectPickup = false;\n                          });\n\n                          if (pickupAddressString.isNotEmpty &&\n                              pickupLocation != null) {\n                            addMarkerLocation(\n                                pickupLocation!, \"assets/img/pickup_pin.png\");\n                          }\n\n                          if (dropAddressString.isEmpty) {\n                            getSelectLocation(isSelectPickup);\n                          } else {\n                            isLocationChange = false;\n                            controller.goToLocation(dropLocation!);\n                            isLocationChange = true;\n                            removeMarkerLocation(dropLocation!);\n                          }\n                        }),\n                    const SizedBox(\n                      height: 20,\n                    ),\n                    RoundButton(\n                        title: \"Continue\",\n                        onPressed: () {\n                          openCarService();\n                        }),\n                    const SizedBox(\n                      height: 25,\n                    )\n                  ],\n                ),\n              )\n            ],\n          ),\n          SafeArea(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.start,\n              children: [\n                Padding(\n                  padding: const EdgeInsets.all(15),\n                  child: Row(\n                    mainAxisAlignment: MainAxisAlignment.end,\n                    children: [\n                      SizedBox(\n                        width: 60,\n                        child: Stack(\n                          alignment: Alignment.bottomLeft,\n                          children: [\n                            InkWell(\n                              onTap: () {\n                                context.push(const MenuView());\n                              },\n                              child: Container(\n                                margin: const EdgeInsets.only(left: 10),\n                                padding: const EdgeInsets.all(2),\n                                decoration: BoxDecoration(\n                                  color: Colors.white,\n                                  borderRadius: BorderRadius.circular(30),\n                                ),\n                                child: ClipRRect(\n                                  borderRadius: BorderRadius.circular(20),\n                                  child: Image.asset(\n                                    \"assets/img/u1.png\",\n                                    width: 40,\n                                    height: 40,\n                                  ),\n                                ),\n                              ),\n                            ),\n                            Container(\n                              padding: const EdgeInsets.symmetric(\n                                  horizontal: 8, vertical: 1),\n                              decoration: BoxDecoration(\n                                color: Colors.red,\n                                borderRadius: BorderRadius.circular(30),\n                              ),\n                              constraints: const BoxConstraints(minWidth: 15),\n                              child: const Text(\n                                \"3\",\n                                style: TextStyle(\n                                  color: Colors.white,\n                                  fontSize: 10,\n                                ),\n                              ),\n                            )\n                          ],\n                        ),\n                      ),\n                    ],\n                  ),\n                )\n              ],\n            ),\n          )\n        ],\n      ),\n    );\n  }\n\n  //TODO: Action\n\n  void openCarService() {\n    if (pickupLocation == null) {\n      mdShowAlert(\"Select\", \"Please your pickup location\", () {});\n      return;\n    }\n\n    if (dropLocation == null) {\n      mdShowAlert(\"Select\", \"Please you drop off location\", () {});\n      return;\n    }\n\n    if (selectZone == null) {\n      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n      return;\n    }\n\n    if (servicePriceArr.isEmpty) {\n      mdShowAlert(\"\", \"Not provide any service in this area\", () {});\n      return;\n    }\n\n    showModalBottomSheet(\n        backgroundColor: Colors.transparent,\n        context: context,\n        builder: (context) {\n          return CarServiceSelectView(\n            serviceArr: servicePriceArr,\n            didSelect: (selectObj) {\n\n                print(selectObj);\n\n                apiBookingRequest({\n                  \"pickup_latitude\":\"${ pickupLocation?.latitude ?? 0.0 }\",\n                  \"pickup_longitude\": \"${pickupLocation?.longitude ?? 0.0}\",\n                  \"pickup_address\": pickupAddressString ,\n                  \"drop_latitude\": \"${dropLocation?.latitude ?? 0.0}\",\n                  \"drop_longitude\": \"${dropLocation?.longitude ?? 0.0}\",\n                  \"drop_address\": dropAddressString,\n                  \"pickup_date\": DateTime.now().stringFormat( format : \"yyyy-MM-dd HH:mm:ss\") ,\n                  \"payment_type\":\"1\",\n                  \"card_id\":\"\",\n                  \"price_id\": selectObj[\"price_id\"].toString() ,\n                  \"service_id\": selectObj[\"service_id\"].toString(),\n                  \"est_total_distance\": estKm.toStringAsFixed(2),\n                  \"est_duration\": estTimesInMin.toString(),\n                  \"amount\": selectObj[\"est_price_max\"].toStringAsFixed(2) ,\n                });\n\n            },\n          );\n        });\n  }\n\n  \n\n  //TODO: ApiCalling\n\n  void apiBookingRequest(Map<String,String> parameter) {\n      Globs.showHUD();\n      ServiceCall.post(parameter, SVKey.svBookingRequest, isTokenApi: true,  withSuccess: ( responseObj ) async {\n        Globs.hideHUD();\n        if( responseObj[KKey.status] == \"1\" ) {\n            mdShowAlert(\n            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success, () {});\n        }else{\n          mdShowAlert(\"Error\", responseObj[KKey.message] as String? ?? MSG.fail  , () { });\n        }\n      }, failure: (err) async {\n          Globs.hideHUD();\n          debugPrint(err.toString());\n      } );\n\n  }\n\n  void apiHome() {\n    Globs.showHUD();\n    ServiceCall.post({}, SVKey.svHome, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      Globs.hideHUD();\n\n      if (responseObj[KKey.status] == \"1\") {\n        var rObj =\n            (responseObj[KKey.payload] as Map? ?? {})[\"running\"] as Map? ?? {};\n\n        if (rObj.keys.isNotEmpty) {\n          //context.push(UserRunRideView(rObj: rObj));\n        }\n      } else {\n        mdShowAlert(\n            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n      }\n    }, failure: (error) async {\n      Globs.hideHUD();\n      mdShowAlert(Globs.appName, error.toString(), () {});\n    });\n  }\n\n}\n"
        }
    ]
}