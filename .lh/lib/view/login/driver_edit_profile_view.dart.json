{
    "sourceFile": "lib/view/login/driver_edit_profile_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1720937319949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722512347684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n                       decoration: const InputDecoration(\n                         contentPadding: EdgeInsets.zero,\n                         focusedBorder: InputBorder.none,\n                         enabledBorder: InputBorder.none,\n-                        hintText: \"9876543210\",\n+                        hintText: \"0912001638\",\n                       ),\n                     ),\n                   ),\n                 ],\n"
                },
                {
                    "date": 1722774423332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,398 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"0912001638\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1723422232260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,402 +395,4 @@\n       },\n     );\n   }\n }\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1724058401095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,799 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"9876543210\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n+\n+\n+\n+/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"0912001638\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}*/\n"
                },
                {
                    "date": 1724064614489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,401 @@\n+\n+\n+\n+/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"0912001638\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}*/\n"
                },
                {
                    "date": 1724064895470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,799 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"9876543210\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n+\n+\n+\n+/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"0912001638\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}*/\n"
                },
                {
                    "date": 1724067036123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n \n     serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n     \n-    getServiceZoneList();\n+    //getServiceZoneList();\n   }\n \n   @override\n   Widget build(BuildContext context) {\n@@ -333,9 +333,9 @@\n     });\n   }\n \n   //ServiceCall\n-  void getServiceZoneList() {\n+ /* void getServiceZoneList() {\n     ServiceCall.post(\n       {},\n       SVKey.svServiceAndZoneList,\n       isTokenApi: true,\n@@ -362,9 +362,9 @@\n       failure: (err) async {\n         mdShowAlert(\"Error\", err.toString(), () {});\n       },\n     );\n-  }\n+  }*/\n \n   void serviceUpdateProfile(Map<String, dynamic> parameter) {\n     Globs.showHUD();\n     ServiceCall.post(\n"
                },
                {
                    "date": 1724067306524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n \n     serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n     \n-    //getServiceZoneList();\n+    getServiceZoneList();\n   }\n \n   @override\n   Widget build(BuildContext context) {\n@@ -333,9 +333,9 @@\n     });\n   }\n \n   //ServiceCall\n- /* void getServiceZoneList() {\n+  void getServiceZoneList() {\n     ServiceCall.post(\n       {},\n       SVKey.svServiceAndZoneList,\n       isTokenApi: true,\n@@ -362,9 +362,9 @@\n       failure: (err) async {\n         mdShowAlert(\"Error\", err.toString(), () {});\n       },\n     );\n-  }*/\n+  }\n \n   void serviceUpdateProfile(Map<String, dynamic> parameter) {\n     Globs.showHUD();\n     ServiceCall.post(\n"
                },
                {
                    "date": 1724069372929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -796,1602 +796,4 @@\n       },\n     );\n   }\n }*/\n-\n-\n-\n-/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}*/\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"9876543210\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n-\n-\n-\n-/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}*/\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1724754948716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -345,13 +345,13 @@\n \n           zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n           serviceList = payloadObj[\"service_list\"] as List? ?? [];\n \n-          zoneList.forEach((zObj) {\n+          for (var zObj in zoneList) {\n             if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n               selectZone = zObj;\n             }\n-          });\n+          }\n \n           if (mounted) {\n             setState(() {});\n           }\n"
                },
                {
                    "date": 1724868248717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,256 +49,257 @@\n     getServiceZoneList();\n   }\n \n   @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n+Widget build(BuildContext context) {\n+  return Scaffold(\n+    appBar: AppBar(\n+      leading: IconButton(\n+        onPressed: () {\n+          Navigator.pop(context);\n+        },\n+        icon: Image.asset(\n+          \"assets/img/back.png\",\n+          width: 25,\n+          height: 25,\n         ),\n       ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n+    ),\n+    body: SingleChildScrollView(\n+      child: Padding(\n+        padding: const EdgeInsets.symmetric(horizontal: 20),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            Text(\n+              \"Edit profile\",\n+              style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontSize: 25,\n+                  fontWeight: FontWeight.w800),\n+            ),\n+            const SizedBox(\n+              height: 30,\n+            ),\n+            LineTextField(\n+              title: \"Name\",\n+              hintText: \"Ex: Jon Amit\",\n+              controller: txtName,\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            Row(\n+              children: [\n+                Expanded(\n+                  child: TextButton(\n+                    onPressed: () {\n+                      setState(() {\n+                        isMale = true;\n+                      });\n                     },\n                     child: Row(\n+                      mainAxisAlignment: MainAxisAlignment.start,\n                       mainAxisSize: MainAxisSize.min,\n                       children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n+                        Icon(\n+                          isMale\n+                              ? Icons.radio_button_checked\n+                              : Icons.radio_button_off,\n+                          color: TColor.primary,\n                         ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n+                        const SizedBox(\n+                          width: 10,\n                         ),\n+                        Expanded(\n+                          child: Text(\n+                            \"Male\",\n+                            style: TextStyle(\n+                                color: TColor.placeholder, fontSize: 14),\n+                          ),\n+                        ),\n                       ],\n                     ),\n                   ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"9876543210\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n+                ),\n+                Expanded(\n+                  child: TextButton(\n+                    onPressed: () {\n+                      setState(() {\n+                        isMale = false;\n+                      });\n+                    },\n+                    child: Row(\n+                      mainAxisAlignment: MainAxisAlignment.start,\n+                      mainAxisSize: MainAxisSize.min,\n                       children: [\n+                        Icon(\n+                          !isMale\n+                              ? Icons.radio_button_checked\n+                              : Icons.radio_button_off,\n+                          color: TColor.primary,\n+                        ),\n                         const SizedBox(\n                           width: 10,\n                         ),\n                         Expanded(\n                           child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n+                            \"Female\",\n                             style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n+                                color: TColor.placeholder, fontSize: 14),\n                           ),\n                         ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n                       ],\n-                    );\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            const Divider(),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            LineTextField(\n+              title: \"Email\",\n+              hintText: \"Ex: 123@mail.com\",\n+              keyboardType: TextInputType.emailAddress,\n+              controller: txtEmail,\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            Text(\n+              \"Mobile Number\",\n+              style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+            ),\n+            Row(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                InkWell(\n+                  onTap: () async {\n+                    final code =\n+                        await countryCodePicker.showPicker(context: context);\n+                    if (code != null) {\n+                      countryCode = code;\n+                      setState(() {});\n+                    }\n                   },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n+                  child: Row(\n+                    mainAxisSize: MainAxisSize.min,\n+                    children: [\n+                      SizedBox(\n+                        width: 30,\n+                        height: 20,\n+                        child: countryCode.flagImage(), // Call the function to get the widget\n                       ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n+                      Text(\n+                        \"  ${countryCode.dialCode}\",\n+                        style: TextStyle(\n+                            color: TColor.primaryText, fontSize: 16),\n+                      ),\n+                    ],\n+                  ),\n+                ),\n+                const SizedBox(\n+                  width: 15,\n+                ),\n+                Expanded(\n+                  child: TextField(\n+                    controller: txtMobile,\n+                    keyboardType: TextInputType.phone,\n+                    decoration: const InputDecoration(\n+                      contentPadding: EdgeInsets.zero,\n+                      focusedBorder: InputBorder.none,\n+                      enabledBorder: InputBorder.none,\n+                      hintText: \"9876543210\",\n+                    ),\n+                  ),\n+                ),\n+              ],\n+            ),\n+            const Divider(),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            LineDropDownButton(\n+                title: \"Zone\",\n+                hintText: \"Select Zone\",\n+                itemsArr: zoneList,\n+                selectVal: selectZone,\n+                didChanged: (newObj) {\n+                  setState(() {\n+                    selectZone = newObj;\n+                  });\n+                },\n+                displayKey: \"zone_name\"),\n+            const SizedBox(\n+              height: 15,\n+            ),\n+            Text(\n+              \"Service List\",\n+              style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontSize: 25,\n+                  fontWeight: FontWeight.w800),\n+            ),\n+            ListView.separated(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                physics: const NeverScrollableScrollPhysics(),\n+                shrinkWrap: true,\n+                itemBuilder: (context, index) {\n+                  var sObj = serviceList[index] as Map? ?? {};\n+\n+                  return Row(\n+                    children: [\n+                      const SizedBox(\n+                        width: 10,\n+                      ),\n+                      Expanded(\n+                        child: Text(\n+                          sObj[\"service_name\"] as String? ?? \"\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                          ),\n+                        ),\n+                      ),\n+                      CupertinoSwitch(\n+                          value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                          onChanged: (isTrue) {\n+                            if (isTrue) {\n+                              serviceOnIndex.add(sObj[\"service_id\"]);\n+                            } else {\n+                              serviceOnIndex.remove(sObj[\"service_id\"]);\n+                            }\n+\n+                            setState(() {});\n+                          })\n+                    ],\n+                  );\n+                },\n+                separatorBuilder: (context, index) => const SizedBox(\n+                      height: 8,\n+                    ),\n+                itemCount: serviceList.length),\n+            const SizedBox(\n+              height: 30,\n+            ),\n+            RoundButton(\n+              onPressed: btnUpdateAction,\n+              title: \"UPDATE\",\n+            ),\n+          ],\n         ),\n       ),\n-    );\n-  }\n+    ),\n+  );\n+}\n \n+\n   //TODO: Button Action\n   void btnUpdateAction() {\n     if (txtName.text.isEmpty) {\n       mdShowAlert(\"Error\", \"Please enter name\", () {});\n"
                },
                {
                    "date": 1725360375326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,800 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+  return Scaffold(\n+    appBar: AppBar(\n+      leading: IconButton(\n+        onPressed: () {\n+          Navigator.pop(context);\n+        },\n+        icon: Image.asset(\n+          \"assets/img/back.png\",\n+          width: 25,\n+          height: 25,\n+        ),\n+      ),\n+    ),\n+    body: SingleChildScrollView(\n+      child: Padding(\n+        padding: const EdgeInsets.symmetric(horizontal: 20),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            Text(\n+              \"Edit profile\",\n+              style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontSize: 25,\n+                  fontWeight: FontWeight.w800),\n+            ),\n+            const SizedBox(\n+              height: 30,\n+            ),\n+            LineTextField(\n+              title: \"Name\",\n+              hintText: \"Ex: Jon Amit\",\n+              controller: txtName,\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            Row(\n+              children: [\n+                Expanded(\n+                  child: TextButton(\n+                    onPressed: () {\n+                      setState(() {\n+                        isMale = true;\n+                      });\n+                    },\n+                    child: Row(\n+                      mainAxisAlignment: MainAxisAlignment.start,\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Icon(\n+                          isMale\n+                              ? Icons.radio_button_checked\n+                              : Icons.radio_button_off,\n+                          color: TColor.primary,\n+                        ),\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            \"Male\",\n+                            style: TextStyle(\n+                                color: TColor.placeholder, fontSize: 14),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                ),\n+                Expanded(\n+                  child: TextButton(\n+                    onPressed: () {\n+                      setState(() {\n+                        isMale = false;\n+                      });\n+                    },\n+                    child: Row(\n+                      mainAxisAlignment: MainAxisAlignment.start,\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Icon(\n+                          !isMale\n+                              ? Icons.radio_button_checked\n+                              : Icons.radio_button_off,\n+                          color: TColor.primary,\n+                        ),\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            \"Female\",\n+                            style: TextStyle(\n+                                color: TColor.placeholder, fontSize: 14),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            const Divider(),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            LineTextField(\n+              title: \"Email\",\n+              hintText: \"Ex: 123@mail.com\",\n+              keyboardType: TextInputType.emailAddress,\n+              controller: txtEmail,\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            Text(\n+              \"Mobile Number\",\n+              style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+            ),\n+            Row(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                InkWell(\n+                  onTap: () async {\n+                    final code =\n+                        await countryCodePicker.showPicker(context: context);\n+                    if (code != null) {\n+                      countryCode = code;\n+                      setState(() {});\n+                    }\n+                  },\n+                  child: Row(\n+                    mainAxisSize: MainAxisSize.min,\n+                    children: [\n+                      SizedBox(\n+                        width: 30,\n+                        height: 20,\n+                        child: countryCode.flagImage(), // Call the function to get the widget\n+                      ),\n+                      Text(\n+                        \"  ${countryCode.dialCode}\",\n+                        style: TextStyle(\n+                            color: TColor.primaryText, fontSize: 16),\n+                      ),\n+                    ],\n+                  ),\n+                ),\n+                const SizedBox(\n+                  width: 15,\n+                ),\n+                Expanded(\n+                  child: TextField(\n+                    controller: txtMobile,\n+                    keyboardType: TextInputType.phone,\n+                    decoration: const InputDecoration(\n+                      contentPadding: EdgeInsets.zero,\n+                      focusedBorder: InputBorder.none,\n+                      enabledBorder: InputBorder.none,\n+                      hintText: \"9876543210\",\n+                    ),\n+                  ),\n+                ),\n+              ],\n+            ),\n+            const Divider(),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            LineDropDownButton(\n+                title: \"Zone\",\n+                hintText: \"Select Zone\",\n+                itemsArr: zoneList,\n+                selectVal: selectZone,\n+                didChanged: (newObj) {\n+                  setState(() {\n+                    selectZone = newObj;\n+                  });\n+                },\n+                displayKey: \"zone_name\"),\n+            const SizedBox(\n+              height: 15,\n+            ),\n+            Text(\n+              \"Service List\",\n+              style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontSize: 25,\n+                  fontWeight: FontWeight.w800),\n+            ),\n+            ListView.separated(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                physics: const NeverScrollableScrollPhysics(),\n+                shrinkWrap: true,\n+                itemBuilder: (context, index) {\n+                  var sObj = serviceList[index] as Map? ?? {};\n+\n+                  return Row(\n+                    children: [\n+                      const SizedBox(\n+                        width: 10,\n+                      ),\n+                      Expanded(\n+                        child: Text(\n+                          sObj[\"service_name\"] as String? ?? \"\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                          ),\n+                        ),\n+                      ),\n+                      CupertinoSwitch(\n+                          value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                          onChanged: (isTrue) {\n+                            if (isTrue) {\n+                              serviceOnIndex.add(sObj[\"service_id\"]);\n+                            } else {\n+                              serviceOnIndex.remove(sObj[\"service_id\"]);\n+                            }\n+\n+                            setState(() {});\n+                          })\n+                    ],\n+                  );\n+                },\n+                separatorBuilder: (context, index) => const SizedBox(\n+                      height: 8,\n+                    ),\n+                itemCount: serviceList.length),\n+            const SizedBox(\n+              height: 30,\n+            ),\n+            RoundButton(\n+              onPressed: btnUpdateAction,\n+              title: \"UPDATE\",\n+            ),\n+          ],\n+        ),\n+      ),\n+    ),\n+  );\n+}\n+\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          for (var zObj in zoneList) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          }\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"2\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 2;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+ \n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n+\n+\n+\n+/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"0912001638\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}*/\n"
                },
                {
                    "date": 1725360472501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,435 +366,40 @@\n     );\n   }\n \n   void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"2\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 2;\n+  Globs.showHUD();\n+  ServiceCall.post(\n+    parameter,\n+    SVKey.svProfileUpdate,\n+    isTokenApi: true,\n+    withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n \n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        Globs.udBoolSet(true, Globs.userLogin);\n \n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n- \n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {\n+          // Navigate to the home view page\n+          Navigator.pushReplacementNamed(context, '/home');\n+        });\n+\n+        if (mounted) {\n+          setState(() {});\n         }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    },\n+    failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    },\n+  );\n }\n \n-\n-\n-/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n }\n \n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n \n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}*/\n"
                },
                {
                    "date": 1725360524517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,800 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+  return Scaffold(\n+    appBar: AppBar(\n+      leading: IconButton(\n+        onPressed: () {\n+          Navigator.pop(context);\n+        },\n+        icon: Image.asset(\n+          \"assets/img/back.png\",\n+          width: 25,\n+          height: 25,\n+        ),\n+      ),\n+    ),\n+    body: SingleChildScrollView(\n+      child: Padding(\n+        padding: const EdgeInsets.symmetric(horizontal: 20),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            Text(\n+              \"Edit profile\",\n+              style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontSize: 25,\n+                  fontWeight: FontWeight.w800),\n+            ),\n+            const SizedBox(\n+              height: 30,\n+            ),\n+            LineTextField(\n+              title: \"Name\",\n+              hintText: \"Ex: Jon Amit\",\n+              controller: txtName,\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            Row(\n+              children: [\n+                Expanded(\n+                  child: TextButton(\n+                    onPressed: () {\n+                      setState(() {\n+                        isMale = true;\n+                      });\n+                    },\n+                    child: Row(\n+                      mainAxisAlignment: MainAxisAlignment.start,\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Icon(\n+                          isMale\n+                              ? Icons.radio_button_checked\n+                              : Icons.radio_button_off,\n+                          color: TColor.primary,\n+                        ),\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            \"Male\",\n+                            style: TextStyle(\n+                                color: TColor.placeholder, fontSize: 14),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                ),\n+                Expanded(\n+                  child: TextButton(\n+                    onPressed: () {\n+                      setState(() {\n+                        isMale = false;\n+                      });\n+                    },\n+                    child: Row(\n+                      mainAxisAlignment: MainAxisAlignment.start,\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Icon(\n+                          !isMale\n+                              ? Icons.radio_button_checked\n+                              : Icons.radio_button_off,\n+                          color: TColor.primary,\n+                        ),\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            \"Female\",\n+                            style: TextStyle(\n+                                color: TColor.placeholder, fontSize: 14),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            const Divider(),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            LineTextField(\n+              title: \"Email\",\n+              hintText: \"Ex: 123@mail.com\",\n+              keyboardType: TextInputType.emailAddress,\n+              controller: txtEmail,\n+            ),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            Text(\n+              \"Mobile Number\",\n+              style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+            ),\n+            Row(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                InkWell(\n+                  onTap: () async {\n+                    final code =\n+                        await countryCodePicker.showPicker(context: context);\n+                    if (code != null) {\n+                      countryCode = code;\n+                      setState(() {});\n+                    }\n+                  },\n+                  child: Row(\n+                    mainAxisSize: MainAxisSize.min,\n+                    children: [\n+                      SizedBox(\n+                        width: 30,\n+                        height: 20,\n+                        child: countryCode.flagImage(), // Call the function to get the widget\n+                      ),\n+                      Text(\n+                        \"  ${countryCode.dialCode}\",\n+                        style: TextStyle(\n+                            color: TColor.primaryText, fontSize: 16),\n+                      ),\n+                    ],\n+                  ),\n+                ),\n+                const SizedBox(\n+                  width: 15,\n+                ),\n+                Expanded(\n+                  child: TextField(\n+                    controller: txtMobile,\n+                    keyboardType: TextInputType.phone,\n+                    decoration: const InputDecoration(\n+                      contentPadding: EdgeInsets.zero,\n+                      focusedBorder: InputBorder.none,\n+                      enabledBorder: InputBorder.none,\n+                      hintText: \"9876543210\",\n+                    ),\n+                  ),\n+                ),\n+              ],\n+            ),\n+            const Divider(),\n+            const SizedBox(\n+              height: 8,\n+            ),\n+            LineDropDownButton(\n+                title: \"Zone\",\n+                hintText: \"Select Zone\",\n+                itemsArr: zoneList,\n+                selectVal: selectZone,\n+                didChanged: (newObj) {\n+                  setState(() {\n+                    selectZone = newObj;\n+                  });\n+                },\n+                displayKey: \"zone_name\"),\n+            const SizedBox(\n+              height: 15,\n+            ),\n+            Text(\n+              \"Service List\",\n+              style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontSize: 25,\n+                  fontWeight: FontWeight.w800),\n+            ),\n+            ListView.separated(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                physics: const NeverScrollableScrollPhysics(),\n+                shrinkWrap: true,\n+                itemBuilder: (context, index) {\n+                  var sObj = serviceList[index] as Map? ?? {};\n+\n+                  return Row(\n+                    children: [\n+                      const SizedBox(\n+                        width: 10,\n+                      ),\n+                      Expanded(\n+                        child: Text(\n+                          sObj[\"service_name\"] as String? ?? \"\",\n+                          style: TextStyle(\n+                            color: TColor.primaryText,\n+                            fontSize: 17,\n+                          ),\n+                        ),\n+                      ),\n+                      CupertinoSwitch(\n+                          value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                          onChanged: (isTrue) {\n+                            if (isTrue) {\n+                              serviceOnIndex.add(sObj[\"service_id\"]);\n+                            } else {\n+                              serviceOnIndex.remove(sObj[\"service_id\"]);\n+                            }\n+\n+                            setState(() {});\n+                          })\n+                    ],\n+                  );\n+                },\n+                separatorBuilder: (context, index) => const SizedBox(\n+                      height: 8,\n+                    ),\n+                itemCount: serviceList.length),\n+            const SizedBox(\n+              height: 30,\n+            ),\n+            RoundButton(\n+              onPressed: btnUpdateAction,\n+              title: \"UPDATE\",\n+            ),\n+          ],\n+        ),\n+      ),\n+    ),\n+  );\n+}\n+\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          for (var zObj in zoneList) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          }\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n+\n+\n+\n+/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"0912001638\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}*/\n"
                },
                {
                    "date": 1725471342948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,410 +49,8 @@\n     getServiceZoneList();\n   }\n \n   @override\n-Widget build(BuildContext context) {\n-  return Scaffold(\n-    appBar: AppBar(\n-      leading: IconButton(\n-        onPressed: () {\n-          Navigator.pop(context);\n-        },\n-        icon: Image.asset(\n-          \"assets/img/back.png\",\n-          width: 25,\n-          height: 25,\n-        ),\n-      ),\n-    ),\n-    body: SingleChildScrollView(\n-      child: Padding(\n-        padding: const EdgeInsets.symmetric(horizontal: 20),\n-        child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.start,\n-          children: [\n-            Text(\n-              \"Edit profile\",\n-              style: TextStyle(\n-                  color: TColor.primaryText,\n-                  fontSize: 25,\n-                  fontWeight: FontWeight.w800),\n-            ),\n-            const SizedBox(\n-              height: 30,\n-            ),\n-            LineTextField(\n-              title: \"Name\",\n-              hintText: \"Ex: Jon Amit\",\n-              controller: txtName,\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            Row(\n-              children: [\n-                Expanded(\n-                  child: TextButton(\n-                    onPressed: () {\n-                      setState(() {\n-                        isMale = true;\n-                      });\n-                    },\n-                    child: Row(\n-                      mainAxisAlignment: MainAxisAlignment.start,\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Icon(\n-                          isMale\n-                              ? Icons.radio_button_checked\n-                              : Icons.radio_button_off,\n-                          color: TColor.primary,\n-                        ),\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            \"Male\",\n-                            style: TextStyle(\n-                                color: TColor.placeholder, fontSize: 14),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                ),\n-                Expanded(\n-                  child: TextButton(\n-                    onPressed: () {\n-                      setState(() {\n-                        isMale = false;\n-                      });\n-                    },\n-                    child: Row(\n-                      mainAxisAlignment: MainAxisAlignment.start,\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Icon(\n-                          !isMale\n-                              ? Icons.radio_button_checked\n-                              : Icons.radio_button_off,\n-                          color: TColor.primary,\n-                        ),\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            \"Female\",\n-                            style: TextStyle(\n-                                color: TColor.placeholder, fontSize: 14),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            const Divider(),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            LineTextField(\n-              title: \"Email\",\n-              hintText: \"Ex: 123@mail.com\",\n-              keyboardType: TextInputType.emailAddress,\n-              controller: txtEmail,\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            Text(\n-              \"Mobile Number\",\n-              style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-            ),\n-            Row(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                InkWell(\n-                  onTap: () async {\n-                    final code =\n-                        await countryCodePicker.showPicker(context: context);\n-                    if (code != null) {\n-                      countryCode = code;\n-                      setState(() {});\n-                    }\n-                  },\n-                  child: Row(\n-                    mainAxisSize: MainAxisSize.min,\n-                    children: [\n-                      SizedBox(\n-                        width: 30,\n-                        height: 20,\n-                        child: countryCode.flagImage(), // Call the function to get the widget\n-                      ),\n-                      Text(\n-                        \"  ${countryCode.dialCode}\",\n-                        style: TextStyle(\n-                            color: TColor.primaryText, fontSize: 16),\n-                      ),\n-                    ],\n-                  ),\n-                ),\n-                const SizedBox(\n-                  width: 15,\n-                ),\n-                Expanded(\n-                  child: TextField(\n-                    controller: txtMobile,\n-                    keyboardType: TextInputType.phone,\n-                    decoration: const InputDecoration(\n-                      contentPadding: EdgeInsets.zero,\n-                      focusedBorder: InputBorder.none,\n-                      enabledBorder: InputBorder.none,\n-                      hintText: \"9876543210\",\n-                    ),\n-                  ),\n-                ),\n-              ],\n-            ),\n-            const Divider(),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            LineDropDownButton(\n-                title: \"Zone\",\n-                hintText: \"Select Zone\",\n-                itemsArr: zoneList,\n-                selectVal: selectZone,\n-                didChanged: (newObj) {\n-                  setState(() {\n-                    selectZone = newObj;\n-                  });\n-                },\n-                displayKey: \"zone_name\"),\n-            const SizedBox(\n-              height: 15,\n-            ),\n-            Text(\n-              \"Service List\",\n-              style: TextStyle(\n-                  color: TColor.primaryText,\n-                  fontSize: 25,\n-                  fontWeight: FontWeight.w800),\n-            ),\n-            ListView.separated(\n-                padding:\n-                    const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                physics: const NeverScrollableScrollPhysics(),\n-                shrinkWrap: true,\n-                itemBuilder: (context, index) {\n-                  var sObj = serviceList[index] as Map? ?? {};\n-\n-                  return Row(\n-                    children: [\n-                      const SizedBox(\n-                        width: 10,\n-                      ),\n-                      Expanded(\n-                        child: Text(\n-                          sObj[\"service_name\"] as String? ?? \"\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                          ),\n-                        ),\n-                      ),\n-                      CupertinoSwitch(\n-                          value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                          onChanged: (isTrue) {\n-                            if (isTrue) {\n-                              serviceOnIndex.add(sObj[\"service_id\"]);\n-                            } else {\n-                              serviceOnIndex.remove(sObj[\"service_id\"]);\n-                            }\n-\n-                            setState(() {});\n-                          })\n-                    ],\n-                  );\n-                },\n-                separatorBuilder: (context, index) => const SizedBox(\n-                      height: 8,\n-                    ),\n-                itemCount: serviceList.length),\n-            const SizedBox(\n-              height: 30,\n-            ),\n-            RoundButton(\n-              onPressed: btnUpdateAction,\n-              title: \"UPDATE\",\n-            ),\n-          ],\n-        ),\n-      ),\n-    ),\n-  );\n-}\n-\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          for (var zObj in zoneList) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          }\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n-\n-\n-\n-/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n         leading: IconButton(\n@@ -593,9 +191,9 @@\n                       children: [\n                         SizedBox(\n                           width: 30,\n                           height: 20,\n-                          child: countryCode.flagImage,\n+                          child: countryCode.flagImage(), // Call the function to get the widget\n                         ),\n                         Text(\n                           \"  ${countryCode.dialCode}\",\n                           style: TextStyle(\n@@ -614,9 +212,9 @@\n                       decoration: const InputDecoration(\n                         contentPadding: EdgeInsets.zero,\n                         focusedBorder: InputBorder.none,\n                         enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n+                        hintText: \"9876543210\",\n                       ),\n                     ),\n                   ),\n                 ],\n@@ -796,1210 +394,5 @@\n         mdShowAlert(\"Error\", err.toString(), () {});\n       },\n     );\n   }\n-}*/\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n }\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-  return Scaffold(\n-    appBar: AppBar(\n-      leading: IconButton(\n-        onPressed: () {\n-          Navigator.pop(context);\n-        },\n-        icon: Image.asset(\n-          \"assets/img/back.png\",\n-          width: 25,\n-          height: 25,\n-        ),\n-      ),\n-    ),\n-    body: SingleChildScrollView(\n-      child: Padding(\n-        padding: const EdgeInsets.symmetric(horizontal: 20),\n-        child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.start,\n-          children: [\n-            Text(\n-              \"Edit profile\",\n-              style: TextStyle(\n-                  color: TColor.primaryText,\n-                  fontSize: 25,\n-                  fontWeight: FontWeight.w800),\n-            ),\n-            const SizedBox(\n-              height: 30,\n-            ),\n-            LineTextField(\n-              title: \"Name\",\n-              hintText: \"Ex: Jon Amit\",\n-              controller: txtName,\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            Row(\n-              children: [\n-                Expanded(\n-                  child: TextButton(\n-                    onPressed: () {\n-                      setState(() {\n-                        isMale = true;\n-                      });\n-                    },\n-                    child: Row(\n-                      mainAxisAlignment: MainAxisAlignment.start,\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Icon(\n-                          isMale\n-                              ? Icons.radio_button_checked\n-                              : Icons.radio_button_off,\n-                          color: TColor.primary,\n-                        ),\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            \"Male\",\n-                            style: TextStyle(\n-                                color: TColor.placeholder, fontSize: 14),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                ),\n-                Expanded(\n-                  child: TextButton(\n-                    onPressed: () {\n-                      setState(() {\n-                        isMale = false;\n-                      });\n-                    },\n-                    child: Row(\n-                      mainAxisAlignment: MainAxisAlignment.start,\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Icon(\n-                          !isMale\n-                              ? Icons.radio_button_checked\n-                              : Icons.radio_button_off,\n-                          color: TColor.primary,\n-                        ),\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            \"Female\",\n-                            style: TextStyle(\n-                                color: TColor.placeholder, fontSize: 14),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            const Divider(),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            LineTextField(\n-              title: \"Email\",\n-              hintText: \"Ex: 123@mail.com\",\n-              keyboardType: TextInputType.emailAddress,\n-              controller: txtEmail,\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            Text(\n-              \"Mobile Number\",\n-              style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-            ),\n-            Row(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                InkWell(\n-                  onTap: () async {\n-                    final code =\n-                        await countryCodePicker.showPicker(context: context);\n-                    if (code != null) {\n-                      countryCode = code;\n-                      setState(() {});\n-                    }\n-                  },\n-                  child: Row(\n-                    mainAxisSize: MainAxisSize.min,\n-                    children: [\n-                      SizedBox(\n-                        width: 30,\n-                        height: 20,\n-                        child: countryCode.flagImage(), // Call the function to get the widget\n-                      ),\n-                      Text(\n-                        \"  ${countryCode.dialCode}\",\n-                        style: TextStyle(\n-                            color: TColor.primaryText, fontSize: 16),\n-                      ),\n-                    ],\n-                  ),\n-                ),\n-                const SizedBox(\n-                  width: 15,\n-                ),\n-                Expanded(\n-                  child: TextField(\n-                    controller: txtMobile,\n-                    keyboardType: TextInputType.phone,\n-                    decoration: const InputDecoration(\n-                      contentPadding: EdgeInsets.zero,\n-                      focusedBorder: InputBorder.none,\n-                      enabledBorder: InputBorder.none,\n-                      hintText: \"9876543210\",\n-                    ),\n-                  ),\n-                ),\n-              ],\n-            ),\n-            const Divider(),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            LineDropDownButton(\n-                title: \"Zone\",\n-                hintText: \"Select Zone\",\n-                itemsArr: zoneList,\n-                selectVal: selectZone,\n-                didChanged: (newObj) {\n-                  setState(() {\n-                    selectZone = newObj;\n-                  });\n-                },\n-                displayKey: \"zone_name\"),\n-            const SizedBox(\n-              height: 15,\n-            ),\n-            Text(\n-              \"Service List\",\n-              style: TextStyle(\n-                  color: TColor.primaryText,\n-                  fontSize: 25,\n-                  fontWeight: FontWeight.w800),\n-            ),\n-            ListView.separated(\n-                padding:\n-                    const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                physics: const NeverScrollableScrollPhysics(),\n-                shrinkWrap: true,\n-                itemBuilder: (context, index) {\n-                  var sObj = serviceList[index] as Map? ?? {};\n-\n-                  return Row(\n-                    children: [\n-                      const SizedBox(\n-                        width: 10,\n-                      ),\n-                      Expanded(\n-                        child: Text(\n-                          sObj[\"service_name\"] as String? ?? \"\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                          ),\n-                        ),\n-                      ),\n-                      CupertinoSwitch(\n-                          value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                          onChanged: (isTrue) {\n-                            if (isTrue) {\n-                              serviceOnIndex.add(sObj[\"service_id\"]);\n-                            } else {\n-                              serviceOnIndex.remove(sObj[\"service_id\"]);\n-                            }\n-\n-                            setState(() {});\n-                          })\n-                    ],\n-                  );\n-                },\n-                separatorBuilder: (context, index) => const SizedBox(\n-                      height: 8,\n-                    ),\n-                itemCount: serviceList.length),\n-            const SizedBox(\n-              height: 30,\n-            ),\n-            RoundButton(\n-              onPressed: btnUpdateAction,\n-              title: \"UPDATE\",\n-            ),\n-          ],\n-        ),\n-      ),\n-    ),\n-  );\n-}\n-\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          for (var zObj in zoneList) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          }\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-  Globs.showHUD();\n-  ServiceCall.post(\n-    parameter,\n-    SVKey.svProfileUpdate,\n-    isTokenApi: true,\n-    withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        Globs.udBoolSet(true, Globs.userLogin);\n-\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {\n-          // Navigate to the home view page\n-          Navigator.pushReplacementNamed(context, '/home');\n-        });\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    },\n-    failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err.toString(), () {});\n-    },\n-  );\n-}\n-\n-}\n-\n-\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-  return Scaffold(\n-    appBar: AppBar(\n-      leading: IconButton(\n-        onPressed: () {\n-          Navigator.pop(context);\n-        },\n-        icon: Image.asset(\n-          \"assets/img/back.png\",\n-          width: 25,\n-          height: 25,\n-        ),\n-      ),\n-    ),\n-    body: SingleChildScrollView(\n-      child: Padding(\n-        padding: const EdgeInsets.symmetric(horizontal: 20),\n-        child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.start,\n-          children: [\n-            Text(\n-              \"Edit profile\",\n-              style: TextStyle(\n-                  color: TColor.primaryText,\n-                  fontSize: 25,\n-                  fontWeight: FontWeight.w800),\n-            ),\n-            const SizedBox(\n-              height: 30,\n-            ),\n-            LineTextField(\n-              title: \"Name\",\n-              hintText: \"Ex: Jon Amit\",\n-              controller: txtName,\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            Row(\n-              children: [\n-                Expanded(\n-                  child: TextButton(\n-                    onPressed: () {\n-                      setState(() {\n-                        isMale = true;\n-                      });\n-                    },\n-                    child: Row(\n-                      mainAxisAlignment: MainAxisAlignment.start,\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Icon(\n-                          isMale\n-                              ? Icons.radio_button_checked\n-                              : Icons.radio_button_off,\n-                          color: TColor.primary,\n-                        ),\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            \"Male\",\n-                            style: TextStyle(\n-                                color: TColor.placeholder, fontSize: 14),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                ),\n-                Expanded(\n-                  child: TextButton(\n-                    onPressed: () {\n-                      setState(() {\n-                        isMale = false;\n-                      });\n-                    },\n-                    child: Row(\n-                      mainAxisAlignment: MainAxisAlignment.start,\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Icon(\n-                          !isMale\n-                              ? Icons.radio_button_checked\n-                              : Icons.radio_button_off,\n-                          color: TColor.primary,\n-                        ),\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            \"Female\",\n-                            style: TextStyle(\n-                                color: TColor.placeholder, fontSize: 14),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            const Divider(),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            LineTextField(\n-              title: \"Email\",\n-              hintText: \"Ex: 123@mail.com\",\n-              keyboardType: TextInputType.emailAddress,\n-              controller: txtEmail,\n-            ),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            Text(\n-              \"Mobile Number\",\n-              style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-            ),\n-            Row(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                InkWell(\n-                  onTap: () async {\n-                    final code =\n-                        await countryCodePicker.showPicker(context: context);\n-                    if (code != null) {\n-                      countryCode = code;\n-                      setState(() {});\n-                    }\n-                  },\n-                  child: Row(\n-                    mainAxisSize: MainAxisSize.min,\n-                    children: [\n-                      SizedBox(\n-                        width: 30,\n-                        height: 20,\n-                        child: countryCode.flagImage(), // Call the function to get the widget\n-                      ),\n-                      Text(\n-                        \"  ${countryCode.dialCode}\",\n-                        style: TextStyle(\n-                            color: TColor.primaryText, fontSize: 16),\n-                      ),\n-                    ],\n-                  ),\n-                ),\n-                const SizedBox(\n-                  width: 15,\n-                ),\n-                Expanded(\n-                  child: TextField(\n-                    controller: txtMobile,\n-                    keyboardType: TextInputType.phone,\n-                    decoration: const InputDecoration(\n-                      contentPadding: EdgeInsets.zero,\n-                      focusedBorder: InputBorder.none,\n-                      enabledBorder: InputBorder.none,\n-                      hintText: \"9876543210\",\n-                    ),\n-                  ),\n-                ),\n-              ],\n-            ),\n-            const Divider(),\n-            const SizedBox(\n-              height: 8,\n-            ),\n-            LineDropDownButton(\n-                title: \"Zone\",\n-                hintText: \"Select Zone\",\n-                itemsArr: zoneList,\n-                selectVal: selectZone,\n-                didChanged: (newObj) {\n-                  setState(() {\n-                    selectZone = newObj;\n-                  });\n-                },\n-                displayKey: \"zone_name\"),\n-            const SizedBox(\n-              height: 15,\n-            ),\n-            Text(\n-              \"Service List\",\n-              style: TextStyle(\n-                  color: TColor.primaryText,\n-                  fontSize: 25,\n-                  fontWeight: FontWeight.w800),\n-            ),\n-            ListView.separated(\n-                padding:\n-                    const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                physics: const NeverScrollableScrollPhysics(),\n-                shrinkWrap: true,\n-                itemBuilder: (context, index) {\n-                  var sObj = serviceList[index] as Map? ?? {};\n-\n-                  return Row(\n-                    children: [\n-                      const SizedBox(\n-                        width: 10,\n-                      ),\n-                      Expanded(\n-                        child: Text(\n-                          sObj[\"service_name\"] as String? ?? \"\",\n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 17,\n-                          ),\n-                        ),\n-                      ),\n-                      CupertinoSwitch(\n-                          value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                          onChanged: (isTrue) {\n-                            if (isTrue) {\n-                              serviceOnIndex.add(sObj[\"service_id\"]);\n-                            } else {\n-                              serviceOnIndex.remove(sObj[\"service_id\"]);\n-                            }\n-\n-                            setState(() {});\n-                          })\n-                    ],\n-                  );\n-                },\n-                separatorBuilder: (context, index) => const SizedBox(\n-                      height: 8,\n-                    ),\n-                itemCount: serviceList.length),\n-            const SizedBox(\n-              height: 30,\n-            ),\n-            RoundButton(\n-              onPressed: btnUpdateAction,\n-              title: \"UPDATE\",\n-            ),\n-          ],\n-        ),\n-      ),\n-    ),\n-  );\n-}\n-\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          for (var zObj in zoneList) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          }\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n-\n-\n-\n-/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}*/\n"
                },
                {
                    "date": 1725859601035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,398 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage(),\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"9876543210\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n"
                }
            ],
            "date": 1720937319949,
            "name": "Commit-0",
            "content": "import 'package:fl_country_code_picker/fl_country_code_picker.dart';\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/common_widget/drop_down_button.dart';\nimport 'package:taxi_driver/common_widget/line_text_field.dart';\nimport 'package:taxi_driver/common_widget/round_button.dart';\n\nclass DriverEditProfileView extends StatefulWidget {\n  const DriverEditProfileView({super.key});\n\n  @override\n  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n}\n\nclass _DriverEditProfileViewState extends State<DriverEditProfileView> {\n  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n  TextEditingController txtName = TextEditingController();\n  TextEditingController txtEmail = TextEditingController();\n  TextEditingController txtMobile = TextEditingController();\n  late CountryCode countryCode;\n\n  bool isMale = true;\n\n  List zoneList = [];\n  List serviceList = [];\n\n  Map? selectZone;\n\n  List<int> serviceOnIndex = [];\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n\n    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n\n    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n    \n    getServiceZoneList();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          onPressed: () {\n            context.pop();\n          },\n          icon: Image.asset(\n            \"assets/img/back.png\",\n            width: 25,\n            height: 25,\n          ),\n        ),\n      ),\n      body: SingleChildScrollView(\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 20),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: [\n              Text(\n                \"Edit profile\",\n                style: TextStyle(\n                    color: TColor.primaryText,\n                    fontSize: 25,\n                    fontWeight: FontWeight.w800),\n              ),\n              const SizedBox(\n                height: 30,\n              ),\n              LineTextField(\n                title: \"Name\",\n                hintText: \"Ex: Jon Amit\",\n                controller: txtName,\n              ),\n              const SizedBox(\n                height: 8,\n              ),\n              Row(\n                children: [\n                  Expanded(\n                    child: TextButton(\n                      onPressed: () {\n                        setState(() {\n                          isMale = true;\n                        });\n                      },\n                      child: Row(\n                         mainAxisAlignment: MainAxisAlignment.start,\n                        mainAxisSize: MainAxisSize.min,\n                        children: [\n                          Icon(\n                            isMale\n                                ? Icons.radio_button_checked\n                                : Icons.radio_button_off,\n                            color: TColor.primary,\n                          ),\n                          const SizedBox(\n                            width: 10,\n                          ),\n                          Expanded(\n                            child: Text(\n                              \"Male\",\n                              style: TextStyle(\n                                  color: TColor.placeholder, fontSize: 14),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  ),\n                  Expanded(\n                    child: TextButton(\n                      onPressed: () {\n                        setState(() {\n                          isMale = false;\n                        });\n                      },\n                      child: Row(\n                        mainAxisAlignment: MainAxisAlignment.start,\n                        mainAxisSize: MainAxisSize.min,\n                        children: [\n                          Icon(\n                            !isMale\n                                ? Icons.radio_button_checked\n                                : Icons.radio_button_off,\n                            color: TColor.primary,\n                          ),\n                          const SizedBox(\n                            width: 10,\n                          ),\n                          Expanded(\n                            child: Text(\n                              \"Female\",\n                              style: TextStyle(\n                                  color: TColor.placeholder, fontSize: 14),\n                            ),\n                          ),\n                        ],\n                      ),\n                    ),\n                  )\n                ],\n              ),\n              const SizedBox(\n                height: 8,\n              ),\n              const Divider(),\n              const SizedBox(\n                height: 8,\n              ),\n              LineTextField(\n                title: \"Email\",\n                hintText: \"Ex: 123@mail.com\",\n                keyboardType: TextInputType.emailAddress,\n                controller: txtEmail,\n              ),\n              const SizedBox(\n                height: 8,\n              ),\n              Text(\n                \"Mobile Number\",\n                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n              ),\n              Row(\n                mainAxisAlignment: MainAxisAlignment.start,\n                children: [\n                  InkWell(\n                    onTap: () async {\n                      final code =\n                          await countryCodePicker.showPicker(context: context);\n                      if (code != null) {\n                        countryCode = code;\n                        setState(() {});\n                      }\n                    },\n                    child: Row(\n                      mainAxisSize: MainAxisSize.min,\n                      children: [\n                        SizedBox(\n                          width: 30,\n                          height: 20,\n                          child: countryCode.flagImage,\n                        ),\n                        Text(\n                          \"  ${countryCode.dialCode}\",\n                          style: TextStyle(\n                              color: TColor.primaryText, fontSize: 16),\n                        ),\n                      ],\n                    ),\n                  ),\n                  const SizedBox(\n                    width: 15,\n                  ),\n                  Expanded(\n                    child: TextField(\n                      controller: txtMobile,\n                      keyboardType: TextInputType.phone,\n                      decoration: const InputDecoration(\n                        contentPadding: EdgeInsets.zero,\n                        focusedBorder: InputBorder.none,\n                        enabledBorder: InputBorder.none,\n                        hintText: \"9876543210\",\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              const Divider(),\n              const SizedBox(\n                height: 8,\n              ),\n              LineDropDownButton(\n                  title: \"Zone\",\n                  hintText: \"Select Zone\",\n                  itemsArr: zoneList,\n                  selectVal: selectZone,\n                  didChanged: (newObj) {\n                    setState(() {\n                      selectZone = newObj;\n                    });\n                  },\n                  displayKey: \"zone_name\"),\n              const SizedBox(\n                height: 15,\n              ),\n              Text(\n                \"Service List\",\n                style: TextStyle(\n                    color: TColor.primaryText,\n                    fontSize: 25,\n                    fontWeight: FontWeight.w800),\n              ),\n              ListView.separated(\n                  padding:\n                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n                  physics: const NeverScrollableScrollPhysics(),\n                  shrinkWrap: true,\n                  itemBuilder: (context, index) {\n                    var sObj = serviceList[index] as Map? ?? {};\n\n                    return Row(\n                      children: [\n                        const SizedBox(\n                          width: 10,\n                        ),\n                        Expanded(\n                          child: Text(\n                            sObj[\"service_name\"] as String? ?? \"\",\n                            style: TextStyle(\n                              color: TColor.primaryText,\n                              fontSize: 17,\n                            ),\n                          ),\n                        ),\n                        CupertinoSwitch(\n                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n                            onChanged: (isTrue) {\n                              if (isTrue) {\n                                serviceOnIndex.add(sObj[\"service_id\"]);\n                              } else {\n                                serviceOnIndex.remove(sObj[\"service_id\"]);\n                              }\n\n                              setState(() {});\n                            })\n                      ],\n                    );\n                  },\n                  separatorBuilder: (context, index) => const SizedBox(\n                        height: 8,\n                      ),\n                  itemCount: serviceList.length),\n              const SizedBox(\n                height: 30,\n              ),\n              RoundButton(\n                onPressed: btnUpdateAction,\n                title: \"UPDATE\",\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  //TODO: Button Action\n  void btnUpdateAction() {\n    if (txtName.text.isEmpty) {\n      mdShowAlert(\"Error\", \"Please enter name\", () {});\n      return;\n    }\n\n    if (!txtEmail.text.isEmail) {\n      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n      return;\n    }\n\n    if (txtMobile.text.isEmpty) {\n      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n      return;\n    }\n\n    if (selectZone == null) {\n      mdShowAlert(\"Error\", \"Please select zone\", () {});\n      return;\n    }\n\n    endEditing();\n\n    serviceUpdateProfile({\n      \"name\": txtName.text,\n      \"email\": txtEmail.text,\n      \"mobile\": txtMobile.text,\n      \"gender\": isMale ? \"m\" : \"f\",\n      \"mobile_code\": countryCode.dialCode,\n      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n      \"select_service_id\": serviceOnIndex.join(\",\"),\n    });\n  }\n\n  //ServiceCall\n  void getServiceZoneList() {\n    ServiceCall.post(\n      {},\n      SVKey.svServiceAndZoneList,\n      isTokenApi: true,\n      withSuccess: (responseObj) async {\n        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n\n          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n\n          zoneList.forEach((zObj) {\n            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n              selectZone = zObj;\n            }\n          });\n\n          if (mounted) {\n            setState(() {});\n          }\n        } else {\n          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n        }\n      },\n      failure: (err) async {\n        mdShowAlert(\"Error\", err.toString(), () {});\n      },\n    );\n  }\n\n  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n    Globs.showHUD();\n    ServiceCall.post(\n      parameter,\n      SVKey.svProfileUpdate,\n      isTokenApi: true,\n      withSuccess: (responseObj) async {\n        Globs.hideHUD();\n        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n\n          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n          Globs.udBoolSet(true, Globs.userLogin);\n\n          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n\n          if (mounted) {\n            setState(() {});\n          }\n        } else {\n          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n        }\n      },\n      failure: (err) async {\n         Globs.hideHUD();\n        mdShowAlert(\"Error\", err.toString(), () {});\n      },\n    );\n  }\n}\n"
        }
    ]
}