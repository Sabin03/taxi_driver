{
    "sourceFile": "lib/view/login/profile_image_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1720726636871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722774431590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+\n+import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/image_picker_view.dart';\n+import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n+import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  final bool  showBack;\n+  const ProfileImageView({super.key, this.showBack = true });\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  File? image;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.white,\n+        elevation: 1,\n+        leading: widget.showBack ? IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ) : null,\n+        centerTitle: true,\n+        title: Text(\n+          \"Profile Image\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 25,\n+              fontWeight: FontWeight.w800),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.center,\n+            children: [\n+              const SizedBox(\n+                height: 50,\n+              ),\n+             \n+        InkWell(\n+                onTap: () async {\n+                  await Navigator.push(\n+                    context,\n+                    PopupLayout(\n+                      child: ImagePickerView(\n+                        didSelect: (imagePath) {\n+                          image = File(imagePath);\n+                         serviceCall({\"image\": image!});\n+                          setState(() {});\n+                        },\n+                      ),\n+                    ),\n+                  );\n+                },\n+             \n+                child: Container(\n+                  width: 200,\n+                  height: 200,\n+                  decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(100),\n+                      boxShadow: const [\n+                        BoxShadow(color: Colors.black26, blurRadius: 10)\n+                      ]),\n+                  child: ClipRRect(\n+                    borderRadius: BorderRadius.circular(100),\n+                    child: image != null\n+                        ? Image.file(\n+                            image!,\n+                            width: 200,\n+                            height: 200,\n+                            fit: BoxFit.cover,\n+                          )\n+                        : Icon(\n+                            Icons.person,\n+                            size: 100,\n+                            color: TColor.secondaryText,\n+                          ),\n+                  ),\n+                  ),\n+                ),\n+\n+\n+              \n+              const SizedBox(\n+                height: 50,\n+              ),\n+\n+              RoundButton(\n+                onPressed: () {\n+\n+                   if (ServiceCall.userType == 2) {\n+                    context.push(const DriverEditProfileView());\n+                  } else {\n+                    context.push(const EditProfileView());\n+                  }\n+                },\n+                  \n+                \n+             \n+                title: \"NEXT\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+\n+  void serviceCall(Map<String, File> imagePara) {\n+    Globs.showHUD();\n+    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n+        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err, () {});\n+    });\n+  }\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723423131044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+\n+import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/image_picker_view.dart';\n+import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n+import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  final bool  showBack;\n+  const ProfileImageView({super.key, this.showBack = true });\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  File? image;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.white,\n+        elevation: 1,\n+        leading: widget.showBack ? IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ) : null,\n+        centerTitle: true,\n+        title: Text(\n+          \"Profile Image\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 25,\n+              fontWeight: FontWeight.w800),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.center,\n+            children: [\n+              const SizedBox(\n+                height: 50,\n+              ),\n+             \n+        InkWell(\n+                onTap: () async {\n+                  await Navigator.push(\n+                    context,\n+                    PopupLayout(\n+                      child: ImagePickerView(\n+                        didSelect: (imagePath) {\n+                          image = File(imagePath);\n+                         serviceCall({\"image\": image!});\n+                          setState(() {});\n+                        },\n+                      ),\n+                    ),\n+                  );\n+                },\n+             \n+                child: Container(\n+                  width: 200,\n+                  height: 200,\n+                  decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(100),\n+                      boxShadow: const [\n+                        BoxShadow(color: Colors.black26, blurRadius: 10)\n+                      ]),\n+                  child: ClipRRect(\n+                    borderRadius: BorderRadius.circular(100),\n+                    child: image != null\n+                        ? Image.file(\n+                            image!,\n+                            width: 200,\n+                            height: 200,\n+                            fit: BoxFit.cover,\n+                          )\n+                        : Icon(\n+                            Icons.person,\n+                            size: 100,\n+                            color: TColor.secondaryText,\n+                          ),\n+                  ),\n+                  ),\n+                ),\n+\n+\n+              \n+              const SizedBox(\n+                height: 50,\n+              ),\n+\n+              RoundButton(\n+                onPressed: () {\n+\n+                   if (ServiceCall.userType == 2) {\n+                    context.push(const DriverEditProfileView());\n+                  } else {\n+                    context.push(const EditProfileView());\n+                  }\n+                },\n+                  \n+                \n+             \n+                title: \"NEXT\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+\n+  void serviceCall(Map<String, File> imagePara) {\n+    Globs.showHUD();\n+    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n+        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err, () {});\n+    });\n+  }\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724058572643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-\n import 'dart:io';\n \n import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n@@ -56,8 +55,148 @@\n             children: [\n               const SizedBox(\n                 height: 50,\n               ),\n+              InkWell(\n+                onTap: () async {\n+                  await Navigator.push(\n+                    context,\n+                    PopupLayout(\n+                      child: ImagePickerView(\n+                        didSelect: (imagePath) {\n+                          image = File(imagePath);\n+                          serviceCall({\"image\": image!});\n+                          setState(() {});\n+                        },\n+                      ),\n+                    ),\n+                  );\n+                },\n+                child: Container(\n+                  width: 200,\n+                  height: 200,\n+                  decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(100),\n+                      boxShadow: const [\n+                        BoxShadow(color: Colors.black26, blurRadius: 10)\n+                      ]),\n+                  child: ClipRRect(\n+                    borderRadius: BorderRadius.circular(100),\n+                    child: image != null\n+                        ? Image.file(\n+                            image!,\n+                            width: 200,\n+                            height: 200,\n+                            fit: BoxFit.cover,\n+                          )\n+                        : Icon(\n+                            Icons.person,\n+                            size: 100,\n+                            color: TColor.secondaryText,\n+                          ),\n+                  ),\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 50,\n+              ),\n+              RoundButton(\n+                onPressed: () {\n+                  if (ServiceCall.userType == 2) {\n+                    context.push(const DriverEditProfileView());\n+                  } else {\n+                    context.push(const EditProfileView());\n+                  }\n+                },\n+                title: \"NEXT\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  void serviceCall(Map<String, File> imagePara) {\n+    Globs.showHUD();\n+    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n+        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err, () {});\n+    });\n+  }\n+}\n+\n+\n+\n+/*import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/image_picker_view.dart';\n+import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n+import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  final bool  showBack;\n+  const ProfileImageView({super.key, this.showBack = true });\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  File? image;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.white,\n+        elevation: 1,\n+        leading: widget.showBack ? IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ) : null,\n+        centerTitle: true,\n+        title: Text(\n+          \"Profile Image\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 25,\n+              fontWeight: FontWeight.w800),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.center,\n+            children: [\n+              const SizedBox(\n+                height: 50,\n+              ),\n              \n         InkWell(\n                 onTap: () async {\n                   await Navigator.push(\n@@ -146,5 +285,5 @@\n       mdShowAlert(\"Error\", err, () {});\n     });\n   }\n \n-}\n\\ No newline at end of file\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724064582240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,682 @@\n+import 'dart:io';\n+\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/image_picker_view.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n+import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  final bool  showBack;\n+  const ProfileImageView({super.key, this.showBack = true });\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  File? image;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.white,\n+        elevation: 1,\n+        leading: widget.showBack ? IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ) : null,\n+        centerTitle: true,\n+        title: Text(\n+          \"Profile Image\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 25,\n+              fontWeight: FontWeight.w800),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.center,\n+            children: [\n+              const SizedBox(\n+                height: 50,\n+              ),\n+              InkWell(\n+                onTap: () async {\n+                  await Navigator.push(\n+                    context,\n+                    PopupLayout(\n+                      child: ImagePickerView(\n+                        didSelect: (imagePath) {\n+                          image = File(imagePath);\n+                          serviceCall({\"image\": image!});\n+                          setState(() {});\n+                        },\n+                      ),\n+                    ),\n+                  );\n+                },\n+                child: Container(\n+                  width: 200,\n+                  height: 200,\n+                  decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(100),\n+                      boxShadow: const [\n+                        BoxShadow(color: Colors.black26, blurRadius: 10)\n+                      ]),\n+                  child: ClipRRect(\n+                    borderRadius: BorderRadius.circular(100),\n+                    child: image != null\n+                        ? Image.file(\n+                            image!,\n+                            width: 200,\n+                            height: 200,\n+                            fit: BoxFit.cover,\n+                          )\n+                        : Icon(\n+                            Icons.person,\n+                            size: 100,\n+                            color: TColor.secondaryText,\n+                          ),\n+                  ),\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 50,\n+              ),\n+              RoundButton(\n+                onPressed: () {\n+                  if (ServiceCall.userType == 2) {\n+                    context.push(const DriverEditProfileView());\n+                  } else {\n+                    context.push(const EditProfileView());\n+                  }\n+                },\n+                title: \"NEXT\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  void serviceCall(Map<String, File> imagePara) {\n+    Globs.showHUD();\n+    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n+        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err, () {});\n+    });\n+  }\n+}\n+\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"9876543210\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n+\n+\n+\n+/*import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/image_picker_view.dart';\n+import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n+import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  final bool  showBack;\n+  const ProfileImageView({super.key, this.showBack = true });\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  File? image;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.white,\n+        elevation: 1,\n+        leading: widget.showBack ? IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ) : null,\n+        centerTitle: true,\n+        title: Text(\n+          \"Profile Image\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 25,\n+              fontWeight: FontWeight.w800),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.center,\n+            children: [\n+              const SizedBox(\n+                height: 50,\n+              ),\n+             \n+        InkWell(\n+                onTap: () async {\n+                  await Navigator.push(\n+                    context,\n+                    PopupLayout(\n+                      child: ImagePickerView(\n+                        didSelect: (imagePath) {\n+                          image = File(imagePath);\n+                         serviceCall({\"image\": image!});\n+                          setState(() {});\n+                        },\n+                      ),\n+                    ),\n+                  );\n+                },\n+             \n+                child: Container(\n+                  width: 200,\n+                  height: 200,\n+                  decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(100),\n+                      boxShadow: const [\n+                        BoxShadow(color: Colors.black26, blurRadius: 10)\n+                      ]),\n+                  child: ClipRRect(\n+                    borderRadius: BorderRadius.circular(100),\n+                    child: image != null\n+                        ? Image.file(\n+                            image!,\n+                            width: 200,\n+                            height: 200,\n+                            fit: BoxFit.cover,\n+                          )\n+                        : Icon(\n+                            Icons.person,\n+                            size: 100,\n+                            color: TColor.secondaryText,\n+                          ),\n+                  ),\n+                  ),\n+                ),\n+\n+\n+              \n+              const SizedBox(\n+                height: 50,\n+              ),\n+\n+              RoundButton(\n+                onPressed: () {\n+\n+                   if (ServiceCall.userType == 2) {\n+                    context.push(const DriverEditProfileView());\n+                  } else {\n+                    context.push(const EditProfileView());\n+                  }\n+                },\n+                  \n+                \n+             \n+                title: \"NEXT\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+\n+  void serviceCall(Map<String, File> imagePara) {\n+    Globs.showHUD();\n+    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n+        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err, () {});\n+    });\n+  }\n+\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724067040096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,12 @@\n import 'dart:io';\n \n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n import 'package:taxi_driver/common_widget/popup_layout.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n@@ -140,398 +136,9 @@\n   }\n }\n \n \n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n \n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"9876543210\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n-\n-\n-\n /*import 'dart:io';\n \n import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n"
                },
                {
                    "date": 1724665603548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,289 +1,799 @@\n-import 'dart:io';\n-\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n-import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n \n-class ProfileImageView extends StatefulWidget {\n-  final bool  showBack;\n-  const ProfileImageView({super.key, this.showBack = true });\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n \n   @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n }\n \n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  File? image;\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n \n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n   @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n-        backgroundColor: Colors.white,\n-        elevation: 1,\n-        leading: widget.showBack ? IconButton(\n+        leading: IconButton(\n           onPressed: () {\n             context.pop();\n           },\n           icon: Image.asset(\n             \"assets/img/back.png\",\n             width: 25,\n             height: 25,\n           ),\n-        ) : null,\n-        centerTitle: true,\n-        title: Text(\n-          \"Profile Image\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 25,\n-              fontWeight: FontWeight.w800),\n         ),\n       ),\n       body: SingleChildScrollView(\n         child: Padding(\n           padding: const EdgeInsets.symmetric(horizontal: 20),\n           child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.center,\n+            crossAxisAlignment: CrossAxisAlignment.start,\n             children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n               const SizedBox(\n-                height: 50,\n+                height: 30,\n               ),\n-              InkWell(\n-                onTap: () async {\n-                  await Navigator.push(\n-                    context,\n-                    PopupLayout(\n-                      child: ImagePickerView(\n-                        didSelect: (imagePath) {\n-                          image = File(imagePath);\n-                          serviceCall({\"image\": image!});\n-                          setState(() {});\n-                        },\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n                       ),\n                     ),\n-                  );\n-                },\n-                child: Container(\n-                  width: 200,\n-                  height: 200,\n-                  decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(100),\n-                      boxShadow: const [\n-                        BoxShadow(color: Colors.black26, blurRadius: 10)\n-                      ]),\n-                  child: ClipRRect(\n-                    borderRadius: BorderRadius.circular(100),\n-                    child: image != null\n-                        ? Image.file(\n-                            image!,\n-                            width: 200,\n-                            height: 200,\n-                            fit: BoxFit.cover,\n-                          )\n-                        : Icon(\n-                            Icons.person,\n-                            size: 100,\n-                            color: TColor.secondaryText,\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n                           ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n                   ),\n-                ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"9876543210\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n               ),\n+              const Divider(),\n               const SizedBox(\n-                height: 50,\n+                height: 8,\n               ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n\\ No newline at end of file\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n               RoundButton(\n-                onPressed: () {\n-                  if (ServiceCall.userType == 2) {\n-                    context.push(const DriverEditProfileView());\n-                  } else {\n-                    context.push(const EditProfileView());\n-                  }\n-                },\n-                title: \"NEXT\",\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n               ),\n             ],\n           ),\n         ),\n       ),\n     );\n   }\n \n-  void serviceCall(Map<String, File> imagePara) {\n-    Globs.showHUD();\n-    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n-        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err, () {});\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n     });\n   }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n }\n \n \n \n-/*import 'dart:io';\n-\n+/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n-import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n \n-class ProfileImageView extends StatefulWidget {\n-  final bool  showBack;\n-  const ProfileImageView({super.key, this.showBack = true });\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n \n   @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n }\n \n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  File? image;\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n \n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n   @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n-        backgroundColor: Colors.white,\n-        elevation: 1,\n-        leading: widget.showBack ? IconButton(\n+        leading: IconButton(\n           onPressed: () {\n             context.pop();\n           },\n           icon: Image.asset(\n             \"assets/img/back.png\",\n             width: 25,\n             height: 25,\n           ),\n-        ) : null,\n-        centerTitle: true,\n-        title: Text(\n-          \"Profile Image\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 25,\n-              fontWeight: FontWeight.w800),\n         ),\n       ),\n       body: SingleChildScrollView(\n         child: Padding(\n           padding: const EdgeInsets.symmetric(horizontal: 20),\n           child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.center,\n+            crossAxisAlignment: CrossAxisAlignment.start,\n             children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n               const SizedBox(\n-                height: 50,\n+                height: 30,\n               ),\n-             \n-        InkWell(\n-                onTap: () async {\n-                  await Navigator.push(\n-                    context,\n-                    PopupLayout(\n-                      child: ImagePickerView(\n-                        didSelect: (imagePath) {\n-                          image = File(imagePath);\n-                         serviceCall({\"image\": image!});\n-                          setState(() {});\n-                        },\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n                       ),\n                     ),\n-                  );\n-                },\n-             \n-                child: Container(\n-                  width: 200,\n-                  height: 200,\n-                  decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(100),\n-                      boxShadow: const [\n-                        BoxShadow(color: Colors.black26, blurRadius: 10)\n-                      ]),\n-                  child: ClipRRect(\n-                    borderRadius: BorderRadius.circular(100),\n-                    child: image != null\n-                        ? Image.file(\n-                            image!,\n-                            width: 200,\n-                            height: 200,\n-                            fit: BoxFit.cover,\n-                          )\n-                        : Icon(\n-                            Icons.person,\n-                            size: 100,\n-                            color: TColor.secondaryText,\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n                           ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n                   ),\n+                  const SizedBox(\n+                    width: 15,\n                   ),\n-                ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"0912001638\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n \n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n \n-              \n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n               const SizedBox(\n-                height: 50,\n+                height: 30,\n               ),\n-\n               RoundButton(\n-                onPressed: () {\n-\n-                   if (ServiceCall.userType == 2) {\n-                    context.push(const DriverEditProfileView());\n-                  } else {\n-                    context.push(const EditProfileView());\n-                  }\n-                },\n-                  \n-                \n-             \n-                title: \"NEXT\",\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n               ),\n             ],\n           ),\n         ),\n       ),\n     );\n   }\n \n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n \n-  void serviceCall(Map<String, File> imagePara) {\n-    Globs.showHUD();\n-    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n-        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err, () {});\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n     });\n   }\n \n-}*/\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}*/\n"
                },
                {
                    "date": 1724665788818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1091 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  const ProfileImageView({super.key});\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"9876543210\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n+\n+\n+\n+/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class DriverEditProfileView extends StatefulWidget {\n+  const DriverEditProfileView({super.key});\n+\n+  @override\n+  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n+}\n+\n+class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n+\n+  bool isMale = true;\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage,\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"0912001638\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}*/\n+\n+\n+\n+/*import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/image_picker_view.dart';\n+import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n+import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  final bool  showBack;\n+  const ProfileImageView({super.key, this.showBack = true });\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  File? image;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.white,\n+        elevation: 1,\n+        leading: widget.showBack ? IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ) : null,\n+        centerTitle: true,\n+        title: Text(\n+          \"Profile Image\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 25,\n+              fontWeight: FontWeight.w800),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.center,\n+            children: [\n+              const SizedBox(\n+                height: 50,\n+              ),\n+              InkWell(\n+                onTap: () async {\n+                  await Navigator.push(\n+                    context,\n+                    PopupLayout(\n+                      child: ImagePickerView(\n+                        didSelect: (imagePath) {\n+                          image = File(imagePath);\n+                          serviceCall({\"image\": image!});\n+                          setState(() {});\n+                        },\n+                      ),\n+                    ),\n+                  );\n+                },\n+                child: Container(\n+                  width: 200,\n+                  height: 200,\n+                  decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(100),\n+                      boxShadow: const [\n+                        BoxShadow(color: Colors.black26, blurRadius: 10)\n+                      ]),\n+                  child: ClipRRect(\n+                    borderRadius: BorderRadius.circular(100),\n+                    child: image != null\n+                        ? Image.file(\n+                            image!,\n+                            width: 200,\n+                            height: 200,\n+                            fit: BoxFit.cover,\n+                          )\n+                        : Icon(\n+                            Icons.person,\n+                            size: 100,\n+                            color: TColor.secondaryText,\n+                          ),\n+                  ),\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 50,\n+              ),\n+              RoundButton(\n+                onPressed: () {\n+                  if (ServiceCall.userType == 2) {\n+                    context.push(const DriverEditProfileView());\n+                  } else {\n+                    context.push(const EditProfileView());\n+                  }\n+                },\n+                title: \"NEXT\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  void serviceCall(Map<String, File> imagePara) {\n+    Globs.showHUD();\n+    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n+        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err, () {});\n+    });\n+  }\n+}*/\n+\n+\n+\n+/*import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/image_picker_view.dart';\n+import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n+import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  final bool  showBack;\n+  const ProfileImageView({super.key, this.showBack = true });\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  File? image;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.white,\n+        elevation: 1,\n+        leading: widget.showBack ? IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ) : null,\n+        centerTitle: true,\n+        title: Text(\n+          \"Profile Image\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 25,\n+              fontWeight: FontWeight.w800),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.center,\n+            children: [\n+              const SizedBox(\n+                height: 50,\n+              ),\n+             \n+        InkWell(\n+                onTap: () async {\n+                  await Navigator.push(\n+                    context,\n+                    PopupLayout(\n+                      child: ImagePickerView(\n+                        didSelect: (imagePath) {\n+                          image = File(imagePath);\n+                         serviceCall({\"image\": image!});\n+                          setState(() {});\n+                        },\n+                      ),\n+                    ),\n+                  );\n+                },\n+             \n+                child: Container(\n+                  width: 200,\n+                  height: 200,\n+                  decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(100),\n+                      boxShadow: const [\n+                        BoxShadow(color: Colors.black26, blurRadius: 10)\n+                      ]),\n+                  child: ClipRRect(\n+                    borderRadius: BorderRadius.circular(100),\n+                    child: image != null\n+                        ? Image.file(\n+                            image!,\n+                            width: 200,\n+                            height: 200,\n+                            fit: BoxFit.cover,\n+                          )\n+                        : Icon(\n+                            Icons.person,\n+                            size: 100,\n+                            color: TColor.secondaryText,\n+                          ),\n+                  ),\n+                  ),\n+                ),\n+\n+\n+              \n+              const SizedBox(\n+                height: 50,\n+              ),\n+\n+              RoundButton(\n+                onPressed: () {\n+\n+                   if (ServiceCall.userType == 2) {\n+                    context.push(const DriverEditProfileView());\n+                  } else {\n+                    context.push(const EditProfileView());\n+                  }\n+                },\n+                  \n+                \n+             \n+                title: \"NEXT\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+\n+  void serviceCall(Map<String, File> imagePara) {\n+    Globs.showHUD();\n+    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n+        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err, () {});\n+    });\n+  }\n+\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724666087702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1894 +1,4 @@\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class ProfileImageView extends StatefulWidget {\n-  const ProfileImageView({super.key});\n-\n-  @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n-}\n-\n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"9876543210\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n-\n-\n-\n-/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}*/\n-\n-\n-\n-/*import 'dart:io';\n-\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/popup_layout.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n-import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n-\n-class ProfileImageView extends StatefulWidget {\n-  final bool  showBack;\n-  const ProfileImageView({super.key, this.showBack = true });\n-\n-  @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n-}\n-\n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  File? image;\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.white,\n-        elevation: 1,\n-        leading: widget.showBack ? IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ) : null,\n-        centerTitle: true,\n-        title: Text(\n-          \"Profile Image\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 25,\n-              fontWeight: FontWeight.w800),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.center,\n-            children: [\n-              const SizedBox(\n-                height: 50,\n-              ),\n-              InkWell(\n-                onTap: () async {\n-                  await Navigator.push(\n-                    context,\n-                    PopupLayout(\n-                      child: ImagePickerView(\n-                        didSelect: (imagePath) {\n-                          image = File(imagePath);\n-                          serviceCall({\"image\": image!});\n-                          setState(() {});\n-                        },\n-                      ),\n-                    ),\n-                  );\n-                },\n-                child: Container(\n-                  width: 200,\n-                  height: 200,\n-                  decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(100),\n-                      boxShadow: const [\n-                        BoxShadow(color: Colors.black26, blurRadius: 10)\n-                      ]),\n-                  child: ClipRRect(\n-                    borderRadius: BorderRadius.circular(100),\n-                    child: image != null\n-                        ? Image.file(\n-                            image!,\n-                            width: 200,\n-                            height: 200,\n-                            fit: BoxFit.cover,\n-                          )\n-                        : Icon(\n-                            Icons.person,\n-                            size: 100,\n-                            color: TColor.secondaryText,\n-                          ),\n-                  ),\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 50,\n-              ),\n-              RoundButton(\n-                onPressed: () {\n-                  if (ServiceCall.userType == 2) {\n-                    context.push(const DriverEditProfileView());\n-                  } else {\n-                    context.push(const EditProfileView());\n-                  }\n-                },\n-                title: \"NEXT\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  void serviceCall(Map<String, File> imagePara) {\n-    Globs.showHUD();\n-    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n-        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err, () {});\n-    });\n-  }\n-}*/\n-\n-\n-\n-/*import 'dart:io';\n-\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/popup_layout.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n-import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n-\n-class ProfileImageView extends StatefulWidget {\n-  final bool  showBack;\n-  const ProfileImageView({super.key, this.showBack = true });\n-\n-  @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n-}\n-\n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  File? image;\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.white,\n-        elevation: 1,\n-        leading: widget.showBack ? IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ) : null,\n-        centerTitle: true,\n-        title: Text(\n-          \"Profile Image\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 25,\n-              fontWeight: FontWeight.w800),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.center,\n-            children: [\n-              const SizedBox(\n-                height: 50,\n-              ),\n-             \n-        InkWell(\n-                onTap: () async {\n-                  await Navigator.push(\n-                    context,\n-                    PopupLayout(\n-                      child: ImagePickerView(\n-                        didSelect: (imagePath) {\n-                          image = File(imagePath);\n-                         serviceCall({\"image\": image!});\n-                          setState(() {});\n-                        },\n-                      ),\n-                    ),\n-                  );\n-                },\n-             \n-                child: Container(\n-                  width: 200,\n-                  height: 200,\n-                  decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(100),\n-                      boxShadow: const [\n-                        BoxShadow(color: Colors.black26, blurRadius: 10)\n-                      ]),\n-                  child: ClipRRect(\n-                    borderRadius: BorderRadius.circular(100),\n-                    child: image != null\n-                        ? Image.file(\n-                            image!,\n-                            width: 200,\n-                            height: 200,\n-                            fit: BoxFit.cover,\n-                          )\n-                        : Icon(\n-                            Icons.person,\n-                            size: 100,\n-                            color: TColor.secondaryText,\n-                          ),\n-                  ),\n-                  ),\n-                ),\n-\n-\n-              \n-              const SizedBox(\n-                height: 50,\n-              ),\n-\n-              RoundButton(\n-                onPressed: () {\n-\n-                   if (ServiceCall.userType == 2) {\n-                    context.push(const DriverEditProfileView());\n-                  } else {\n-                    context.push(const EditProfileView());\n-                  }\n-                },\n-                  \n-                \n-             \n-                title: \"NEXT\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-\n-  void serviceCall(Map<String, File> imagePara) {\n-    Globs.showHUD();\n-    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n-        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err, () {});\n-    });\n-  }\n-\n-}*/\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"9876543210\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n-\n-\n-\n-/*import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class DriverEditProfileView extends StatefulWidget {\n-  const DriverEditProfileView({super.key});\n-\n-  @override\n-  State<DriverEditProfileView> createState() => _DriverEditProfileViewState();\n-}\n-\n-class _DriverEditProfileViewState extends State<DriverEditProfileView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage,\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"0912001638\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}*/\n import 'dart:io';\n \n import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n@@ -2175,294 +285,5 @@\n       mdShowAlert(\"Error\", err, () {});\n     });\n   }\n \n-}*/\n-\n-import 'dart:io';\n-\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/popup_layout.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n-import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n-\n-class ProfileImageView extends StatefulWidget {\n-  final bool  showBack;\n-  const ProfileImageView({super.key, this.showBack = true });\n-\n-  @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n-}\n-\n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  File? image;\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.white,\n-        elevation: 1,\n-        leading: widget.showBack ? IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ) : null,\n-        centerTitle: true,\n-        title: Text(\n-          \"Profile Image\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 25,\n-              fontWeight: FontWeight.w800),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.center,\n-            children: [\n-              const SizedBox(\n-                height: 50,\n-              ),\n-             \n-        InkWell(\n-                onTap: () async {\n-                  await Navigator.push(\n-                    context,\n-                    PopupLayout(\n-                      child: ImagePickerView(\n-                        didSelect: (imagePath) {\n-                          image = File(imagePath);\n-                         serviceCall({\"image\": image!});\n-                          setState(() {});\n-                        },\n-                      ),\n-                    ),\n-                  );\n-                },\n-             \n-                child: Container(\n-                  width: 200,\n-                  height: 200,\n-                  decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(100),\n-                      boxShadow: const [\n-                        BoxShadow(color: Colors.black26, blurRadius: 10)\n-                      ]),\n-                  child: ClipRRect(\n-                    borderRadius: BorderRadius.circular(100),\n-                    child: image != null\n-                        ? Image.file(\n-                            image!,\n-                            width: 200,\n-                            height: 200,\n-                            fit: BoxFit.cover,\n-                          )\n-                        : Icon(\n-                            Icons.person,\n-                            size: 100,\n-                            color: TColor.secondaryText,\n-                          ),\n-                  ),\n-                  ),\n-                ),\n-\n-\n-              \n-              const SizedBox(\n-                height: 50,\n-              ),\n-\n-              RoundButton(\n-                onPressed: () {\n-\n-                   if (ServiceCall.userType == 2) {\n-                    context.push(const DriverEditProfileView());\n-                  } else {\n-                    context.push(const EditProfileView());\n-                  }\n-                },\n-                  \n-                \n-             \n-                title: \"NEXT\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-\n-  void serviceCall(Map<String, File> imagePara) {\n-    Globs.showHUD();\n-    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n-        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err, () {});\n-    });\n-  }\n-\n-}\n-\n-import 'dart:io';\n-\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/popup_layout.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class ProfileImageView extends StatefulWidget {\n-  final bool  showBack;\n-  const ProfileImageView({super.key, this.showBack = true });\n-\n-  @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n-}\n-\n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  File? image;\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.white,\n-        elevation: 1,\n-        leading: widget.showBack ? IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ) : null,\n-        centerTitle: true,\n-        title: Text(\n-          \"Profile Image\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 25,\n-              fontWeight: FontWeight.w800),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.center,\n-            children: [\n-              const SizedBox(\n-                height: 50,\n-              ),\n-             \n-        InkWell(\n-                onTap: () async {\n-                  await Navigator.push(\n-                    context,\n-                    PopupLayout(\n-                      child: ImagePickerView(\n-                        didSelect: (imagePath) {\n-                          image = File(imagePath);\n-                         serviceCall({\"image\": image!});\n-                          setState(() {});\n-                        },\n-                      ),\n-                    ),\n-                  );\n-                },\n-             \n-                child: Container(\n-                  width: 200,\n-                  height: 200,\n-                  decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(100),\n-                      boxShadow: const [\n-                        BoxShadow(color: Colors.black26, blurRadius: 10)\n-                      ]),\n-                  child: ClipRRect(\n-                    borderRadius: BorderRadius.circular(100),\n-                    child: image != null\n-                        ? Image.file(\n-                            image!,\n-                            width: 200,\n-                            height: 200,\n-                            fit: BoxFit.cover,\n-                          )\n-                        : Icon(\n-                            Icons.person,\n-                            size: 100,\n-                            color: TColor.secondaryText,\n-                          ),\n-                  ),\n-                  ),\n-                ),\n-\n-\n-              \n-              const SizedBox(\n-                height: 50,\n-              ),\n-\n-              RoundButton(\n-                onPressed: () {},\n-             \n-                title: \"NEXT\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-\n-  void serviceCall(Map<String, File> imagePara) {\n-    Globs.showHUD();\n-    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n-        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err, () {});\n-    });\n-  }\n-\n-}\n\\ No newline at end of file\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725471750814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/image_picker_view.dart';\n+import 'package:taxi_driver/common_widget/popup_layout.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n+import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n+\n+class ProfileImageView extends StatefulWidget {\n+  final bool  showBack;\n+  const ProfileImageView({super.key, this.showBack = true });\n+\n+  @override\n+  State<ProfileImageView> createState() => _ProfileImageViewState();\n+}\n+\n+class _ProfileImageViewState extends State<ProfileImageView> {\n+  File? image;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.white,\n+        elevation: 1,\n+        leading: widget.showBack ? IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ) : null,\n+        centerTitle: true,\n+        title: Text(\n+          \"Profile Image\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 25,\n+              fontWeight: FontWeight.w800),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.center,\n+            children: [\n+              const SizedBox(\n+                height: 50,\n+              ),\n+              InkWell(\n+                onTap: () async {\n+                  await Navigator.push(\n+                    context,\n+                    PopupLayout(\n+                      child: ImagePickerView(\n+                        didSelect: (imagePath) {\n+                          image = File(imagePath);\n+                          serviceCall({\"image\": image!});\n+                          setState(() {});\n+                        },\n+                      ),\n+                    ),\n+                  );\n+                },\n+                child: Container(\n+                  width: 200,\n+                  height: 200,\n+                  decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(100),\n+                      boxShadow: const [\n+                        BoxShadow(color: Colors.black26, blurRadius: 10)\n+                      ]),\n+                  child: ClipRRect(\n+                    borderRadius: BorderRadius.circular(100),\n+                    child: image != null\n+                        ? Image.file(\n+                            image!,\n+                            width: 200,\n+                            height: 200,\n+                            fit: BoxFit.cover,\n+                          )\n+                        : Icon(\n+                            Icons.person,\n+                            size: 100,\n+                            color: TColor.secondaryText,\n+                          ),\n+                  ),\n+                ),\n+              ),\n+              const SizedBox(\n+                height: 50,\n+              ),\n+              RoundButton(\n+                onPressed: () {\n+                  if (ServiceCall.userType == 2) {\n+                    context.push(const DriverEditProfileView());\n+                  } else {\n+                    context.push(const EditProfileView());\n+                  }\n+                },\n+                title: \"NEXT\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  void serviceCall(Map<String, File> imagePara) {\n+    Globs.showHUD();\n+    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n+        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n+        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err, () {});\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1725859677535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,293 +134,4 @@\n       mdShowAlert(\"Error\", err, () {});\n     });\n   }\n }\n-import 'dart:io';\n-\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/popup_layout.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n-import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n-\n-class ProfileImageView extends StatefulWidget {\n-  final bool  showBack;\n-  const ProfileImageView({super.key, this.showBack = true });\n-\n-  @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n-}\n-\n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  File? image;\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.white,\n-        elevation: 1,\n-        leading: widget.showBack ? IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ) : null,\n-        centerTitle: true,\n-        title: Text(\n-          \"Profile Image\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 25,\n-              fontWeight: FontWeight.w800),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.center,\n-            children: [\n-              const SizedBox(\n-                height: 50,\n-              ),\n-              InkWell(\n-                onTap: () async {\n-                  await Navigator.push(\n-                    context,\n-                    PopupLayout(\n-                      child: ImagePickerView(\n-                        didSelect: (imagePath) {\n-                          image = File(imagePath);\n-                          serviceCall({\"image\": image!});\n-                          setState(() {});\n-                        },\n-                      ),\n-                    ),\n-                  );\n-                },\n-                child: Container(\n-                  width: 200,\n-                  height: 200,\n-                  decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(100),\n-                      boxShadow: const [\n-                        BoxShadow(color: Colors.black26, blurRadius: 10)\n-                      ]),\n-                  child: ClipRRect(\n-                    borderRadius: BorderRadius.circular(100),\n-                    child: image != null\n-                        ? Image.file(\n-                            image!,\n-                            width: 200,\n-                            height: 200,\n-                            fit: BoxFit.cover,\n-                          )\n-                        : Icon(\n-                            Icons.person,\n-                            size: 100,\n-                            color: TColor.secondaryText,\n-                          ),\n-                  ),\n-                ),\n-              ),\n-              const SizedBox(\n-                height: 50,\n-              ),\n-              RoundButton(\n-                onPressed: () {\n-                  if (ServiceCall.userType == 2) {\n-                    context.push(const DriverEditProfileView());\n-                  } else {\n-                    context.push(const EditProfileView());\n-                  }\n-                },\n-                title: \"NEXT\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  void serviceCall(Map<String, File> imagePara) {\n-    Globs.showHUD();\n-    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n-        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err, () {});\n-    });\n-  }\n-}\n-\n-\n-\n-/*import 'dart:io';\n-\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/image_picker_view.dart';\n-import 'package:taxi_driver/common_widget/popup_layout.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/driver_edit_profile_view.dart';\n-import 'package:taxi_driver/view/menu/edit_profile_view.dart';\n-\n-class ProfileImageView extends StatefulWidget {\n-  final bool  showBack;\n-  const ProfileImageView({super.key, this.showBack = true });\n-\n-  @override\n-  State<ProfileImageView> createState() => _ProfileImageViewState();\n-}\n-\n-class _ProfileImageViewState extends State<ProfileImageView> {\n-  File? image;\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.white,\n-        elevation: 1,\n-        leading: widget.showBack ? IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ) : null,\n-        centerTitle: true,\n-        title: Text(\n-          \"Profile Image\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 25,\n-              fontWeight: FontWeight.w800),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.center,\n-            children: [\n-              const SizedBox(\n-                height: 50,\n-              ),\n-             \n-        InkWell(\n-                onTap: () async {\n-                  await Navigator.push(\n-                    context,\n-                    PopupLayout(\n-                      child: ImagePickerView(\n-                        didSelect: (imagePath) {\n-                          image = File(imagePath);\n-                         serviceCall({\"image\": image!});\n-                          setState(() {});\n-                        },\n-                      ),\n-                    ),\n-                  );\n-                },\n-             \n-                child: Container(\n-                  width: 200,\n-                  height: 200,\n-                  decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(100),\n-                      boxShadow: const [\n-                        BoxShadow(color: Colors.black26, blurRadius: 10)\n-                      ]),\n-                  child: ClipRRect(\n-                    borderRadius: BorderRadius.circular(100),\n-                    child: image != null\n-                        ? Image.file(\n-                            image!,\n-                            width: 200,\n-                            height: 200,\n-                            fit: BoxFit.cover,\n-                          )\n-                        : Icon(\n-                            Icons.person,\n-                            size: 100,\n-                            color: TColor.secondaryText,\n-                          ),\n-                  ),\n-                  ),\n-                ),\n-\n-\n-              \n-              const SizedBox(\n-                height: 50,\n-              ),\n-\n-              RoundButton(\n-                onPressed: () {\n-\n-                   if (ServiceCall.userType == 2) {\n-                    context.push(const DriverEditProfileView());\n-                  } else {\n-                    context.push(const EditProfileView());\n-                  }\n-                },\n-                  \n-                \n-             \n-                title: \"NEXT\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-\n-  void serviceCall(Map<String, File> imagePara) {\n-    Globs.showHUD();\n-    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n-        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n-        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err, () {});\n-    });\n-  }\n-\n-}*/\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720726636871,
            "name": "Commit-0",
            "content": "\nimport 'dart:io';\n\nimport 'package:flutter/material.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/common_widget/image_picker_view.dart';\nimport 'package:taxi_driver/common_widget/popup_layout.dart';\nimport 'package:taxi_driver/common_widget/round_button.dart';\n\nclass ProfileImageView extends StatefulWidget {\n  final bool  showBack;\n  const ProfileImageView({super.key, this.showBack = true });\n\n  @override\n  State<ProfileImageView> createState() => _ProfileImageViewState();\n}\n\nclass _ProfileImageViewState extends State<ProfileImageView> {\n  File? image;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.white,\n        elevation: 1,\n        leading: widget.showBack ? IconButton(\n          onPressed: () {\n            context.pop();\n          },\n          icon: Image.asset(\n            \"assets/img/back.png\",\n            width: 25,\n            height: 25,\n          ),\n        ) : null,\n        centerTitle: true,\n        title: Text(\n          \"Profile Image\",\n          style: TextStyle(\n              color: TColor.primaryText,\n              fontSize: 25,\n              fontWeight: FontWeight.w800),\n        ),\n      ),\n      body: SingleChildScrollView(\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 20),\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.center,\n            children: [\n              const SizedBox(\n                height: 50,\n              ),\n             \n        InkWell(\n                onTap: () async {\n                  await Navigator.push(\n                    context,\n                    PopupLayout(\n                      child: ImagePickerView(\n                        didSelect: (imagePath) {\n                          image = File(imagePath);\n                         serviceCall({\"image\": image!});\n                          setState(() {});\n                        },\n                      ),\n                    ),\n                  );\n                },\n             \n                child: Container(\n                  width: 200,\n                  height: 200,\n                  decoration: BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.circular(100),\n                      boxShadow: const [\n                        BoxShadow(color: Colors.black26, blurRadius: 10)\n                      ]),\n                  child: ClipRRect(\n                    borderRadius: BorderRadius.circular(100),\n                    child: image != null\n                        ? Image.file(\n                            image!,\n                            width: 200,\n                            height: 200,\n                            fit: BoxFit.cover,\n                          )\n                        : Icon(\n                            Icons.person,\n                            size: 100,\n                            color: TColor.secondaryText,\n                          ),\n                  ),\n                  ),\n                ),\n\n\n              \n              const SizedBox(\n                height: 50,\n              ),\n\n              RoundButton(\n                onPressed: () {},\n             \n                title: \"NEXT\",\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n\n  void serviceCall(Map<String, File> imagePara) {\n    Globs.showHUD();\n    ServiceCall.multipart({}, SVKey.svProfileImageUpload,\n        isTokenApi: true, imgObj: imagePara, withSuccess: (responseObj) async {\n      Globs.hideHUD();\n      if ((responseObj[KKey.status] ?? \"\") == \"1\") {\n        ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n        Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n        mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n      } else {\n        mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n      }\n    }, failure: (err) async {\n      Globs.hideHUD();\n      mdShowAlert(\"Error\", err, () {});\n    });\n  }\n\n}"
        }
    ]
}