{
    "sourceFile": "lib/view/home/driver_my_rides_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1722745179453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722774393986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,392 @@\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/view/home/run_ride_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class DriverMyRidesView extends StatefulWidget {\n+  const DriverMyRidesView({super.key});\n+\n+  @override\n+  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n+}\n+\n+class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n+  List ridesArr = [];\n+  double totalAmount = 0.0;\n+  double driverAmount = 0.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    apiAllRidesList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Rides\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 18,\n+              fontWeight: FontWeight.w800),\n+        ),\n+        actions: [\n+          TextButton(\n+              onPressed: () {},\n+              child: Text(\n+                \"\\$${totalAmount.toStringAsFixed(2)}\",\n+                style: TextStyle(\n+                    color: TColor.primary,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.w800),\n+              ))\n+        ],\n+      ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n+          itemBuilder: (context, index) {\n+            var rObj = ridesArr[index] as Map? ?? {};\n+\n+            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n+            var rideTotalAmount =\n+                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n+            var driverAmount =\n+                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n+            return InkWell(\n+              onTap: () {\n+                context.push(TipDetailsView(obj: rObj));\n+              },\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n+                decoration: BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.circular(5),\n+                    boxShadow: const [\n+                      BoxShadow(color: Colors.black12, blurRadius: 2)\n+                    ]),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    Row(\n+                      children: [\n+                        CachedNetworkImage(\n+                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n+                          width: 40,\n+                          height: 40,\n+                          fit: BoxFit.contain,\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                            child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            Text(\n+                              rObj[\"service_name\"] as String? ?? \"\",\n+                              style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w800),\n+                            ),\n+                            Text(\n+                              statusWiseDateTime(rObj),\n+                              style: TextStyle(\n+                                  color: TColor.secondaryText, fontSize: 12),\n+                            )\n+                          ],\n+                        )),\n+                        Text(\n+                          statusText(rObj),\n+                          style: TextStyle(\n+                              color: statusColor(rObj),\n+                              fontSize: 17,\n+                              fontWeight: FontWeight.w700),\n+                        )\n+                      ],\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    Row(\n+                      children: [\n+                        Container(\n+                          width: 10,\n+                          height: 10,\n+                          decoration: BoxDecoration(\n+                              color: TColor.secondary,\n+                              borderRadius: BorderRadius.circular(10)),\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            rObj[\"pickup_address\"] as String? ?? \"\",\n+                            maxLines: 2,\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    if (rObj[\"booking_status\"] >= bsStart)\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                    if (rObj[\"booking_status\"] >= bsStart)\n+                      Row(\n+                        children: [\n+                          Container(\n+                            width: 10,\n+                            height: 10,\n+                            decoration: BoxDecoration(\n+                                color: TColor.primary,\n+                                borderRadius: BorderRadius.circular(10)),\n+                          ),\n+                          const SizedBox(\n+                            width: 15,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rObj[\"drop_address\"] as String? ?? \"\",\n+                              maxLines: 2,\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    if (rObj[\"booking_status\"] == bsComplete)\n+                      Column(\n+                        children: [\n+                          const Divider(),\n+                          const SizedBox(\n+                            height: 8,\n+                          ),\n+                          Row(\n+                            children: [\n+                              Text(\n+                                \"Total Distance: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"${km.toStringAsFixed(1)} KM\",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                              const Spacer(),\n+                              Text(\n+                                \"Duration: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                rObj[\"duration\"].toString(),\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                            ],\n+                          ),\n+                          const SizedBox(\n+                            height: 15,\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Driver Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontSize: 17,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                            ],\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Total Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.primary,\n+                                    fontSize: 20,\n+                                    fontWeight: FontWeight.w800),\n+                              ),\n+                            ],\n+                          ),\n+                        ],\n+                      )\n+                  ],\n+                ),\n+              ),\n+            );\n+          },\n+          separatorBuilder: (context, index) => const SizedBox(\n+                height: 15,\n+              ),\n+          itemCount: ridesArr.length),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiAllRidesList() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n+        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n+        driverAmount =\n+            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      debugPrint(err.toString());\n+    });\n+  }\n+\n+  String statusText(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  String statusWiseDateTime(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return (rideObj[\"accpet_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 3:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 4:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 5:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 6:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 7:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      default:\n+        return (rideObj[\"pickup_date\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1722862437096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,392 +0,0 @@\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/view/home/run_ride_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class DriverMyRidesView extends StatefulWidget {\n-  const DriverMyRidesView({super.key});\n-\n-  @override\n-  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n-}\n-\n-class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n-  List ridesArr = [];\n-  double totalAmount = 0.0;\n-  double driverAmount = 0.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    apiAllRidesList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"My Rides\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 18,\n-              fontWeight: FontWeight.w800),\n-        ),\n-        actions: [\n-          TextButton(\n-              onPressed: () {},\n-              child: Text(\n-                \"\\$${totalAmount.toStringAsFixed(2)}\",\n-                style: TextStyle(\n-                    color: TColor.primary,\n-                    fontSize: 18,\n-                    fontWeight: FontWeight.w800),\n-              ))\n-        ],\n-      ),\n-      body: ListView.separated(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n-          itemBuilder: (context, index) {\n-            var rObj = ridesArr[index] as Map? ?? {};\n-\n-            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n-            var rideTotalAmount =\n-                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n-            var driverAmount =\n-                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n-            return InkWell(\n-              onTap: () {\n-                context.push(TipDetailsView(obj: rObj));\n-              },\n-              child: Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n-                decoration: BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.circular(5),\n-                    boxShadow: const [\n-                      BoxShadow(color: Colors.black12, blurRadius: 2)\n-                    ]),\n-                child: Column(\n-                  crossAxisAlignment: CrossAxisAlignment.start,\n-                  children: [\n-                    Row(\n-                      children: [\n-                        CachedNetworkImage(\n-                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n-                          width: 40,\n-                          height: 40,\n-                          fit: BoxFit.contain,\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                            child: Column(\n-                          crossAxisAlignment: CrossAxisAlignment.start,\n-                          children: [\n-                            Text(\n-                              rObj[\"service_name\"] as String? ?? \"\",\n-                              style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w800),\n-                            ),\n-                            Text(\n-                              statusWiseDateTime(rObj),\n-                              style: TextStyle(\n-                                  color: TColor.secondaryText, fontSize: 12),\n-                            )\n-                          ],\n-                        )),\n-                        Text(\n-                          statusText(rObj),\n-                          style: TextStyle(\n-                              color: statusColor(rObj),\n-                              fontSize: 17,\n-                              fontWeight: FontWeight.w700),\n-                        )\n-                      ],\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    Row(\n-                      children: [\n-                        Container(\n-                          width: 10,\n-                          height: 10,\n-                          decoration: BoxDecoration(\n-                              color: TColor.secondary,\n-                              borderRadius: BorderRadius.circular(10)),\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            rObj[\"pickup_address\"] as String? ?? \"\",\n-                            maxLines: 2,\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 15,\n-                            ),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    if (rObj[\"booking_status\"] >= bsStart)\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                    if (rObj[\"booking_status\"] >= bsStart)\n-                      Row(\n-                        children: [\n-                          Container(\n-                            width: 10,\n-                            height: 10,\n-                            decoration: BoxDecoration(\n-                                color: TColor.primary,\n-                                borderRadius: BorderRadius.circular(10)),\n-                          ),\n-                          const SizedBox(\n-                            width: 15,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rObj[\"drop_address\"] as String? ?? \"\",\n-                              maxLines: 2,\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    if (rObj[\"booking_status\"] == bsComplete)\n-                      Column(\n-                        children: [\n-                          const Divider(),\n-                          const SizedBox(\n-                            height: 8,\n-                          ),\n-                          Row(\n-                            children: [\n-                              Text(\n-                                \"Total Distance: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"${km.toStringAsFixed(1)} KM\",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                              const Spacer(),\n-                              Text(\n-                                \"Duration: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                rObj[\"duration\"].toString(),\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                            ],\n-                          ),\n-                          const SizedBox(\n-                            height: 15,\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Driver Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontSize: 17,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                            ],\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Total Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.primary,\n-                                    fontSize: 20,\n-                                    fontWeight: FontWeight.w800),\n-                              ),\n-                            ],\n-                          ),\n-                        ],\n-                      )\n-                  ],\n-                ),\n-              ),\n-            );\n-          },\n-          separatorBuilder: (context, index) => const SizedBox(\n-                height: 15,\n-              ),\n-          itemCount: ridesArr.length),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiAllRidesList() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n-        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n-        driverAmount =\n-            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      debugPrint(err.toString());\n-    });\n-  }\n-\n-  String statusText(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  String statusWiseDateTime(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return (rideObj[\"accpet_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 3:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 4:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 5:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 6:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 7:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      default:\n-        return (rideObj[\"pickup_date\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-    }\n-  }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862469589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,393 +0,0 @@\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/view/home/run_ride_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class DriverMyRidesView extends StatefulWidget {\n-  const DriverMyRidesView({super.key});\n-\n-  @override\n-  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n-}\n-\n-class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n-  List ridesArr = [];\n-  double totalAmount = 0.0;\n-  double driverAmount = 0.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    apiAllRidesList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"My Rides\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 18,\n-              fontWeight: FontWeight.w800),\n-        ),\n-        actions: [\n-          TextButton(\n-              onPressed: () {},\n-              child: Text(\n-                \"\\$${totalAmount.toStringAsFixed(2)}\",\n-                style: TextStyle(\n-                    color: TColor.primary,\n-                    fontSize: 18,\n-                    fontWeight: FontWeight.w800),\n-              ))\n-        ],\n-      ),\n-      body: ListView.separated(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n-          itemBuilder: (context, index) {\n-            var rObj = ridesArr[index] as Map? ?? {};\n-\n-            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n-            var rideTotalAmount =\n-                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n-            var driverAmount =\n-                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n-            return InkWell(\n-              onTap: () {\n-                context.push(TipDetailsView(obj: rObj));\n-              },\n-              child: Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n-                decoration: BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.circular(5),\n-                    boxShadow: const [\n-                      BoxShadow(color: Colors.black12, blurRadius: 2)\n-                    ]),\n-                child: Column(\n-                  crossAxisAlignment: CrossAxisAlignment.start,\n-                  children: [\n-                    Row(\n-                      children: [\n-                        CachedNetworkImage(\n-                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n-                          width: 40,\n-                          height: 40,\n-                          fit: BoxFit.contain,\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                            child: Column(\n-                          crossAxisAlignment: CrossAxisAlignment.start,\n-                          children: [\n-                            Text(\n-                              rObj[\"service_name\"] as String? ?? \"\",\n-                              style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w800),\n-                            ),\n-                            Text(\n-                              statusWiseDateTime(rObj),\n-                              style: TextStyle(\n-                                  color: TColor.secondaryText, fontSize: 12),\n-                            )\n-                          ],\n-                        )),\n-                        Text(\n-                          statusText(rObj),\n-                          style: TextStyle(\n-                              color: statusColor(rObj),\n-                              fontSize: 17,\n-                              fontWeight: FontWeight.w700),\n-                        )\n-                      ],\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    Row(\n-                      children: [\n-                        Container(\n-                          width: 10,\n-                          height: 10,\n-                          decoration: BoxDecoration(\n-                              color: TColor.secondary,\n-                              borderRadius: BorderRadius.circular(10)),\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            rObj[\"pickup_address\"] as String? ?? \"\",\n-                            maxLines: 2,\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 15,\n-                            ),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    if (rObj[\"booking_status\"] >= bsStart)\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                    if (rObj[\"booking_status\"] >= bsStart)\n-                      Row(\n-                        children: [\n-                          Container(\n-                            width: 10,\n-                            height: 10,\n-                            decoration: BoxDecoration(\n-                                color: TColor.primary,\n-                                borderRadius: BorderRadius.circular(10)),\n-                          ),\n-                          const SizedBox(\n-                            width: 15,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rObj[\"drop_address\"] as String? ?? \"\",\n-                              maxLines: 2,\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    if (rObj[\"booking_status\"] == bsComplete)\n-                      Column(\n-                        children: [\n-                          const Divider(),\n-                          const SizedBox(\n-                            height: 8,\n-                          ),\n-                          Row(\n-                            children: [\n-                              Text(\n-                                \"Total Distance: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"${km.toStringAsFixed(1)} KM\",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                              const Spacer(),\n-                              Text(\n-                                \"Duration: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                rObj[\"duration\"].toString(),\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                            ],\n-                          ),\n-                          const SizedBox(\n-                            height: 15,\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Driver Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontSize: 17,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                            ],\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Total Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.primary,\n-                                    fontSize: 20,\n-                                    fontWeight: FontWeight.w800),\n-                              ),\n-                            ],\n-                          ),\n-                        ],\n-                      )\n-                  ],\n-                ),\n-              ),\n-            );\n-          },\n-          separatorBuilder: (context, index) => const SizedBox(\n-                height: 15,\n-              ),\n-          itemCount: ridesArr.length),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiAllRidesList() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n-        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n-        driverAmount =\n-            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      debugPrint(err.toString());\n-    });\n-  }\n-\n-  String statusText(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  String statusWiseDateTime(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return (rideObj[\"accpet_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 3:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 4:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 5:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 6:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 7:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      default:\n-        return (rideObj[\"pickup_date\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-    }\n-  }\n-}\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722863285509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,392 @@\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/view/home/run_ride_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class DriverMyRidesView extends StatefulWidget {\n+  const DriverMyRidesView({super.key});\n+\n+  @override\n+  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n+}\n+\n+class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n+  List ridesArr = [];\n+  double totalAmount = 0.0;\n+  double driverAmount = 0.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    apiAllRidesList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Rides\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 18,\n+              fontWeight: FontWeight.w800),\n+        ),\n+        actions: [\n+          TextButton(\n+              onPressed: () {},\n+              child: Text(\n+                \"\\$${totalAmount.toStringAsFixed(2)}\",\n+                style: TextStyle(\n+                    color: TColor.primary,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.w800),\n+              ))\n+        ],\n+      ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n+          itemBuilder: (context, index) {\n+            var rObj = ridesArr[index] as Map? ?? {};\n+\n+            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n+            var rideTotalAmount =\n+                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n+            var driverAmount =\n+                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n+            return InkWell(\n+              onTap: () {\n+                context.push(TipDetailsView(obj: rObj));\n+              },\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n+                decoration: BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.circular(5),\n+                    boxShadow: const [\n+                      BoxShadow(color: Colors.black12, blurRadius: 2)\n+                    ]),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    Row(\n+                      children: [\n+                        CachedNetworkImage(\n+                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n+                          width: 40,\n+                          height: 40,\n+                          fit: BoxFit.contain,\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                            child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            Text(\n+                              rObj[\"service_name\"] as String? ?? \"\",\n+                              style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w800),\n+                            ),\n+                            Text(\n+                              statusWiseDateTime(rObj),\n+                              style: TextStyle(\n+                                  color: TColor.secondaryText, fontSize: 12),\n+                            )\n+                          ],\n+                        )),\n+                        Text(\n+                          statusText(rObj),\n+                          style: TextStyle(\n+                              color: statusColor(rObj),\n+                              fontSize: 17,\n+                              fontWeight: FontWeight.w700),\n+                        )\n+                      ],\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    Row(\n+                      children: [\n+                        Container(\n+                          width: 10,\n+                          height: 10,\n+                          decoration: BoxDecoration(\n+                              color: TColor.secondary,\n+                              borderRadius: BorderRadius.circular(10)),\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            rObj[\"pickup_address\"] as String? ?? \"\",\n+                            maxLines: 2,\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    if (rObj[\"booking_status\"] >= bsStart)\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                    if (rObj[\"booking_status\"] >= bsStart)\n+                      Row(\n+                        children: [\n+                          Container(\n+                            width: 10,\n+                            height: 10,\n+                            decoration: BoxDecoration(\n+                                color: TColor.primary,\n+                                borderRadius: BorderRadius.circular(10)),\n+                          ),\n+                          const SizedBox(\n+                            width: 15,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rObj[\"drop_address\"] as String? ?? \"\",\n+                              maxLines: 2,\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    if (rObj[\"booking_status\"] == bsComplete)\n+                      Column(\n+                        children: [\n+                          const Divider(),\n+                          const SizedBox(\n+                            height: 8,\n+                          ),\n+                          Row(\n+                            children: [\n+                              Text(\n+                                \"Total Distance: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"${km.toStringAsFixed(1)} KM\",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                              const Spacer(),\n+                              Text(\n+                                \"Duration: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                rObj[\"duration\"].toString(),\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                            ],\n+                          ),\n+                          const SizedBox(\n+                            height: 15,\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Driver Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontSize: 17,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                            ],\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Total Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.primary,\n+                                    fontSize: 20,\n+                                    fontWeight: FontWeight.w800),\n+                              ),\n+                            ],\n+                          ),\n+                        ],\n+                      )\n+                  ],\n+                ),\n+              ),\n+            );\n+          },\n+          separatorBuilder: (context, index) => const SizedBox(\n+                height: 15,\n+              ),\n+          itemCount: ridesArr.length),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiAllRidesList() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n+        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n+        driverAmount =\n+            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      debugPrint(err.toString());\n+    });\n+  }\n+\n+  String statusText(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  String statusWiseDateTime(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return (rideObj[\"accpet_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 3:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 4:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 5:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 6:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 7:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      default:\n+        return (rideObj[\"pickup_date\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1724056739260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -389,4 +389,399 @@\n             \"\";\n     }\n   }\n }\n+\n+\n+\n+/*import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/view/home/run_ride_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class DriverMyRidesView extends StatefulWidget {\n+  const DriverMyRidesView({super.key});\n+\n+  @override\n+  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n+}\n+\n+class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n+  List ridesArr = [];\n+  double totalAmount = 0.0;\n+  double driverAmount = 0.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    apiAllRidesList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Rides\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 18,\n+              fontWeight: FontWeight.w800),\n+        ),\n+        actions: [\n+          TextButton(\n+              onPressed: () {},\n+              child: Text(\n+                \"\\$${totalAmount.toStringAsFixed(2)}\",\n+                style: TextStyle(\n+                    color: TColor.primary,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.w800),\n+              ))\n+        ],\n+      ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n+          itemBuilder: (context, index) {\n+            var rObj = ridesArr[index] as Map? ?? {};\n+\n+            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n+            var rideTotalAmount =\n+                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n+            var driverAmount =\n+                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n+            return InkWell(\n+              onTap: () {\n+                context.push(TipDetailsView(obj: rObj));\n+              },\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n+                decoration: BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.circular(5),\n+                    boxShadow: const [\n+                      BoxShadow(color: Colors.black12, blurRadius: 2)\n+                    ]),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    Row(\n+                      children: [\n+                        CachedNetworkImage(\n+                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n+                          width: 40,\n+                          height: 40,\n+                          fit: BoxFit.contain,\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                            child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            Text(\n+                              rObj[\"service_name\"] as String? ?? \"\",\n+                              style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w800),\n+                            ),\n+                            Text(\n+                              statusWiseDateTime(rObj),\n+                              style: TextStyle(\n+                                  color: TColor.secondaryText, fontSize: 12),\n+                            )\n+                          ],\n+                        )),\n+                        Text(\n+                          statusText(rObj),\n+                          style: TextStyle(\n+                              color: statusColor(rObj),\n+                              fontSize: 17,\n+                              fontWeight: FontWeight.w700),\n+                        )\n+                      ],\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    Row(\n+                      children: [\n+                        Container(\n+                          width: 10,\n+                          height: 10,\n+                          decoration: BoxDecoration(\n+                              color: TColor.secondary,\n+                              borderRadius: BorderRadius.circular(10)),\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            rObj[\"pickup_address\"] as String? ?? \"\",\n+                            maxLines: 2,\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    if (rObj[\"booking_status\"] >= bsStart)\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                    if (rObj[\"booking_status\"] >= bsStart)\n+                      Row(\n+                        children: [\n+                          Container(\n+                            width: 10,\n+                            height: 10,\n+                            decoration: BoxDecoration(\n+                                color: TColor.primary,\n+                                borderRadius: BorderRadius.circular(10)),\n+                          ),\n+                          const SizedBox(\n+                            width: 15,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rObj[\"drop_address\"] as String? ?? \"\",\n+                              maxLines: 2,\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    if (rObj[\"booking_status\"] == bsComplete)\n+                      Column(\n+                        children: [\n+                          const Divider(),\n+                          const SizedBox(\n+                            height: 8,\n+                          ),\n+                          Row(\n+                            children: [\n+                              Text(\n+                                \"Total Distance: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"${km.toStringAsFixed(1)} KM\",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                              const Spacer(),\n+                              Text(\n+                                \"Duration: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                rObj[\"duration\"].toString(),\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                            ],\n+                          ),\n+                          const SizedBox(\n+                            height: 15,\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Driver Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontSize: 17,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                            ],\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Total Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.primary,\n+                                    fontSize: 20,\n+                                    fontWeight: FontWeight.w800),\n+                              ),\n+                            ],\n+                          ),\n+                        ],\n+                      )\n+                  ],\n+                ),\n+              ),\n+            );\n+          },\n+          separatorBuilder: (context, index) => const SizedBox(\n+                height: 15,\n+              ),\n+          itemCount: ridesArr.length),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiAllRidesList() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n+        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n+        driverAmount =\n+            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      debugPrint(err.toString());\n+    });\n+  }\n+\n+  String statusText(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  String statusWiseDateTime(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return (rideObj[\"accpet_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 3:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 4:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 5:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 6:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 7:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      default:\n+        return (rideObj[\"pickup_date\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+    }\n+  }\n+}*/\n"
                },
                {
                    "date": 1725469227347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,392 @@\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/view/home/run_ride_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class DriverMyRidesView extends StatefulWidget {\n+  const DriverMyRidesView({super.key});\n+\n+  @override\n+  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n+}\n+\n+class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n+  List ridesArr = [];\n+  double totalAmount = 0.0;\n+  double driverAmount = 0.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    apiAllRidesList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Rides\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 18,\n+              fontWeight: FontWeight.w800),\n+        ),\n+        actions: [\n+          TextButton(\n+              onPressed: () {},\n+              child: Text(\n+                \"\\$${totalAmount.toStringAsFixed(2)}\",\n+                style: TextStyle(\n+                    color: TColor.primary,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.w800),\n+              ))\n+        ],\n+      ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n+          itemBuilder: (context, index) {\n+            var rObj = ridesArr[index] as Map? ?? {};\n+\n+            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n+            var rideTotalAmount =\n+                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n+            var driverAmount =\n+                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n+            return InkWell(\n+              onTap: () {\n+                context.push(TipDetailsView(obj: rObj));\n+              },\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n+                decoration: BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.circular(5),\n+                    boxShadow: const [\n+                      BoxShadow(color: Colors.black12, blurRadius: 2)\n+                    ]),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    Row(\n+                      children: [\n+                        CachedNetworkImage(\n+                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n+                          width: 40,\n+                          height: 40,\n+                          fit: BoxFit.contain,\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                            child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            Text(\n+                              rObj[\"service_name\"] as String? ?? \"\",\n+                              style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w800),\n+                            ),\n+                            Text(\n+                              statusWiseDateTime(rObj),\n+                              style: TextStyle(\n+                                  color: TColor.secondaryText, fontSize: 12),\n+                            )\n+                          ],\n+                        )),\n+                        Text(\n+                          statusText(rObj),\n+                          style: TextStyle(\n+                              color: statusColor(rObj),\n+                              fontSize: 17,\n+                              fontWeight: FontWeight.w700),\n+                        )\n+                      ],\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    Row(\n+                      children: [\n+                        Container(\n+                          width: 10,\n+                          height: 10,\n+                          decoration: BoxDecoration(\n+                              color: TColor.secondary,\n+                              borderRadius: BorderRadius.circular(10)),\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            rObj[\"pickup_address\"] as String? ?? \"\",\n+                            maxLines: 2,\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                    if (rObj[\"booking_status\"] >= bsStart)\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                    if (rObj[\"booking_status\"] >= bsStart)\n+                      Row(\n+                        children: [\n+                          Container(\n+                            width: 10,\n+                            height: 10,\n+                            decoration: BoxDecoration(\n+                                color: TColor.primary,\n+                                borderRadius: BorderRadius.circular(10)),\n+                          ),\n+                          const SizedBox(\n+                            width: 15,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rObj[\"drop_address\"] as String? ?? \"\",\n+                              maxLines: 2,\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    if (rObj[\"booking_status\"] == bsComplete)\n+                      Column(\n+                        children: [\n+                          const Divider(),\n+                          const SizedBox(\n+                            height: 8,\n+                          ),\n+                          Row(\n+                            children: [\n+                              Text(\n+                                \"Total Distance: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"${km.toStringAsFixed(1)} KM\",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                              const Spacer(),\n+                              Text(\n+                                \"Duration: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                rObj[\"duration\"].toString(),\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                            ],\n+                          ),\n+                          const SizedBox(\n+                            height: 15,\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Driver Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontSize: 17,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                            ],\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Total Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.primary,\n+                                    fontSize: 20,\n+                                    fontWeight: FontWeight.w800),\n+                              ),\n+                            ],\n+                          ),\n+                        ],\n+                      )\n+                  ],\n+                ),\n+              ),\n+            );\n+          },\n+          separatorBuilder: (context, index) => const SizedBox(\n+                height: 15,\n+              ),\n+          itemCount: ridesArr.length),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiAllRidesList() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n+        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n+        driverAmount =\n+            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      debugPrint(err.toString());\n+    });\n+  }\n+\n+  String statusText(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  String statusWiseDateTime(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return (rideObj[\"accpet_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 3:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 4:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 5:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 6:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 7:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      default:\n+        return (rideObj[\"pickup_date\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1725778032924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,392 @@\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/view/home/run_ride_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class DriverMyRidesView extends StatefulWidget {\n+  const DriverMyRidesView({super.key});\n+\n+  @override\n+  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n+}\n+\n+class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n+  List ridesArr = [];\n+  double totalAmount = 0.0;\n+  double driverAmount = 0.0;\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    apiAllRidesList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Rides\",\n+          style: TextStyle(\n+              color: TColor.primaryText,\n+              fontSize: 18,\n+              fontWeight: FontWeight.w800),\n+        ),\n+        actions: [\n+          TextButton(\n+              onPressed: () {},\n+              child: Text(\n+                \"\\$${totalAmount.toStringAsFixed(2)}\",\n+                style: TextStyle(\n+                    color: TColor.primary,\n+                    fontSize: 18,\n+                    fontWeight: FontWeight.w800),\n+              ))\n+        ],\n+      ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n+          itemBuilder: (context, index) {\n+            var rObj = ridesArr[index] as Map? ?? {};\n+\n+            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n+            var rideTotalAmount =\n+                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n+            var driverAmount =\n+                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n+            return InkWell(\n+              onTap: () {\n+                context.push(TipDetailsView(obj: rObj));\n+              },\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n+                decoration: BoxDecoration(\n+                    color: Colors.white,\n+                    borderRadius: BorderRadius.circular(5),\n+                    boxShadow: const [\n+                      BoxShadow(color: Colors.black12, blurRadius: 2)\n+                    ]),\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.start,\n+                  children: [\n+                    Row(\n+                      children: [\n+                        CachedNetworkImage(\n+                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n+                          width: 40,\n+                          height: 40,\n+                          fit: BoxFit.contain,\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                            child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            Text(\n+                              rObj[\"service_name\"] as String? ?? \"\",\n+                              style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w800),\n+                            ),\n+                            Text(\n+                              statusWiseDateTime(rObj),\n+                              style: TextStyle(\n+                                  color: TColor.secondaryText, fontSize: 12),\n+                            )\n+                          ],\n+                        )),\n+                        Text(\n+                          statusText(rObj),\n+                          style: TextStyle(\n+                              color: statusColor(rObj),\n+                              fontSize: 17,\n+                              fontWeight: FontWeight.w700),\n+                        )\n+                      ],\n+                    ),\n+                    const Divider(),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    Row(\n+                      children: [\n+                        Container(\n+                          width: 10,\n+                          height: 10,\n+                          decoration: BoxDecoration(\n+                              color: TColor.secondary,\n+                              borderRadius: BorderRadius.circular(10)),\n+                        ),\n+                        const SizedBox(\n+                          width: 15,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            rObj[\"pickup_address\"] as String? ?? \"\",\n+                            maxLines: 2,\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                        ),\n+                      ],\n+                    ),\n+                   // if (rObj[\"booking_status\"] >= bsStart)\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                    //if (rObj[\"booking_status\"] >= bsStart)\n+                      Row(\n+                        children: [\n+                          Container(\n+                            width: 10,\n+                            height: 10,\n+                            decoration: BoxDecoration(\n+                                color: TColor.primary,\n+                                borderRadius: BorderRadius.circular(10)),\n+                          ),\n+                          const SizedBox(\n+                            width: 15,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rObj[\"drop_address\"] as String? ?? \"\",\n+                              maxLines: 2,\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    const SizedBox(\n+                      height: 8,\n+                    ),\n+                    //if (rObj[\"booking_status\"] == bsComplete)\n+                      Column(\n+                        children: [\n+                          const Divider(),\n+                          const SizedBox(\n+                            height: 8,\n+                          ),\n+                          Row(\n+                            children: [\n+                              Text(\n+                                \"Total Distance: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"${km.toStringAsFixed(1)} KM\",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                              const Spacer(),\n+                              Text(\n+                                \"Duration: \",\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                rObj[\"duration\"].toString(),\n+                                maxLines: 2,\n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                ),\n+                              ),\n+                            ],\n+                          ),\n+                          const SizedBox(\n+                            height: 15,\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Driver Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontSize: 17,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                            ],\n+                          ),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                            children: [\n+                              Text(\n+                                \"Total Amount: \",\n+                                style: TextStyle(\n+                                    color: TColor.primaryText,\n+                                    fontSize: 15,\n+                                    fontWeight: FontWeight.w700),\n+                              ),\n+                              Text(\n+                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n+                                style: TextStyle(\n+                                    color: TColor.primary,\n+                                    fontSize: 20,\n+                                    fontWeight: FontWeight.w800),\n+                              ),\n+                            ],\n+                          ),\n+                        ],\n+                      )\n+                  ],\n+                ),\n+              ),\n+            );\n+          },\n+          separatorBuilder: (context, index) => const SizedBox(\n+                height: 15,\n+              ),\n+          itemCount: ridesArr.length),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiAllRidesList() {\n+    Globs.showHUD();\n+    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n+        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n+        driverAmount =\n+            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(\n+            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      debugPrint(err.toString());\n+    });\n+  }\n+\n+  String statusText(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+\n+  String statusWiseDateTime(Map rideObj) {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return (rideObj[\"accpet_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 3:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 4:\n+        return (rideObj[\"start_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 5:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 6:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      case 7:\n+        return (rideObj[\"stop_time\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+      default:\n+        return (rideObj[\"pickup_date\"] as String?)\n+                ?.dataFormat()\n+                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n+            \"\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1725779486189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,400 +153,8 @@\n                           ),\n                         ),\n                       ],\n                     ),\n-                   // if (rObj[\"booking_status\"] >= bsStart)\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                    //if (rObj[\"booking_status\"] >= bsStart)\n-                      Row(\n-                        children: [\n-                          Container(\n-                            width: 10,\n-                            height: 10,\n-                            decoration: BoxDecoration(\n-                                color: TColor.primary,\n-                                borderRadius: BorderRadius.circular(10)),\n-                          ),\n-                          const SizedBox(\n-                            width: 15,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rObj[\"drop_address\"] as String? ?? \"\",\n-                              maxLines: 2,\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    //if (rObj[\"booking_status\"] == bsComplete)\n-                      Column(\n-                        children: [\n-                          const Divider(),\n-                          const SizedBox(\n-                            height: 8,\n-                          ),\n-                          Row(\n-                            children: [\n-                              Text(\n-                                \"Total Distance: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"${km.toStringAsFixed(1)} KM\",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                              const Spacer(),\n-                              Text(\n-                                \"Duration: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                rObj[\"duration\"].toString(),\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                            ],\n-                          ),\n-                          const SizedBox(\n-                            height: 15,\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Driver Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontSize: 17,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                            ],\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Total Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.primary,\n-                                    fontSize: 20,\n-                                    fontWeight: FontWeight.w800),\n-                              ),\n-                            ],\n-                          ),\n-                        ],\n-                      )\n-                  ],\n-                ),\n-              ),\n-            );\n-          },\n-          separatorBuilder: (context, index) => const SizedBox(\n-                height: 15,\n-              ),\n-          itemCount: ridesArr.length),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiAllRidesList() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n-        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n-        driverAmount =\n-            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      debugPrint(err.toString());\n-    });\n-  }\n-\n-  String statusText(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  String statusWiseDateTime(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return (rideObj[\"accpet_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 3:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 4:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 5:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 6:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 7:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      default:\n-        return (rideObj[\"pickup_date\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-    }\n-  }\n-}\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/view/home/run_ride_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class DriverMyRidesView extends StatefulWidget {\n-  const DriverMyRidesView({super.key});\n-\n-  @override\n-  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n-}\n-\n-class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n-  List ridesArr = [];\n-  double totalAmount = 0.0;\n-  double driverAmount = 0.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    apiAllRidesList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"My Rides\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 18,\n-              fontWeight: FontWeight.w800),\n-        ),\n-        actions: [\n-          TextButton(\n-              onPressed: () {},\n-              child: Text(\n-                \"\\$${totalAmount.toStringAsFixed(2)}\",\n-                style: TextStyle(\n-                    color: TColor.primary,\n-                    fontSize: 18,\n-                    fontWeight: FontWeight.w800),\n-              ))\n-        ],\n-      ),\n-      body: ListView.separated(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n-          itemBuilder: (context, index) {\n-            var rObj = ridesArr[index] as Map? ?? {};\n-\n-            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n-            var rideTotalAmount =\n-                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n-            var driverAmount =\n-                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n-            return InkWell(\n-              onTap: () {\n-                context.push(TipDetailsView(obj: rObj));\n-              },\n-              child: Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n-                decoration: BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.circular(5),\n-                    boxShadow: const [\n-                      BoxShadow(color: Colors.black12, blurRadius: 2)\n-                    ]),\n-                child: Column(\n-                  crossAxisAlignment: CrossAxisAlignment.start,\n-                  children: [\n-                    Row(\n-                      children: [\n-                        CachedNetworkImage(\n-                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n-                          width: 40,\n-                          height: 40,\n-                          fit: BoxFit.contain,\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                            child: Column(\n-                          crossAxisAlignment: CrossAxisAlignment.start,\n-                          children: [\n-                            Text(\n-                              rObj[\"service_name\"] as String? ?? \"\",\n-                              style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w800),\n-                            ),\n-                            Text(\n-                              statusWiseDateTime(rObj),\n-                              style: TextStyle(\n-                                  color: TColor.secondaryText, fontSize: 12),\n-                            )\n-                          ],\n-                        )),\n-                        Text(\n-                          statusText(rObj),\n-                          style: TextStyle(\n-                              color: statusColor(rObj),\n-                              fontSize: 17,\n-                              fontWeight: FontWeight.w700),\n-                        )\n-                      ],\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    Row(\n-                      children: [\n-                        Container(\n-                          width: 10,\n-                          height: 10,\n-                          decoration: BoxDecoration(\n-                              color: TColor.secondary,\n-                              borderRadius: BorderRadius.circular(10)),\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            rObj[\"pickup_address\"] as String? ?? \"\",\n-                            maxLines: 2,\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 15,\n-                            ),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n                     if (rObj[\"booking_status\"] >= bsStart)\n                       const SizedBox(\n                         height: 8,\n                       ),\n@@ -781,792 +389,4 @@\n             \"\";\n     }\n   }\n }\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/view/home/run_ride_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class DriverMyRidesView extends StatefulWidget {\n-  const DriverMyRidesView({super.key});\n-\n-  @override\n-  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n-}\n-\n-class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n-  List ridesArr = [];\n-  double totalAmount = 0.0;\n-  double driverAmount = 0.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    apiAllRidesList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"My Rides\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 18,\n-              fontWeight: FontWeight.w800),\n-        ),\n-        actions: [\n-          TextButton(\n-              onPressed: () {},\n-              child: Text(\n-                \"\\$${totalAmount.toStringAsFixed(2)}\",\n-                style: TextStyle(\n-                    color: TColor.primary,\n-                    fontSize: 18,\n-                    fontWeight: FontWeight.w800),\n-              ))\n-        ],\n-      ),\n-      body: ListView.separated(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n-          itemBuilder: (context, index) {\n-            var rObj = ridesArr[index] as Map? ?? {};\n-\n-            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n-            var rideTotalAmount =\n-                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n-            var driverAmount =\n-                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n-            return InkWell(\n-              onTap: () {\n-                context.push(TipDetailsView(obj: rObj));\n-              },\n-              child: Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n-                decoration: BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.circular(5),\n-                    boxShadow: const [\n-                      BoxShadow(color: Colors.black12, blurRadius: 2)\n-                    ]),\n-                child: Column(\n-                  crossAxisAlignment: CrossAxisAlignment.start,\n-                  children: [\n-                    Row(\n-                      children: [\n-                        CachedNetworkImage(\n-                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n-                          width: 40,\n-                          height: 40,\n-                          fit: BoxFit.contain,\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                            child: Column(\n-                          crossAxisAlignment: CrossAxisAlignment.start,\n-                          children: [\n-                            Text(\n-                              rObj[\"service_name\"] as String? ?? \"\",\n-                              style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w800),\n-                            ),\n-                            Text(\n-                              statusWiseDateTime(rObj),\n-                              style: TextStyle(\n-                                  color: TColor.secondaryText, fontSize: 12),\n-                            )\n-                          ],\n-                        )),\n-                        Text(\n-                          statusText(rObj),\n-                          style: TextStyle(\n-                              color: statusColor(rObj),\n-                              fontSize: 17,\n-                              fontWeight: FontWeight.w700),\n-                        )\n-                      ],\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    Row(\n-                      children: [\n-                        Container(\n-                          width: 10,\n-                          height: 10,\n-                          decoration: BoxDecoration(\n-                              color: TColor.secondary,\n-                              borderRadius: BorderRadius.circular(10)),\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            rObj[\"pickup_address\"] as String? ?? \"\",\n-                            maxLines: 2,\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 15,\n-                            ),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    if (rObj[\"booking_status\"] >= bsStart)\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                    if (rObj[\"booking_status\"] >= bsStart)\n-                      Row(\n-                        children: [\n-                          Container(\n-                            width: 10,\n-                            height: 10,\n-                            decoration: BoxDecoration(\n-                                color: TColor.primary,\n-                                borderRadius: BorderRadius.circular(10)),\n-                          ),\n-                          const SizedBox(\n-                            width: 15,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rObj[\"drop_address\"] as String? ?? \"\",\n-                              maxLines: 2,\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    if (rObj[\"booking_status\"] == bsComplete)\n-                      Column(\n-                        children: [\n-                          const Divider(),\n-                          const SizedBox(\n-                            height: 8,\n-                          ),\n-                          Row(\n-                            children: [\n-                              Text(\n-                                \"Total Distance: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"${km.toStringAsFixed(1)} KM\",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                              const Spacer(),\n-                              Text(\n-                                \"Duration: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                rObj[\"duration\"].toString(),\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                            ],\n-                          ),\n-                          const SizedBox(\n-                            height: 15,\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Driver Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontSize: 17,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                            ],\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Total Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.primary,\n-                                    fontSize: 20,\n-                                    fontWeight: FontWeight.w800),\n-                              ),\n-                            ],\n-                          ),\n-                        ],\n-                      )\n-                  ],\n-                ),\n-              ),\n-            );\n-          },\n-          separatorBuilder: (context, index) => const SizedBox(\n-                height: 15,\n-              ),\n-          itemCount: ridesArr.length),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiAllRidesList() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n-        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n-        driverAmount =\n-            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      debugPrint(err.toString());\n-    });\n-  }\n-\n-  String statusText(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  String statusWiseDateTime(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return (rideObj[\"accpet_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 3:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 4:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 5:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 6:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 7:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      default:\n-        return (rideObj[\"pickup_date\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-    }\n-  }\n-}\n-\n-\n-\n-/*import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/view/home/run_ride_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class DriverMyRidesView extends StatefulWidget {\n-  const DriverMyRidesView({super.key});\n-\n-  @override\n-  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n-}\n-\n-class _DriverMyRidesViewState extends State<DriverMyRidesView> {\n-  List ridesArr = [];\n-  double totalAmount = 0.0;\n-  double driverAmount = 0.0;\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    apiAllRidesList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"My Rides\",\n-          style: TextStyle(\n-              color: TColor.primaryText,\n-              fontSize: 18,\n-              fontWeight: FontWeight.w800),\n-        ),\n-        actions: [\n-          TextButton(\n-              onPressed: () {},\n-              child: Text(\n-                \"\\$${totalAmount.toStringAsFixed(2)}\",\n-                style: TextStyle(\n-                    color: TColor.primary,\n-                    fontSize: 18,\n-                    fontWeight: FontWeight.w800),\n-              ))\n-        ],\n-      ),\n-      body: ListView.separated(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n-          itemBuilder: (context, index) {\n-            var rObj = ridesArr[index] as Map? ?? {};\n-\n-            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n-            var rideTotalAmount =\n-                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n-            var driverAmount =\n-                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n-            return InkWell(\n-              onTap: () {\n-                context.push(TipDetailsView(obj: rObj));\n-              },\n-              child: Container(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n-                decoration: BoxDecoration(\n-                    color: Colors.white,\n-                    borderRadius: BorderRadius.circular(5),\n-                    boxShadow: const [\n-                      BoxShadow(color: Colors.black12, blurRadius: 2)\n-                    ]),\n-                child: Column(\n-                  crossAxisAlignment: CrossAxisAlignment.start,\n-                  children: [\n-                    Row(\n-                      children: [\n-                        CachedNetworkImage(\n-                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n-                          width: 40,\n-                          height: 40,\n-                          fit: BoxFit.contain,\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                            child: Column(\n-                          crossAxisAlignment: CrossAxisAlignment.start,\n-                          children: [\n-                            Text(\n-                              rObj[\"service_name\"] as String? ?? \"\",\n-                              style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w800),\n-                            ),\n-                            Text(\n-                              statusWiseDateTime(rObj),\n-                              style: TextStyle(\n-                                  color: TColor.secondaryText, fontSize: 12),\n-                            )\n-                          ],\n-                        )),\n-                        Text(\n-                          statusText(rObj),\n-                          style: TextStyle(\n-                              color: statusColor(rObj),\n-                              fontSize: 17,\n-                              fontWeight: FontWeight.w700),\n-                        )\n-                      ],\n-                    ),\n-                    const Divider(),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    Row(\n-                      children: [\n-                        Container(\n-                          width: 10,\n-                          height: 10,\n-                          decoration: BoxDecoration(\n-                              color: TColor.secondary,\n-                              borderRadius: BorderRadius.circular(10)),\n-                        ),\n-                        const SizedBox(\n-                          width: 15,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            rObj[\"pickup_address\"] as String? ?? \"\",\n-                            maxLines: 2,\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 15,\n-                            ),\n-                          ),\n-                        ),\n-                      ],\n-                    ),\n-                    if (rObj[\"booking_status\"] >= bsStart)\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                    if (rObj[\"booking_status\"] >= bsStart)\n-                      Row(\n-                        children: [\n-                          Container(\n-                            width: 10,\n-                            height: 10,\n-                            decoration: BoxDecoration(\n-                                color: TColor.primary,\n-                                borderRadius: BorderRadius.circular(10)),\n-                          ),\n-                          const SizedBox(\n-                            width: 15,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rObj[\"drop_address\"] as String? ?? \"\",\n-                              maxLines: 2,\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    const SizedBox(\n-                      height: 8,\n-                    ),\n-                    if (rObj[\"booking_status\"] == bsComplete)\n-                      Column(\n-                        children: [\n-                          const Divider(),\n-                          const SizedBox(\n-                            height: 8,\n-                          ),\n-                          Row(\n-                            children: [\n-                              Text(\n-                                \"Total Distance: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"${km.toStringAsFixed(1)} KM\",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                              const Spacer(),\n-                              Text(\n-                                \"Duration: \",\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                rObj[\"duration\"].toString(),\n-                                maxLines: 2,\n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                ),\n-                              ),\n-                            ],\n-                          ),\n-                          const SizedBox(\n-                            height: 15,\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Driver Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontSize: 17,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                            ],\n-                          ),\n-                          Row(\n-                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                            children: [\n-                              Text(\n-                                \"Total Amount: \",\n-                                style: TextStyle(\n-                                    color: TColor.primaryText,\n-                                    fontSize: 15,\n-                                    fontWeight: FontWeight.w700),\n-                              ),\n-                              Text(\n-                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n-                                style: TextStyle(\n-                                    color: TColor.primary,\n-                                    fontSize: 20,\n-                                    fontWeight: FontWeight.w800),\n-                              ),\n-                            ],\n-                          ),\n-                        ],\n-                      )\n-                  ],\n-                ),\n-              ),\n-            );\n-          },\n-          separatorBuilder: (context, index) => const SizedBox(\n-                height: 15,\n-              ),\n-          itemCount: ridesArr.length),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiAllRidesList() {\n-    Globs.showHUD();\n-    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n-        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n-        driverAmount =\n-            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(\n-            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      debugPrint(err.toString());\n-    });\n-  }\n-\n-  String statusText(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-\n-  String statusWiseDateTime(Map rideObj) {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return (rideObj[\"accpet_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 3:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 4:\n-        return (rideObj[\"start_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 5:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 6:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      case 7:\n-        return (rideObj[\"stop_time\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-      default:\n-        return (rideObj[\"pickup_date\"] as String?)\n-                ?.dataFormat()\n-                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n-            \"\";\n-    }\n-  }\n-}*/\n-\n"
                }
            ],
            "date": 1722745179453,
            "name": "Commit-0",
            "content": "import 'package:cached_network_image/cached_network_image.dart';\nimport 'package:flutter/material.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/view/home/run_ride_view.dart';\nimport 'package:taxi_driver/view/home/tip_detail_view.dart';\n\nclass DriverMyRidesView extends StatefulWidget {\n  const DriverMyRidesView({super.key});\n\n  @override\n  State<DriverMyRidesView> createState() => _DriverMyRidesViewState();\n}\n\nclass _DriverMyRidesViewState extends State<DriverMyRidesView> {\n  List ridesArr = [];\n  double totalAmount = 0.0;\n  double driverAmount = 0.0;\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n    apiAllRidesList();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        elevation: 0.5,\n        backgroundColor: Colors.white,\n        leading: IconButton(\n          onPressed: () {\n            context.pop();\n          },\n          icon: Image.asset(\n            \"assets/img/back.png\",\n            width: 25,\n            height: 25,\n          ),\n        ),\n        centerTitle: true,\n        title: Text(\n          \"My Rides\",\n          style: TextStyle(\n              color: TColor.primaryText,\n              fontSize: 18,\n              fontWeight: FontWeight.w800),\n        ),\n        actions: [\n          TextButton(\n              onPressed: () {},\n              child: Text(\n                \"\\$${totalAmount.toStringAsFixed(2)}\",\n                style: TextStyle(\n                    color: TColor.primary,\n                    fontSize: 18,\n                    fontWeight: FontWeight.w800),\n              ))\n        ],\n      ),\n      body: ListView.separated(\n          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 15),\n          itemBuilder: (context, index) {\n            var rObj = ridesArr[index] as Map? ?? {};\n\n            var km = double.tryParse(rObj[\"total_distance\"].toString()) ?? 0.0;\n            var rideTotalAmount =\n                double.tryParse(rObj[\"amount\"].toString()) ?? 0.0;\n            var driverAmount =\n                double.tryParse(rObj[\"driver_amt\"].toString()) ?? 0.0;\n            return InkWell(\n              onTap: () {\n                context.push(TipDetailsView(obj: rObj));\n              },\n              child: Container(\n                padding:\n                    const EdgeInsets.symmetric(vertical: 15, horizontal: 15),\n                decoration: BoxDecoration(\n                    color: Colors.white,\n                    borderRadius: BorderRadius.circular(5),\n                    boxShadow: const [\n                      BoxShadow(color: Colors.black12, blurRadius: 2)\n                    ]),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Row(\n                      children: [\n                        CachedNetworkImage(\n                          imageUrl: rObj[\"icon\"] as String? ?? \"\",\n                          width: 40,\n                          height: 40,\n                          fit: BoxFit.contain,\n                        ),\n                        const SizedBox(\n                          width: 15,\n                        ),\n                        Expanded(\n                            child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            Text(\n                              rObj[\"service_name\"] as String? ?? \"\",\n                              style: TextStyle(\n                                  color: TColor.primaryText,\n                                  fontSize: 17,\n                                  fontWeight: FontWeight.w800),\n                            ),\n                            Text(\n                              statusWiseDateTime(rObj),\n                              style: TextStyle(\n                                  color: TColor.secondaryText, fontSize: 12),\n                            )\n                          ],\n                        )),\n                        Text(\n                          statusText(rObj),\n                          style: TextStyle(\n                              color: statusColor(rObj),\n                              fontSize: 17,\n                              fontWeight: FontWeight.w700),\n                        )\n                      ],\n                    ),\n                    const Divider(),\n                    const SizedBox(\n                      height: 8,\n                    ),\n                    Row(\n                      children: [\n                        Container(\n                          width: 10,\n                          height: 10,\n                          decoration: BoxDecoration(\n                              color: TColor.secondary,\n                              borderRadius: BorderRadius.circular(10)),\n                        ),\n                        const SizedBox(\n                          width: 15,\n                        ),\n                        Expanded(\n                          child: Text(\n                            rObj[\"pickup_address\"] as String? ?? \"\",\n                            maxLines: 2,\n                            style: TextStyle(\n                              color: TColor.primaryText,\n                              fontSize: 15,\n                            ),\n                          ),\n                        ),\n                      ],\n                    ),\n                    if (rObj[\"booking_status\"] >= bsStart)\n                      const SizedBox(\n                        height: 8,\n                      ),\n                    if (rObj[\"booking_status\"] >= bsStart)\n                      Row(\n                        children: [\n                          Container(\n                            width: 10,\n                            height: 10,\n                            decoration: BoxDecoration(\n                                color: TColor.primary,\n                                borderRadius: BorderRadius.circular(10)),\n                          ),\n                          const SizedBox(\n                            width: 15,\n                          ),\n                          Expanded(\n                            child: Text(\n                              rObj[\"drop_address\"] as String? ?? \"\",\n                              maxLines: 2,\n                              style: TextStyle(\n                                color: TColor.primaryText,\n                                fontSize: 15,\n                              ),\n                            ),\n                          ),\n                        ],\n                      ),\n                    const SizedBox(\n                      height: 8,\n                    ),\n                    if (rObj[\"booking_status\"] == bsComplete)\n                      Column(\n                        children: [\n                          const Divider(),\n                          const SizedBox(\n                            height: 8,\n                          ),\n                          Row(\n                            children: [\n                              Text(\n                                \"Total Distance: \",\n                                maxLines: 2,\n                                style: TextStyle(\n                                    color: TColor.primaryText,\n                                    fontSize: 15,\n                                    fontWeight: FontWeight.w700),\n                              ),\n                              Text(\n                                \"${km.toStringAsFixed(1)} KM\",\n                                maxLines: 2,\n                                style: TextStyle(\n                                  color: TColor.primaryText,\n                                  fontSize: 15,\n                                ),\n                              ),\n                              const Spacer(),\n                              Text(\n                                \"Duration: \",\n                                maxLines: 2,\n                                style: TextStyle(\n                                    color: TColor.primaryText,\n                                    fontSize: 15,\n                                    fontWeight: FontWeight.w700),\n                              ),\n                              Text(\n                                rObj[\"duration\"].toString(),\n                                maxLines: 2,\n                                style: TextStyle(\n                                  color: TColor.primaryText,\n                                  fontSize: 15,\n                                ),\n                              ),\n                            ],\n                          ),\n                          const SizedBox(\n                            height: 15,\n                          ),\n                          Row(\n                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                            children: [\n                              Text(\n                                \"Driver Amount: \",\n                                style: TextStyle(\n                                    color: TColor.primaryText,\n                                    fontSize: 15,\n                                    fontWeight: FontWeight.w700),\n                              ),\n                              Text(\n                                \"\\$${driverAmount.toStringAsFixed(2)}\",\n                                style: TextStyle(\n                                    color: TColor.secondary,\n                                    fontSize: 17,\n                                    fontWeight: FontWeight.w700),\n                              ),\n                            ],\n                          ),\n                          Row(\n                            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                            children: [\n                              Text(\n                                \"Total Amount: \",\n                                style: TextStyle(\n                                    color: TColor.primaryText,\n                                    fontSize: 15,\n                                    fontWeight: FontWeight.w700),\n                              ),\n                              Text(\n                                \"\\$${rideTotalAmount.toStringAsFixed(2)}\",\n                                style: TextStyle(\n                                    color: TColor.primary,\n                                    fontSize: 20,\n                                    fontWeight: FontWeight.w800),\n                              ),\n                            ],\n                          ),\n                        ],\n                      )\n                  ],\n                ),\n              ),\n            );\n          },\n          separatorBuilder: (context, index) => const SizedBox(\n                height: 15,\n              ),\n          itemCount: ridesArr.length),\n    );\n  }\n\n  //TODO: ApiCalling\n\n  void apiAllRidesList() {\n    Globs.showHUD();\n    ServiceCall.post({}, SVKey.svDriverAllRides, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      Globs.hideHUD();\n      if (responseObj[KKey.status] == \"1\") {\n        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n        ridesArr = payloadObj[\"ride_list\"] as List? ?? [];\n        totalAmount = double.tryParse(payloadObj[\"total\"].toString()) ?? 0.0;\n        driverAmount =\n            double.tryParse(payloadObj[\"driver_total\"].toString()) ?? 0.0;\n\n        if (mounted) {\n          setState(() {});\n        }\n      } else {\n        mdShowAlert(\n            \"Error\", responseObj[KKey.message] as String? ?? MSG.fail, () {});\n      }\n    }, failure: (err) async {\n      Globs.hideHUD();\n      debugPrint(err.toString());\n    });\n  }\n\n  String statusText(Map rideObj) {\n    switch (rideObj[\"booking_status\"]) {\n      case 2:\n        return \"On Way\";\n      case 3:\n        return \"Waiting\";\n      case 4:\n        return \"Started\";\n      case 5:\n        return \"Completed\";\n      case 6:\n        return \"Cancel\";\n      case 7:\n        return \"No Drivers\";\n      default:\n        return \"Pending\";\n    }\n  }\n\n  Color statusColor(Map rideObj) {\n    switch (rideObj[\"booking_status\"]) {\n      case 2:\n        return Colors.green;\n      case 3:\n        return Colors.orange;\n      case 4:\n        return Colors.green;\n      case 5:\n        return Colors.green;\n      case 6:\n        return Colors.red;\n      case 7:\n        return Colors.red;\n      default:\n        return Colors.blue;\n    }\n  }\n\n  String statusWiseDateTime(Map rideObj) {\n    switch (rideObj[\"booking_status\"]) {\n      case 2:\n        return (rideObj[\"accpet_time\"] as String?)\n                ?.dataFormat()\n                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n            \"\";\n      case 3:\n        return (rideObj[\"start_time\"] as String?)\n                ?.dataFormat()\n                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n            \"\";\n      case 4:\n        return (rideObj[\"start_time\"] as String?)\n                ?.dataFormat()\n                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n            \"\";\n      case 5:\n        return (rideObj[\"stop_time\"] as String?)\n                ?.dataFormat()\n                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n            \"\";\n      case 6:\n        return (rideObj[\"stop_time\"] as String?)\n                ?.dataFormat()\n                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n            \"\";\n      case 7:\n        return (rideObj[\"stop_time\"] as String?)\n                ?.dataFormat()\n                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n            \"\";\n      default:\n        return (rideObj[\"pickup_date\"] as String?)\n                ?.dataFormat()\n                .stringFormat(format: \"dd MMM, yyyy hh:mm a\") ??\n            \"\";\n    }\n  }\n}\n"
        }
    ]
}