{
    "sourceFile": "lib/view/home/run_ride_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 164,
            "patches": [
                {
                    "date": 1719737801550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719738199604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,41 +207,9 @@\n             const SizedBox(\n               height: 15,\n             ),\n \n-                     Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.secondary,\n-                        borderRadius: BorderRadius.circular(10)\n-                        ),\n-                       ),\n \n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                               \"23 Dang Nepal , Ring Road\", \n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n-\n              Padding(\n                        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n                        child:\n                         Row(\n@@ -371,28 +339,34 @@\n                         \n                          ),\n                               \n                               ]),\n-                              child:Row(\n-                                mainAxisSize: MainAxisSize.min,\n-                                crossAxisAlignment: CrossAxisAlignment.center,\n-                                children: [\n-                       Image.asset(\n-                        \"assets/img/close.png\", \n-                        width: 25, \n-                        height: 25,\n+                              child: Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.secondary,\n+                        borderRadius: BorderRadius.circular(10)\n                         ),\n-                 \n-                         Text(\n-                          \"No Thanks\", \n-                          style: TextStyle(\n-                            color: TColor.primaryText,\n-                            fontSize: 16,\n-                            \n-                          ),\n-                        ),\n-                                ],\n-                  )),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Text(\n+                               \"23 Dang Nepal , Ring Road\", \n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                                \n+                              ),\n+                              ),\n+                          \n+                        ],\n+                       \n+                     ),),\n                 ),\n                 \n               \n               \n"
                },
                {
                    "date": 1719738398774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -354,9 +354,9 @@\n                        const SizedBox(\n                         width: 15,),\n \n                         Text(\n-                               \"23 Dang Nepal , Ring Road\", \n+                               \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n                               style: TextStyle(\n                                 color: TColor.primaryText,\n                                 fontSize: 15,\n                                 \n"
                },
                {
                    "date": 1719738530714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,16 +353,18 @@\n \n                        const SizedBox(\n                         width: 15,),\n \n-                        Text(\n-                               \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n                           \n                         ],\n                        \n                      ),),\n"
                },
                {
                    "date": 1719738772980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,13 +314,9 @@\n       mainAxisAlignment: MainAxisAlignment.start,\n       children: [\n         Padding(\n           padding: const EdgeInsets.all(15),\n-          child: Row(\n-            mainAxisAlignment: MainAxisAlignment.center,\n-            children: [\n-             \n-          \n+          child: \n                 InkWell(\n                   onTap: () {\n                    context.pop();\n                   },\n@@ -371,11 +367,11 @@\n                 ),\n                 \n               \n               \n-            ],\n+            \n           ),\n-        )\n+        \n       ],\n     ),\n     )\n \n"
                },
                {
                    "date": 1719739140089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,432 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.center,\n+                children: [\n+                \n+               \n+\n+                Text(\n+                      \"25 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+               \n+                ],\n+              ),\n+\n+             const SizedBox(\n+              height: 8,\n+             ),\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: Text(\n+                        \"\\$12.50\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                 ),\n+                    Expanded(\n+                      child: Text(\n+                        \"4.5 KM\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                    ),\n+                     Expanded(\n+                       child: Padding(\n+                         padding: const EdgeInsets.symmetric(horizontal: 25, \n+                         vertical: 8),\n+                       \n+                         child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.center,\n+                           children: [\n+                            Image.asset\n+                            (\"assets/img/rate_tip.png\", \n+                            width: 15, \n+                            height: 15, \n+                            ),\n+                         \n+                            const SizedBox(width: 4,),\n+                            \n+                             Text(\n+                              \"3.5\", \n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 18,\n+                                \n+                              ),\n+                              ),\n+                           ],\n+                         ),\n+                       ),\n+                     ),\n+              ],\n+            ),\n+\n+            const SizedBox(\n+              height: 15,\n+            ),\n+\n+\n+             Padding(\n+                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                       child:\n+                        Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.primary,\n+                      \n+                        ),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Text(\n+                              \"23 Dang Nepal , Ring Road\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                                \n+                              ),\n+                              ),\n+                          \n+                        ],\n+                       \n+                     ),\n+              \n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+             InkWell(\n+              onTap: () {\n+             \n+              },\n+               child: Container(\n+                          width: double.maxFinite,\n+                          margin: const EdgeInsets.symmetric(horizontal: 20),\n+                          padding: const EdgeInsets.all(6),\n+                          decoration: BoxDecoration(\n+                            color: TColor.primary,\n+                          borderRadius: BorderRadius.circular(30),\n+                          ),\n+                          child: Stack(\n+                            alignment: Alignment.centerRight,\n+                            children: [\n+                            Row(\n+                              mainAxisAlignment: MainAxisAlignment.center,\n+                              children: [\n+                          Text(\n+                                \"TAP TO ACCEPT\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w700,\n+                                  \n+                                ),\n+                                ),\n+                              ],\n+                            ),\n+               \n+                            Container(\n+                          height: 40,\n+                          width: 40,\n+                          decoration: BoxDecoration(\n+                            color: Colors.black12,\n+                          borderRadius: BorderRadius.circular(20),\n+                          ),\n+                          alignment: Alignment.center,\n+                          child:\n+               \n+                          Text(\n+                                \"15\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 14,\n+                                  fontWeight: FontWeight.w700,),\n+                                  \n+                                ),\n+                                ),\n+                          ],),\n+                         ),\n+             ),\n+\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.all(15),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(30),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.secondary,\n+                        borderRadius: BorderRadius.circular(10)\n+                        ),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719739409771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,16 +337,12 @@\n                               \n                               ]),\n                               child: Row(\n                         children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.secondary,\n-                        borderRadius: BorderRadius.circular(10)\n-                        ),\n-                       ),\n+                       Image.asset(\n+                        \"assets/img/pickup_pin.1.png\",\n+                         width: 30, \n+                         height: 30,),\n \n                        const SizedBox(\n                         width: 15,),\n \n@@ -428,437 +424,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.center,\n-                children: [\n-                \n-               \n-\n-                Text(\n-                      \"25 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-               \n-                ],\n-              ),\n-\n-             const SizedBox(\n-              height: 8,\n-             ),\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                 ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n-              ],\n-            ),\n-\n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-             Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.primary,\n-                      \n-                        ),\n-                       ),\n-\n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                              \"Moon Light Drug Distributers, Ghorahi Nepal\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-             InkWell(\n-              onTap: () {\n-             \n-              },\n-               child: Container(\n-                          width: double.maxFinite,\n-                          margin: const EdgeInsets.symmetric(horizontal: 20),\n-                          padding: const EdgeInsets.all(6),\n-                          decoration: BoxDecoration(\n-                            color: TColor.primary,\n-                          borderRadius: BorderRadius.circular(30),\n-                          ),\n-                          child: Stack(\n-                            alignment: Alignment.centerRight,\n-                            children: [\n-                            Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                          Text(\n-                                \"TAP TO ACCEPT\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w700,\n-                                  \n-                                ),\n-                                ),\n-                              ],\n-                            ),\n-               \n-                            Container(\n-                          height: 40,\n-                          width: 40,\n-                          decoration: BoxDecoration(\n-                            color: Colors.black12,\n-                          borderRadius: BorderRadius.circular(20),\n-                          ),\n-                          alignment: Alignment.center,\n-                          child:\n-               \n-                          Text(\n-                                \"15\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 14,\n-                                  fontWeight: FontWeight.w700,),\n-                                  \n-                                ),\n-                                ),\n-                          ],),\n-                         ),\n-             ),\n-\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.all(15),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(30),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.secondary,\n-                        borderRadius: BorderRadius.circular(10)\n-                        ),\n-                       ),\n-\n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719739482310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -338,9 +338,9 @@\n                               ]),\n                               child: Row(\n                         children: [\n                        Image.asset(\n-                        \"assets/img/pickup_pin.1.png\",\n+                        \"assets/img/pickup_pin_1.png\",\n                          width: 30, \n                          height: 30,),\n \n                        const SizedBox(\n"
                },
                {
                    "date": 1719739517344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -343,9 +343,9 @@\n                          width: 30, \n                          height: 30,),\n \n                        const SizedBox(\n-                        width: 15,),\n+                        width: 8,),\n \n                         Expanded(\n                           child: Text(\n                                  \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n"
                },
                {
                    "date": 1719739568158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,428 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.center,\n+                children: [\n+                \n+               \n+\n+                Text(\n+                      \"25 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+               \n+                ],\n+              ),\n+\n+             const SizedBox(\n+              height: 8,\n+             ),\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: Text(\n+                        \"\\$12.50\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                 ),\n+                    Expanded(\n+                      child: Text(\n+                        \"4.5 KM\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                    ),\n+                     Expanded(\n+                       child: Padding(\n+                         padding: const EdgeInsets.symmetric(horizontal: 25, \n+                         vertical: 8),\n+                       \n+                         child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.center,\n+                           children: [\n+                            Image.asset\n+                            (\"assets/img/rate_tip.png\", \n+                            width: 15, \n+                            height: 15, \n+                            ),\n+                         \n+                            const SizedBox(width: 4,),\n+                            \n+                             Text(\n+                              \"3.5\", \n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 18,\n+                                \n+                              ),\n+                              ),\n+                           ],\n+                         ),\n+                       ),\n+                     ),\n+              ],\n+            ),\n+\n+            const SizedBox(\n+              height: 15,\n+            ),\n+\n+\n+             Padding(\n+                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                       child:\n+                        Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.primary,\n+                      \n+                        ),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Text(\n+                              \"23 Dang Nepal , Ring Road\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                                \n+                              ),\n+                              ),\n+                          \n+                        ],\n+                       \n+                     ),\n+              \n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+             InkWell(\n+              onTap: () {\n+             \n+              },\n+               child: Container(\n+                          width: double.maxFinite,\n+                          margin: const EdgeInsets.symmetric(horizontal: 20),\n+                          padding: const EdgeInsets.all(6),\n+                          decoration: BoxDecoration(\n+                            color: TColor.primary,\n+                          borderRadius: BorderRadius.circular(30),\n+                          ),\n+                          child: Stack(\n+                            alignment: Alignment.centerRight,\n+                            children: [\n+                            Row(\n+                              mainAxisAlignment: MainAxisAlignment.center,\n+                              children: [\n+                          Text(\n+                                \"TAP TO ACCEPT\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w700,\n+                                  \n+                                ),\n+                                ),\n+                              ],\n+                            ),\n+               \n+                            Container(\n+                          height: 40,\n+                          width: 40,\n+                          decoration: BoxDecoration(\n+                            color: Colors.black12,\n+                          borderRadius: BorderRadius.circular(20),\n+                          ),\n+                          alignment: Alignment.center,\n+                          child:\n+               \n+                          Text(\n+                                \"15\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 14,\n+                                  fontWeight: FontWeight.w700,),\n+                                  \n+                                ),\n+                                ),\n+                          ],),\n+                         ),\n+             ),\n+\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.all(15),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719739647623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n       child: Column(\n       mainAxisAlignment: MainAxisAlignment.start,\n       children: [\n         Padding(\n-          padding: const EdgeInsets.all(15),\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n           child: \n                 InkWell(\n                   onTap: () {\n                    context.pop();\n@@ -424,433 +424,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.center,\n-                children: [\n-                \n-               \n-\n-                Text(\n-                      \"25 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-               \n-                ],\n-              ),\n-\n-             const SizedBox(\n-              height: 8,\n-             ),\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                 ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n-              ],\n-            ),\n-\n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-             Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.primary,\n-                      \n-                        ),\n-                       ),\n-\n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                              \"23 Dang Nepal , Ring Road\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-             InkWell(\n-              onTap: () {\n-             \n-              },\n-               child: Container(\n-                          width: double.maxFinite,\n-                          margin: const EdgeInsets.symmetric(horizontal: 20),\n-                          padding: const EdgeInsets.all(6),\n-                          decoration: BoxDecoration(\n-                            color: TColor.primary,\n-                          borderRadius: BorderRadius.circular(30),\n-                          ),\n-                          child: Stack(\n-                            alignment: Alignment.centerRight,\n-                            children: [\n-                            Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                          Text(\n-                                \"TAP TO ACCEPT\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w700,\n-                                  \n-                                ),\n-                                ),\n-                              ],\n-                            ),\n-               \n-                            Container(\n-                          height: 40,\n-                          width: 40,\n-                          decoration: BoxDecoration(\n-                            color: Colors.black12,\n-                          borderRadius: BorderRadius.circular(20),\n-                          ),\n-                          alignment: Alignment.center,\n-                          child:\n-               \n-                          Text(\n-                                \"15\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 14,\n-                                  fontWeight: FontWeight.w700,),\n-                                  \n-                                ),\n-                                ),\n-                          ],),\n-                         ),\n-             ),\n-\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.all(15),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(30),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719741243772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,27 +124,85 @@\n                  \n                   ),\n           child: Column(\n             children: [\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.center,\n+\n+         Row(\n+          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+          children: [\n+         IconButton(\n+          onPressed: () {\n+            setState(() {\n+              isOpen = !isOpen;\n+            });\n+          }, \n+          icon: Image.asset(\n+          isOpen ? \"assets/img/open_btn.png\" \n+                 : \"assets/img/close_btn.png\" , \n+            width: 15, \n+            height: 15,\n+            ),\n+            ),\n+\n+               Row(\n+                mainAxisSize: MainAxisSize.min,\n                 children: [\n-                \n-               \n+                    Text(\n+                      \"10 min \", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n \n-                Text(\n-                      \"25 min\", \n+\n+               const SizedBox(\n+                 width: 15,),\n+\n+             Image.asset(\n+              \"assets/img/ride_user_profile.png\",\n+            width: 15, \n+            height: 15,\n+            ),\n+\n+            const SizedBox( \n+              width: 15,),\n+\n+             Text(\n+                      \"1 min\", \n                       style: TextStyle(\n                         color: TColor.primaryText,\n                         fontSize: 25,\n                         fontWeight: FontWeight.w800,\n                       ),\n                     ),\n \n-               \n+      \n                 ],\n               ),\n \n+              \n+\n+              IconButton(\n+          onPressed: () {\n+           \n+          }, \n+          icon: Image.asset(\n+           \"assets/img/call.png\", \n+            width: 30, \n+            height: 30,\n+            ),),\n+           \n+               const SizedBox(\n+          width: 50,\n+          height: 50,\n+        ),\n+        ],\n+        ),\n+\n+\n+\n              const SizedBox(\n               height: 8,\n              ),\n             Row(\n"
                },
                {
                    "date": 1719741344015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,10 +160,10 @@\n                  width: 15,),\n \n              Image.asset(\n               \"assets/img/ride_user_profile.png\",\n-            width: 15, \n-            height: 15,\n+            width: 30, \n+            height: 30,\n             ),\n \n             const SizedBox( \n               width: 15,),\n"
                },
                {
                    "date": 1719741475143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n        \n \n         Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n+          padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 15),\n \n            decoration: const BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.only(\n"
                },
                {
                    "date": 1719741485564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n        \n \n         Container(\n-          padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 15),\n+          padding: const EdgeInsets.symmetric(horizontal: 15),\n \n            decoration: const BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.only(\n"
                },
                {
                    "date": 1719741494342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n \n        \n \n         Container(\n-          padding: const EdgeInsets.symmetric(horizontal: 15),\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n \n            decoration: const BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.only(\n"
                },
                {
                    "date": 1719741514022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,10 +111,10 @@\n \n            decoration: const BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n+                  topLeft: Radius.circular(15),\n+                  topRight: Radius.circular(15), ),\n                   boxShadow:  [\n                   BoxShadow(\n                     color: Colors.black12,\n                     blurRadius: 10,\n"
                },
                {
                    "date": 1719741521960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,10 +111,10 @@\n \n            decoration: const BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(15),\n-                  topRight: Radius.circular(15), ),\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n                   boxShadow:  [\n                   BoxShadow(\n                     color: Colors.black12,\n                     blurRadius: 10,\n"
                },
                {
                    "date": 1719741616127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,12 +192,9 @@\n             width: 30, \n             height: 30,\n             ),),\n            \n-               const SizedBox(\n-          width: 50,\n-          height: 50,\n-        ),\n+         \n         ],\n         ),\n \n \n"
                },
                {
                    "date": 1719741628773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,486 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+\n+         Row(\n+          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+          children: [\n+         IconButton(\n+          onPressed: () {\n+            setState(() {\n+              isOpen = !isOpen;\n+            });\n+          }, \n+          icon: Image.asset(\n+          isOpen ? \"assets/img/open_btn.png\" \n+                 : \"assets/img/close_btn.png\" , \n+            width: 15, \n+            height: 15,\n+            ),\n+            ),\n+\n+               Row(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                    Text(\n+                      \"10 min \", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+\n+               const SizedBox(\n+                 width: 15,),\n+\n+             Image.asset(\n+              \"assets/img/ride_user_profile.png\",\n+            width: 30, \n+            height: 30,\n+            ),\n+\n+            const SizedBox( \n+              width: 15,),\n+\n+             Text(\n+                      \"1 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+      \n+                ],\n+              ),\n+\n+              \n+\n+              IconButton(\n+          onPressed: () {\n+           \n+          }, \n+          icon: Image.asset(\n+           \"assets/img/call.png\", \n+            width: 30, \n+            height: 30,\n+            ),),\n+           \n+               const SizedBox(\n+          width: 50,\n+          height: 50,\n+        ),\n+        ],\n+        ),\n+\n+\n+\n+             const SizedBox(\n+              height: 8,\n+             ),\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: Text(\n+                        \"\\$12.50\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                 ),\n+                    Expanded(\n+                      child: Text(\n+                        \"4.5 KM\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                    ),\n+                     Expanded(\n+                       child: Padding(\n+                         padding: const EdgeInsets.symmetric(horizontal: 25, \n+                         vertical: 8),\n+                       \n+                         child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.center,\n+                           children: [\n+                            Image.asset\n+                            (\"assets/img/rate_tip.png\", \n+                            width: 15, \n+                            height: 15, \n+                            ),\n+                         \n+                            const SizedBox(width: 4,),\n+                            \n+                             Text(\n+                              \"3.5\", \n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 18,\n+                                \n+                              ),\n+                              ),\n+                           ],\n+                         ),\n+                       ),\n+                     ),\n+              ],\n+            ),\n+\n+            const SizedBox(\n+              height: 15,\n+            ),\n+\n+\n+             Padding(\n+                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                       child:\n+                        Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.primary,\n+                      \n+                        ),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Text(\n+                              \"23 Dang Nepal , Ring Road\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                                \n+                              ),\n+                              ),\n+                          \n+                        ],\n+                       \n+                     ),\n+              \n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+             InkWell(\n+              onTap: () {\n+             \n+              },\n+               child: Container(\n+                          width: double.maxFinite,\n+                          margin: const EdgeInsets.symmetric(horizontal: 20),\n+                          padding: const EdgeInsets.all(6),\n+                          decoration: BoxDecoration(\n+                            color: TColor.primary,\n+                          borderRadius: BorderRadius.circular(30),\n+                          ),\n+                          child: Stack(\n+                            alignment: Alignment.centerRight,\n+                            children: [\n+                            Row(\n+                              mainAxisAlignment: MainAxisAlignment.center,\n+                              children: [\n+                          Text(\n+                                \"TAP TO ACCEPT\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w700,\n+                                  \n+                                ),\n+                                ),\n+                              ],\n+                            ),\n+               \n+                            Container(\n+                          height: 40,\n+                          width: 40,\n+                          decoration: BoxDecoration(\n+                            color: Colors.black12,\n+                          borderRadius: BorderRadius.circular(20),\n+                          ),\n+                          alignment: Alignment.center,\n+                          child:\n+               \n+                          Text(\n+                                \"15\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 14,\n+                                  fontWeight: FontWeight.w700,),\n+                                  \n+                                ),\n+                                ),\n+                          ],),\n+                         ),\n+             ),\n+\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719741664362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,10 +160,10 @@\n                  width: 15,),\n \n              Image.asset(\n               \"assets/img/ride_user_profile.png\",\n-            width: 30, \n-            height: 30,\n+            width: 40, \n+            height: 40,\n             ),\n \n             const SizedBox( \n               width: 15,),\n@@ -482,488 +482,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-\n-         Row(\n-          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-          children: [\n-         IconButton(\n-          onPressed: () {\n-            setState(() {\n-              isOpen = !isOpen;\n-            });\n-          }, \n-          icon: Image.asset(\n-          isOpen ? \"assets/img/open_btn.png\" \n-                 : \"assets/img/close_btn.png\" , \n-            width: 15, \n-            height: 15,\n-            ),\n-            ),\n-\n-               Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                    Text(\n-                      \"10 min \", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-\n-               const SizedBox(\n-                 width: 15,),\n-\n-             Image.asset(\n-              \"assets/img/ride_user_profile.png\",\n-            width: 30, \n-            height: 30,\n-            ),\n-\n-            const SizedBox( \n-              width: 15,),\n-\n-             Text(\n-                      \"1 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-      \n-                ],\n-              ),\n-\n-              \n-\n-              IconButton(\n-          onPressed: () {\n-           \n-          }, \n-          icon: Image.asset(\n-           \"assets/img/call.png\", \n-            width: 30, \n-            height: 30,\n-            ),),\n-           \n-         \n-        ],\n-        ),\n-\n-\n-\n-             const SizedBox(\n-              height: 8,\n-             ),\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                 ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n-              ],\n-            ),\n-\n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-             Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.primary,\n-                      \n-                        ),\n-                       ),\n-\n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                              \"23 Dang Nepal , Ring Road\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-             InkWell(\n-              onTap: () {\n-             \n-              },\n-               child: Container(\n-                          width: double.maxFinite,\n-                          margin: const EdgeInsets.symmetric(horizontal: 20),\n-                          padding: const EdgeInsets.all(6),\n-                          decoration: BoxDecoration(\n-                            color: TColor.primary,\n-                          borderRadius: BorderRadius.circular(30),\n-                          ),\n-                          child: Stack(\n-                            alignment: Alignment.centerRight,\n-                            children: [\n-                            Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                          Text(\n-                                \"TAP TO ACCEPT\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w700,\n-                                  \n-                                ),\n-                                ),\n-                              ],\n-                            ),\n-               \n-                            Container(\n-                          height: 40,\n-                          width: 40,\n-                          decoration: BoxDecoration(\n-                            color: Colors.black12,\n-                          borderRadius: BorderRadius.circular(20),\n-                          ),\n-                          alignment: Alignment.center,\n-                          child:\n-               \n-                          Text(\n-                                \"15\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 14,\n-                                  fontWeight: FontWeight.w700,),\n-                                  \n-                                ),\n-                                ),\n-                          ],),\n-                         ),\n-             ),\n-\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719741693396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,10 +160,10 @@\n                  width: 15,),\n \n              Image.asset(\n               \"assets/img/ride_user_profile.png\",\n-            width: 40, \n-            height: 40,\n+            width: 35, \n+            height: 35,\n             ),\n \n             const SizedBox( \n               width: 15,),\n"
                },
                {
                    "date": 1719741772752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,483 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+\n+         Row(\n+          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+          children: [\n+         IconButton(\n+          onPressed: () {\n+            setState(() {\n+              isOpen = !isOpen;\n+            });\n+          }, \n+          icon: Image.asset(\n+          isOpen ? \"assets/img/open_btn.png\" \n+                 : \"assets/img/close_btn.png\" , \n+            width: 15, \n+            height: 15,\n+            ),\n+            ),\n+\n+               Row(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                    Text(\n+                      \"10 min \", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+\n+               const SizedBox(\n+                 width: 15,),\n+\n+             Image.asset(\n+              \"assets/img/ride_user_profile.png\",\n+            width: 35, \n+            height: 35,\n+            ),\n+\n+            const SizedBox( \n+              width: 15,),\n+\n+             Text(\n+                      \"1 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+      \n+                ],\n+              ),\n+\n+              \n+\n+              IconButton(\n+          onPressed: () {\n+           \n+          }, \n+          icon: Image.asset(\n+           \"assets/img/call.png\", \n+            width: 30, \n+            height: 30,\n+            ),),\n+           \n+           \n+        ],\n+        ),\n+\n+\n+\n+             const SizedBox(\n+              height: 8,\n+             ),\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: Text(\n+                        \"\\$12.50\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                 ),\n+                    Expanded(\n+                      child: Text(\n+                        \"4.5 KM\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                    ),\n+                     Expanded(\n+                       child: Padding(\n+                         padding: const EdgeInsets.symmetric(horizontal: 25, \n+                         vertical: 8),\n+                       \n+                         child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.center,\n+                           children: [\n+                            Image.asset\n+                            (\"assets/img/rate_tip.png\", \n+                            width: 15, \n+                            height: 15, \n+                            ),\n+                         \n+                            const SizedBox(width: 4,),\n+                            \n+                             Text(\n+                              \"3.5\", \n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 18,\n+                                \n+                              ),\n+                              ),\n+                           ],\n+                         ),\n+                       ),\n+                     ),\n+              ],\n+            ),\n+\n+            const SizedBox(\n+              height: 15,\n+            ),\n+\n+\n+             Padding(\n+                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                       child:\n+                        Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.primary,\n+                      \n+                        ),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Text(\n+                              \"23 Dang Nepal , Ring Road\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                                \n+                              ),\n+                              ),\n+                          \n+                        ],\n+                       \n+                     ),\n+              \n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+             InkWell(\n+              onTap: () {\n+             \n+              },\n+               child: Container(\n+                          width: double.maxFinite,\n+                          margin: const EdgeInsets.symmetric(horizontal: 20),\n+                          padding: const EdgeInsets.all(6),\n+                          decoration: BoxDecoration(\n+                            color: TColor.primary,\n+                          borderRadius: BorderRadius.circular(30),\n+                          ),\n+                          child: Stack(\n+                            alignment: Alignment.centerRight,\n+                            children: [\n+                            Row(\n+                              mainAxisAlignment: MainAxisAlignment.center,\n+                              children: [\n+                          Text(\n+                                \"TAP TO ACCEPT\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w700,\n+                                  \n+                                ),\n+                                ),\n+                              ],\n+                            ),\n+               \n+                            Container(\n+                          height: 40,\n+                          width: 40,\n+                          decoration: BoxDecoration(\n+                            color: Colors.black12,\n+                          borderRadius: BorderRadius.circular(20),\n+                          ),\n+                          alignment: Alignment.center,\n+                          child:\n+               \n+                          Text(\n+                                \"15\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 14,\n+                                  fontWeight: FontWeight.w700,),\n+                                  \n+                                ),\n+                                ),\n+                          ],),\n+                         ),\n+             ),\n+\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719741899571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,10 +196,10 @@\n            \n         ],\n         ),\n \n+        Divider(height: 0.5, endIndent: 20, indent: 20,),\n \n-\n              const SizedBox(\n               height: 8,\n              ),\n             Row(\n@@ -479,491 +479,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-\n-         Row(\n-          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-          children: [\n-         IconButton(\n-          onPressed: () {\n-            setState(() {\n-              isOpen = !isOpen;\n-            });\n-          }, \n-          icon: Image.asset(\n-          isOpen ? \"assets/img/open_btn.png\" \n-                 : \"assets/img/close_btn.png\" , \n-            width: 15, \n-            height: 15,\n-            ),\n-            ),\n-\n-               Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                    Text(\n-                      \"10 min \", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-\n-               const SizedBox(\n-                 width: 15,),\n-\n-             Image.asset(\n-              \"assets/img/ride_user_profile.png\",\n-            width: 35, \n-            height: 35,\n-            ),\n-\n-            const SizedBox( \n-              width: 15,),\n-\n-             Text(\n-                      \"1 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-      \n-                ],\n-              ),\n-\n-              \n-\n-              IconButton(\n-          onPressed: () {\n-           \n-          }, \n-          icon: Image.asset(\n-           \"assets/img/call.png\", \n-            width: 30, \n-            height: 30,\n-            ),),\n-           \n-               const SizedBox(\n-          width: 50,\n-          height: 50,\n-        ),\n-        ],\n-        ),\n-\n-\n-\n-             const SizedBox(\n-              height: 8,\n-             ),\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                 ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n-              ],\n-            ),\n-\n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-             Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.primary,\n-                      \n-                        ),\n-                       ),\n-\n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                              \"23 Dang Nepal , Ring Road\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-             InkWell(\n-              onTap: () {\n-             \n-              },\n-               child: Container(\n-                          width: double.maxFinite,\n-                          margin: const EdgeInsets.symmetric(horizontal: 20),\n-                          padding: const EdgeInsets.all(6),\n-                          decoration: BoxDecoration(\n-                            color: TColor.primary,\n-                          borderRadius: BorderRadius.circular(30),\n-                          ),\n-                          child: Stack(\n-                            alignment: Alignment.centerRight,\n-                            children: [\n-                            Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                          Text(\n-                                \"TAP TO ACCEPT\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w700,\n-                                  \n-                                ),\n-                                ),\n-                              ],\n-                            ),\n-               \n-                            Container(\n-                          height: 40,\n-                          width: 40,\n-                          decoration: BoxDecoration(\n-                            color: Colors.black12,\n-                          borderRadius: BorderRadius.circular(20),\n-                          ),\n-                          alignment: Alignment.center,\n-                          child:\n-               \n-                          Text(\n-                                \"15\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 14,\n-                                  fontWeight: FontWeight.w700,),\n-                                  \n-                                ),\n-                                ),\n-                          ],),\n-                         ),\n-             ),\n-\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719741961576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,482 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+\n+         Row(\n+          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+          children: [\n+         IconButton(\n+          onPressed: () {\n+            setState(() {\n+              isOpen = !isOpen;\n+            });\n+          }, \n+          icon: Image.asset(\n+          isOpen ? \"assets/img/open_btn.png\" \n+                 : \"assets/img/close_btn.png\" , \n+            width: 15, \n+            height: 15,\n+            ),\n+            ),\n+\n+               Row(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                    Text(\n+                      \"10 min \", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                      ),\n+                    ),\n+\n+\n+               const SizedBox(\n+                 width: 15,),\n+\n+             Image.asset(\n+              \"assets/img/ride_user_profile.png\",\n+            width: 35, \n+            height: 35,\n+            ),\n+\n+            const SizedBox( \n+              width: 15,),\n+\n+             Text(\n+                      \"1 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+      \n+                ],\n+              ),\n+\n+              \n+\n+              IconButton(\n+          onPressed: () {\n+           \n+          }, \n+          icon: Image.asset(\n+           \"assets/img/call.png\", \n+            width: 30, \n+            height: 30,\n+            ),),\n+           \n+           \n+        ],\n+        ),\n+\n+        Divider(height: 0.5, endIndent: 20, indent: 20,),\n+\n+             const SizedBox(\n+              height: 8,\n+             ),\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: Text(\n+                        \"\\$12.50\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                 ),\n+                    Expanded(\n+                      child: Text(\n+                        \"4.5 KM\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                    ),\n+                     Expanded(\n+                       child: Padding(\n+                         padding: const EdgeInsets.symmetric(horizontal: 25, \n+                         vertical: 8),\n+                       \n+                         child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.center,\n+                           children: [\n+                            Image.asset\n+                            (\"assets/img/rate_tip.png\", \n+                            width: 15, \n+                            height: 15, \n+                            ),\n+                         \n+                            const SizedBox(width: 4,),\n+                            \n+                             Text(\n+                              \"3.5\", \n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 18,\n+                                \n+                              ),\n+                              ),\n+                           ],\n+                         ),\n+                       ),\n+                     ),\n+              ],\n+            ),\n+\n+            const SizedBox(\n+              height: 15,\n+            ),\n+\n+\n+             Padding(\n+                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                       child:\n+                        Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.primary,\n+                      \n+                        ),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Text(\n+                              \"23 Dang Nepal , Ring Road\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                                \n+                              ),\n+                              ),\n+                          \n+                        ],\n+                       \n+                     ),\n+              \n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+             InkWell(\n+              onTap: () {\n+             \n+              },\n+               child: Container(\n+                          width: double.maxFinite,\n+                          margin: const EdgeInsets.symmetric(horizontal: 20),\n+                          padding: const EdgeInsets.all(6),\n+                          decoration: BoxDecoration(\n+                            color: TColor.primary,\n+                          borderRadius: BorderRadius.circular(30),\n+                          ),\n+                          child: Stack(\n+                            alignment: Alignment.centerRight,\n+                            children: [\n+                            Row(\n+                              mainAxisAlignment: MainAxisAlignment.center,\n+                              children: [\n+                          Text(\n+                                \"TAP TO ACCEPT\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w700,\n+                                  \n+                                ),\n+                                ),\n+                              ],\n+                            ),\n+               \n+                            Container(\n+                          height: 40,\n+                          width: 40,\n+                          decoration: BoxDecoration(\n+                            color: Colors.black12,\n+                          borderRadius: BorderRadius.circular(20),\n+                          ),\n+                          alignment: Alignment.center,\n+                          child:\n+               \n+                          Text(\n+                                \"15\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 14,\n+                                  fontWeight: FontWeight.w700,),\n+                                  \n+                                ),\n+                                ),\n+                          ],),\n+                         ),\n+             ),\n+\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719741972253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,9 @@\n                       \"10 min \", \n                       style: TextStyle(\n                         color: TColor.primaryText,\n                         fontSize: 25,\n+                        fontWeight: FontWeight.w600,\n                       ),\n                     ),\n \n \n@@ -478,488 +479,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-\n-         Row(\n-          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-          children: [\n-         IconButton(\n-          onPressed: () {\n-            setState(() {\n-              isOpen = !isOpen;\n-            });\n-          }, \n-          icon: Image.asset(\n-          isOpen ? \"assets/img/open_btn.png\" \n-                 : \"assets/img/close_btn.png\" , \n-            width: 15, \n-            height: 15,\n-            ),\n-            ),\n-\n-               Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                    Text(\n-                      \"10 min \", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-\n-               const SizedBox(\n-                 width: 15,),\n-\n-             Image.asset(\n-              \"assets/img/ride_user_profile.png\",\n-            width: 35, \n-            height: 35,\n-            ),\n-\n-            const SizedBox( \n-              width: 15,),\n-\n-             Text(\n-                      \"1 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-      \n-                ],\n-              ),\n-\n-              \n-\n-              IconButton(\n-          onPressed: () {\n-           \n-          }, \n-          icon: Image.asset(\n-           \"assets/img/call.png\", \n-            width: 30, \n-            height: 30,\n-            ),),\n-           \n-           \n-        ],\n-        ),\n-\n-        Divider(height: 0.5, endIndent: 20, indent: 20,),\n-\n-             const SizedBox(\n-              height: 8,\n-             ),\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                 ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n-              ],\n-            ),\n-\n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-             Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.primary,\n-                      \n-                        ),\n-                       ),\n-\n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                              \"23 Dang Nepal , Ring Road\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-             InkWell(\n-              onTap: () {\n-             \n-              },\n-               child: Container(\n-                          width: double.maxFinite,\n-                          margin: const EdgeInsets.symmetric(horizontal: 20),\n-                          padding: const EdgeInsets.all(6),\n-                          decoration: BoxDecoration(\n-                            color: TColor.primary,\n-                          borderRadius: BorderRadius.circular(30),\n-                          ),\n-                          child: Stack(\n-                            alignment: Alignment.centerRight,\n-                            children: [\n-                            Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                          Text(\n-                                \"TAP TO ACCEPT\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w700,\n-                                  \n-                                ),\n-                                ),\n-                              ],\n-                            ),\n-               \n-                            Container(\n-                          height: 40,\n-                          width: 40,\n-                          decoration: BoxDecoration(\n-                            color: Colors.black12,\n-                          borderRadius: BorderRadius.circular(20),\n-                          ),\n-                          alignment: Alignment.center,\n-                          child:\n-               \n-                          Text(\n-                                \"15\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 14,\n-                                  fontWeight: FontWeight.w700,),\n-                                  \n-                                ),\n-                                ),\n-                          ],),\n-                         ),\n-             ),\n-\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719742188744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,496 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+\n+         Row(\n+          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+          children: [\n+         IconButton(\n+          onPressed: () {\n+            setState(() {\n+              isOpen = !isOpen;\n+            });\n+          }, \n+          icon: Image.asset(\n+          isOpen ? \"assets/img/open_btn.png\" \n+                 : \"assets/img/close_btn.png\" , \n+            width: 15, \n+            height: 15,\n+            ),\n+            ),\n+\n+               Row(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                    Text(\n+                      \"10 min \", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+\n+               const SizedBox(\n+                 width: 15,),\n+\n+             Image.asset(\n+              \"assets/img/ride_user_profile.png\",\n+            width: 35, \n+            height: 35,\n+            ),\n+\n+            const SizedBox( \n+              width: 15,),\n+\n+             Text(\n+                      \"1 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 25,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+      \n+                ],\n+              ),\n+\n+              \n+\n+              IconButton(\n+          onPressed: () {\n+           \n+          }, \n+          icon: Image.asset(\n+           \"assets/img/call.png\", \n+            width: 30, \n+            height: 30,\n+            ),),\n+           \n+           \n+        ],\n+        ),\n+\n+                   Text(\n+                        \"Picking up Ram khatri\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+             const SizedBox(\n+              height: 8,\n+             ),\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: Text(\n+                        \"\\$12.50\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                 ),\n+                    Expanded(\n+                      child: Text(\n+                        \"4.5 KM\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                    ),\n+                     Expanded(\n+                       child: Padding(\n+                         padding: const EdgeInsets.symmetric(horizontal: 25, \n+                         vertical: 8),\n+                       \n+                         child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.center,\n+                           children: [\n+                            Image.asset\n+                            (\"assets/img/rate_tip.png\", \n+                            width: 15, \n+                            height: 15, \n+                            ),\n+                         \n+                            const SizedBox(width: 4,),\n+                            \n+                             Text(\n+                              \"3.5\", \n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 18,\n+                                \n+                              ),\n+                              ),\n+                           ],\n+                         ),\n+                       ),\n+                     ),\n+              ],\n+            ),\n+\n+            const SizedBox(\n+              height: 15,\n+            ),\n+\n+\n+             Padding(\n+                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                       child:\n+                        Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.primary,\n+                      \n+                        ),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Text(\n+                              \"23 Dang Nepal , Ring Road\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                                \n+                              ),\n+                              ),\n+                          \n+                        ],\n+                       \n+                     ),\n+              \n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+             InkWell(\n+              onTap: () {\n+             \n+              },\n+               child: Container(\n+                          width: double.maxFinite,\n+                          margin: const EdgeInsets.symmetric(horizontal: 20),\n+                          padding: const EdgeInsets.all(6),\n+                          decoration: BoxDecoration(\n+                            color: TColor.primary,\n+                          borderRadius: BorderRadius.circular(30),\n+                          ),\n+                          child: Stack(\n+                            alignment: Alignment.centerRight,\n+                            children: [\n+                            Row(\n+                              mainAxisAlignment: MainAxisAlignment.center,\n+                              children: [\n+                          Text(\n+                                \"TAP TO ACCEPT\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w700,\n+                                  \n+                                ),\n+                                ),\n+                              ],\n+                            ),\n+               \n+                            Container(\n+                          height: 40,\n+                          width: 40,\n+                          decoration: BoxDecoration(\n+                            color: Colors.black12,\n+                          borderRadius: BorderRadius.circular(20),\n+                          ),\n+                          alignment: Alignment.center,\n+                          child:\n+               \n+                          Text(\n+                                \"15\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 14,\n+                                  fontWeight: FontWeight.w700,),\n+                                  \n+                                ),\n+                                ),\n+                          ],),\n+                         ),\n+             ),\n+\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719742227715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n         ],\n         ),\n \n                    Text(\n-                        \"Picking up Ram khatri\", \n+                        \"Picking up Sita KC\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.secondaryText,\n                           fontSize: 18,\n@@ -492,488 +492,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-\n-         Row(\n-          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-          children: [\n-         IconButton(\n-          onPressed: () {\n-            setState(() {\n-              isOpen = !isOpen;\n-            });\n-          }, \n-          icon: Image.asset(\n-          isOpen ? \"assets/img/open_btn.png\" \n-                 : \"assets/img/close_btn.png\" , \n-            width: 15, \n-            height: 15,\n-            ),\n-            ),\n-\n-               Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                    Text(\n-                      \"10 min \", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w600,\n-                      ),\n-                    ),\n-\n-\n-               const SizedBox(\n-                 width: 15,),\n-\n-             Image.asset(\n-              \"assets/img/ride_user_profile.png\",\n-            width: 35, \n-            height: 35,\n-            ),\n-\n-            const SizedBox( \n-              width: 15,),\n-\n-             Text(\n-                      \"1 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-      \n-                ],\n-              ),\n-\n-              \n-\n-              IconButton(\n-          onPressed: () {\n-           \n-          }, \n-          icon: Image.asset(\n-           \"assets/img/call.png\", \n-            width: 30, \n-            height: 30,\n-            ),),\n-           \n-           \n-        ],\n-        ),\n-\n-        Divider(height: 0.5, endIndent: 20, indent: 20,),\n-\n-             const SizedBox(\n-              height: 8,\n-             ),\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                 ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n-              ],\n-            ),\n-\n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-             Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.primary,\n-                      \n-                        ),\n-                       ),\n-\n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                              \"23 Dang Nepal , Ring Road\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-             InkWell(\n-              onTap: () {\n-             \n-              },\n-               child: Container(\n-                          width: double.maxFinite,\n-                          margin: const EdgeInsets.symmetric(horizontal: 20),\n-                          padding: const EdgeInsets.all(6),\n-                          decoration: BoxDecoration(\n-                            color: TColor.primary,\n-                          borderRadius: BorderRadius.circular(30),\n-                          ),\n-                          child: Stack(\n-                            alignment: Alignment.centerRight,\n-                            children: [\n-                            Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                          Text(\n-                                \"TAP TO ACCEPT\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w700,\n-                                  \n-                                ),\n-                                ),\n-                              ],\n-                            ),\n-               \n-                            Container(\n-                          height: 40,\n-                          width: 40,\n-                          decoration: BoxDecoration(\n-                            color: Colors.black12,\n-                          borderRadius: BorderRadius.circular(20),\n-                          ),\n-                          alignment: Alignment.center,\n-                          child:\n-               \n-                          Text(\n-                                \"15\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 14,\n-                                  fontWeight: FontWeight.w700,),\n-                                  \n-                                ),\n-                                ),\n-                          ],),\n-                         ),\n-             ),\n-\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719742292096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,496 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+\n+         Row(\n+          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+          children: [\n+         IconButton(\n+          onPressed: () {\n+            setState(() {\n+              isOpen = !isOpen;\n+            });\n+          }, \n+          icon: Image.asset(\n+          isOpen ? \"assets/img/open_btn.png\" \n+                 : \"assets/img/close_btn.png\" , \n+            width: 15, \n+            height: 15,\n+            ),\n+            ),\n+\n+               Row(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                    Text(\n+                      \"10 min \", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 18,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+\n+               const SizedBox(\n+                 width: 15,),\n+\n+             Image.asset(\n+              \"assets/img/ride_user_profile.png\",\n+            width: 35, \n+            height: 35,\n+            ),\n+\n+            const SizedBox( \n+              width: 15,),\n+\n+             Text(\n+                      \"1 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 18,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+      \n+                ],\n+              ),\n+\n+              \n+\n+              IconButton(\n+          onPressed: () {\n+           \n+          }, \n+          icon: Image.asset(\n+           \"assets/img/call.png\", \n+            width: 30, \n+            height: 30,\n+            ),),\n+           \n+           \n+        ],\n+        ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+             const SizedBox(\n+              height: 8,\n+             ),\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: Text(\n+                        \"\\$12.50\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                 ),\n+                    Expanded(\n+                      child: Text(\n+                        \"4.5 KM\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                    ),\n+                     Expanded(\n+                       child: Padding(\n+                         padding: const EdgeInsets.symmetric(horizontal: 25, \n+                         vertical: 8),\n+                       \n+                         child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.center,\n+                           children: [\n+                            Image.asset\n+                            (\"assets/img/rate_tip.png\", \n+                            width: 15, \n+                            height: 15, \n+                            ),\n+                         \n+                            const SizedBox(width: 4,),\n+                            \n+                             Text(\n+                              \"3.5\", \n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 18,\n+                                \n+                              ),\n+                              ),\n+                           ],\n+                         ),\n+                       ),\n+                     ),\n+              ],\n+            ),\n+\n+            const SizedBox(\n+              height: 15,\n+            ),\n+\n+\n+             Padding(\n+                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                       child:\n+                        Row(\n+                        children: [\n+                       Container(\n+                        width: 10,\n+                        height: 10,\n+                        decoration: BoxDecoration(\n+                          color: TColor.primary,\n+                      \n+                        ),\n+                       ),\n+\n+                       const SizedBox(\n+                        width: 15,),\n+\n+                        Text(\n+                              \"23 Dang Nepal , Ring Road\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                                \n+                              ),\n+                              ),\n+                          \n+                        ],\n+                       \n+                     ),\n+              \n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+             InkWell(\n+              onTap: () {\n+             \n+              },\n+               child: Container(\n+                          width: double.maxFinite,\n+                          margin: const EdgeInsets.symmetric(horizontal: 20),\n+                          padding: const EdgeInsets.all(6),\n+                          decoration: BoxDecoration(\n+                            color: TColor.primary,\n+                          borderRadius: BorderRadius.circular(30),\n+                          ),\n+                          child: Stack(\n+                            alignment: Alignment.centerRight,\n+                            children: [\n+                            Row(\n+                              mainAxisAlignment: MainAxisAlignment.center,\n+                              children: [\n+                          Text(\n+                                \"TAP TO ACCEPT\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 17,\n+                                  fontWeight: FontWeight.w700,\n+                                  \n+                                ),\n+                                ),\n+                              ],\n+                            ),\n+               \n+                            Container(\n+                          height: 40,\n+                          width: 40,\n+                          decoration: BoxDecoration(\n+                            color: Colors.black12,\n+                          borderRadius: BorderRadius.circular(20),\n+                          ),\n+                          alignment: Alignment.center,\n+                          child:\n+               \n+                          Text(\n+                                \"15\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryTextW,\n+                                  fontSize: 14,\n+                                  fontWeight: FontWeight.w700,),\n+                                  \n+                                ),\n+                                ),\n+                          ],),\n+                         ),\n+             ),\n+\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719742438832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,505 +205,12 @@\n                           fontSize: 18,\n                           \n                         ),\n                       ),\n-\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-             const SizedBox(\n+            const SizedBox(\n               height: 8,\n              ),\n-            Row(\n-             \n-              children: [\n \n-                 Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                 ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n-              ],\n-            ),\n-\n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-             Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.primary,\n-                      \n-                        ),\n-                       ),\n-\n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                              \"23 Dang Nepal , Ring Road\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-             InkWell(\n-              onTap: () {\n-             \n-              },\n-               child: Container(\n-                          width: double.maxFinite,\n-                          margin: const EdgeInsets.symmetric(horizontal: 20),\n-                          padding: const EdgeInsets.all(6),\n-                          decoration: BoxDecoration(\n-                            color: TColor.primary,\n-                          borderRadius: BorderRadius.circular(30),\n-                          ),\n-                          child: Stack(\n-                            alignment: Alignment.centerRight,\n-                            children: [\n-                            Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                          Text(\n-                                \"TAP TO ACCEPT\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w700,\n-                                  \n-                                ),\n-                                ),\n-                              ],\n-                            ),\n-               \n-                            Container(\n-                          height: 40,\n-                          width: 40,\n-                          decoration: BoxDecoration(\n-                            color: Colors.black12,\n-                          borderRadius: BorderRadius.circular(20),\n-                          ),\n-                          alignment: Alignment.center,\n-                          child:\n-               \n-                          Text(\n-                                \"15\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 14,\n-                                  fontWeight: FontWeight.w700,),\n-                                  \n-                                ),\n-                                ),\n-                          ],),\n-                         ),\n-             ),\n-\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-\n-         Row(\n-          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-          children: [\n-         IconButton(\n-          onPressed: () {\n-            setState(() {\n-              isOpen = !isOpen;\n-            });\n-          }, \n-          icon: Image.asset(\n-          isOpen ? \"assets/img/open_btn.png\" \n-                 : \"assets/img/close_btn.png\" , \n-            width: 15, \n-            height: 15,\n-            ),\n-            ),\n-\n-               Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                    Text(\n-                      \"10 min \", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-\n-               const SizedBox(\n-                 width: 15,),\n-\n-             Image.asset(\n-              \"assets/img/ride_user_profile.png\",\n-            width: 35, \n-            height: 35,\n-            ),\n-\n-            const SizedBox( \n-              width: 15,),\n-\n-             Text(\n-                      \"1 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 25,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-      \n-                ],\n-              ),\n-\n-              \n-\n-              IconButton(\n-          onPressed: () {\n-           \n-          }, \n-          icon: Image.asset(\n-           \"assets/img/call.png\", \n-            width: 30, \n-            height: 30,\n-            ),),\n-           \n-           \n-        ],\n-        ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-\n        const Divider(\n         height: 0.5, \n         endIndent: 20, \n         indent: 20,),\n"
                },
                {
                    "date": 1719742461178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n                         \"Picking up Sita KC\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.secondaryText,\n-                          fontSize: 18,\n+                          fontSize: 16,\n                           \n                         ),\n                       ),\n             const SizedBox(\n"
                },
                {
                    "date": 1719742864975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import 'package:flutter/rendering.dart';\n import 'package:flutter/widgets.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n \n \n \n class RunRideView extends StatefulWidget {\n@@ -245,9 +246,10 @@\n                       ),\n                     ),\n                      Expanded(\n                        child: Padding(\n-                         padding: const EdgeInsets.symmetric(horizontal: 25, \n+                         padding: const EdgeInsets.symmetric(\n+                          horizontal: 25, \n                          vertical: 8),\n                        \n                          child: Row(\n                          mainAxisAlignment: MainAxisAlignment.center,\n@@ -279,97 +281,17 @@\n               height: 15,\n             ),\n \n \n-             Padding(\n-                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                       child:\n-                        Row(\n-                        children: [\n-                       Container(\n-                        width: 10,\n-                        height: 10,\n-                        decoration: BoxDecoration(\n-                          color: TColor.primary,\n-                      \n-                        ),\n-                       ),\n+          \n \n-                       const SizedBox(\n-                        width: 15,),\n-\n-                        Text(\n-                              \"23 Dang Nepal , Ring Road\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                                \n-                              ),\n-                              ),\n-                          \n-                        ],\n-                       \n-                     ),\n-              \n-            ),\n-\n              const SizedBox(\n               height: 15,\n             ),\n \n-             InkWell(\n-              onTap: () {\n-             \n-              },\n-               child: Container(\n-                          width: double.maxFinite,\n-                          margin: const EdgeInsets.symmetric(horizontal: 20),\n-                          padding: const EdgeInsets.all(6),\n-                          decoration: BoxDecoration(\n-                            color: TColor.primary,\n-                          borderRadius: BorderRadius.circular(30),\n-                          ),\n-                          child: Stack(\n-                            alignment: Alignment.centerRight,\n-                            children: [\n-                            Row(\n-                              mainAxisAlignment: MainAxisAlignment.center,\n-                              children: [\n-                          Text(\n-                                \"TAP TO ACCEPT\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 17,\n-                                  fontWeight: FontWeight.w700,\n-                                  \n-                                ),\n-                                ),\n-                              ],\n-                            ),\n-               \n-                            Container(\n-                          height: 40,\n-                          width: 40,\n-                          decoration: BoxDecoration(\n-                            color: Colors.black12,\n-                          borderRadius: BorderRadius.circular(20),\n-                          ),\n-                          alignment: Alignment.center,\n-                          child:\n-               \n-                          Text(\n-                                \"15\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryTextW,\n-                                  fontSize: 14,\n-                                  fontWeight: FontWeight.w700,),\n-                                  \n-                                ),\n-                                ),\n-                          ],),\n-                         ),\n-             ),\n+         RoundButton(title: \"ARRIVED\", onPressed: () {\n \n+         }),\n \n              const SizedBox(\n               height: 25,\n             ),\n"
                },
                {
                    "date": 1719742929736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,424 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+\n+         Row(\n+          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+          children: [\n+         IconButton(\n+          onPressed: () {\n+            setState(() {\n+              isOpen = !isOpen;\n+            });\n+          }, \n+          icon: Image.asset(\n+          isOpen ? \"assets/img/open_btn.png\" \n+                 : \"assets/img/close_btn.png\" , \n+            width: 15, \n+            height: 15,\n+            ),\n+            ),\n+\n+               Row(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                    Text(\n+                      \"10 min \", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 18,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+\n+               const SizedBox(\n+                 width: 15,),\n+\n+             Image.asset(\n+              \"assets/img/ride_user_profile.png\",\n+            width: 35, \n+            height: 35,\n+            ),\n+\n+            const SizedBox( \n+              width: 15,),\n+\n+             Text(\n+                      \"1 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 18,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+      \n+                ],\n+              ),\n+\n+              \n+\n+              IconButton(\n+          onPressed: () {\n+           \n+          }, \n+          icon: Image.asset(\n+           \"assets/img/call.png\", \n+            width: 30, \n+            height: 30,\n+            ),),\n+           \n+           \n+        ],\n+        ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+             const SizedBox(\n+              height: 8,\n+             ),\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: Text(\n+                        \"\\$12.50\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                 ),\n+                    Expanded(\n+                      child: Text(\n+                        \"4.5 KM\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+                    ),\n+                     Expanded(\n+                       child: Padding(\n+                         padding: const EdgeInsets.symmetric(\n+                          horizontal: 25, \n+                         vertical: 8),\n+                       \n+                         child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.center,\n+                           children: [\n+                            Image.asset\n+                            (\"assets/img/rate_tip.png\", \n+                            width: 15, \n+                            height: 15, \n+                            ),\n+                         \n+                            const SizedBox(width: 4,),\n+                            \n+                             Text(\n+                              \"3.5\", \n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 18,\n+                                \n+                              ),\n+                              ),\n+                           ],\n+                         ),\n+                       ),\n+                     ),\n+              ],\n+            ),\n+\n+            const SizedBox(\n+              height: 15,\n+            ),\n+\n+\n+          \n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719742982074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,15 +276,8 @@\n                      ),\n               ],\n             ),\n \n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-          \n-\n              const SizedBox(\n               height: 15,\n             ),\n \n@@ -420,426 +413,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-\n-         Row(\n-          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-          children: [\n-         IconButton(\n-          onPressed: () {\n-            setState(() {\n-              isOpen = !isOpen;\n-            });\n-          }, \n-          icon: Image.asset(\n-          isOpen ? \"assets/img/open_btn.png\" \n-                 : \"assets/img/close_btn.png\" , \n-            width: 15, \n-            height: 15,\n-            ),\n-            ),\n-\n-               Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                    Text(\n-                      \"10 min \", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 18,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-\n-               const SizedBox(\n-                 width: 15,),\n-\n-             Image.asset(\n-              \"assets/img/ride_user_profile.png\",\n-            width: 35, \n-            height: 35,\n-            ),\n-\n-            const SizedBox( \n-              width: 15,),\n-\n-             Text(\n-                      \"1 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 18,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-      \n-                ],\n-              ),\n-\n-              \n-\n-              IconButton(\n-          onPressed: () {\n-           \n-          }, \n-          icon: Image.asset(\n-           \"assets/img/call.png\", \n-            width: 30, \n-            height: 30,\n-            ),),\n-           \n-           \n-        ],\n-        ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-             const SizedBox(\n-              height: 8,\n-             ),\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                 ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(\n-                          horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n-              ],\n-            ),\n-\n-            const SizedBox(\n-              height: 15,\n-            ),\n-\n-\n-          \n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         RoundButton(title: \"ARRIVED\", onPressed: () {\n-\n-         }),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719744204206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import 'package:flutter/rendering.dart';\n import 'package:flutter/widgets.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n \n \n \n@@ -206,75 +207,54 @@\n                           fontSize: 16,\n                           \n                         ),\n                       ),\n+                      if(isOpen)\n             const SizedBox(\n               height: 8,\n              ),\n \n+        if(isOpen)\n        const Divider(\n         height: 0.5, \n         endIndent: 20, \n         indent: 20,),\n \n+           if(isOpen)\n              const SizedBox(\n               height: 8,\n              ),\n             Row(\n              \n               children: [\n \n                  Expanded(\n-                   child: Text(\n-                        \"\\$12.50\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n                  ),\n-                    Expanded(\n-                      child: Text(\n-                        \"4.5 KM\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-                    ),\n-                     Expanded(\n-                       child: Padding(\n-                         padding: const EdgeInsets.symmetric(\n-                          horizontal: 25, \n-                         vertical: 8),\n-                       \n-                         child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.center,\n-                           children: [\n-                            Image.asset\n-                            (\"assets/img/rate_tip.png\", \n-                            width: 15, \n-                            height: 15, \n-                            ),\n-                         \n-                            const SizedBox(width: 4,),\n-                            \n-                             Text(\n-                              \"3.5\", \n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 18,\n-                                \n-                              ),\n-                              ),\n-                           ],\n-                         ),\n-                       ),\n-                     ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/check_tick.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n               ],\n             ),\n \n              const SizedBox(\n"
                },
                {
                    "date": 1719744275437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,9 @@\n            }),\n          ),\n \n              const SizedBox(\n-              height: 25,\n+              height: 15,\n             ),\n             \n             ],\n           ),\n"
                },
                {
                    "date": 1719744296525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,9 @@\n            }),\n          ),\n \n              const SizedBox(\n-              height: 15,\n+              height: 25,\n             ),\n             \n             ],\n           ),\n"
                },
                {
                    "date": 1719744368199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,9 @@\n               ],\n             ),\n \n              const SizedBox(\n-              height: 15,\n+              height: 25,\n             ),\n \n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 20),\n"
                },
                {
                    "date": 1719744384956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,9 +220,9 @@\n         indent: 20,),\n \n            if(isOpen)\n              const SizedBox(\n-              height: 8,\n+              height: 15,\n              ),\n             Row(\n              \n               children: [\n@@ -257,9 +257,9 @@\n               ],\n             ),\n \n              const SizedBox(\n-              height: 25,\n+              height: 15,\n             ),\n \n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 20),\n"
                },
                {
                    "date": 1719744416630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,14 +215,14 @@\n \n         if(isOpen)\n        const Divider(\n         height: 0.5, \n-        endIndent: 20, \n+        endIndent: 10, \n         indent: 20,),\n \n            if(isOpen)\n              const SizedBox(\n-              height: 15,\n+              height: 8,\n              ),\n             Row(\n              \n               children: [\n"
                },
                {
                    "date": 1719744536674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,20 +207,20 @@\n                           fontSize: 16,\n                           \n                         ),\n                       ),\n-                      if(isOpen)\n+            if(isOpen)\n             const SizedBox(\n               height: 8,\n              ),\n \n         if(isOpen)\n        const Divider(\n         height: 0.5, \n-        endIndent: 10, \n+        endIndent: 20, \n         indent: 20,),\n \n-           if(isOpen)\n+         \n              const SizedBox(\n               height: 8,\n              ),\n             Row(\n"
                },
                {
                    "date": 1719744624139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,12 +218,13 @@\n         height: 0.5, \n         endIndent: 20, \n         indent: 20,),\n \n-         \n+           if(isOpen)\n              const SizedBox(\n               height: 8,\n              ),\n+             if(isOpen)\n             Row(\n              \n               children: [\n \n"
                },
                {
                    "date": 1719744764575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,398 @@\n+\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+       \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(20),\n+                  topRight: Radius.circular(20), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+\n+         Row(\n+          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+          children: [\n+         IconButton(\n+          onPressed: () {\n+            setState(() {\n+              isOpen = !isOpen;\n+            });\n+          }, \n+          icon: Image.asset(\n+          isOpen ? \"assets/img/open_btn.png\" \n+                 : \"assets/img/close_btn.png\" , \n+            width: 15, \n+            height: 15,\n+            ),\n+            ),\n+\n+               Row(\n+                mainAxisSize: MainAxisSize.min,\n+                children: [\n+                    Text(\n+                      \"10 min \", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 18,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+\n+               const SizedBox(\n+                 width: 15,),\n+\n+             Image.asset(\n+              \"assets/img/ride_user_profile.png\",\n+            width: 35, \n+            height: 35,\n+            ),\n+\n+            const SizedBox( \n+              width: 15,),\n+\n+             Text(\n+                      \"1 min\", \n+                      style: TextStyle(\n+                        color: TColor.primaryText,\n+                        fontSize: 18,\n+                        fontWeight: FontWeight.w800,\n+                      ),\n+                    ),\n+\n+      \n+                ],\n+              ),\n+\n+              \n+\n+              IconButton(\n+          onPressed: () {\n+           \n+          }, \n+          icon: Image.asset(\n+           \"assets/img/call.png\", \n+            width: 30, \n+            height: 30,\n+            ),),\n+           \n+           \n+        ],\n+        ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/check_tick.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719744774854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,406 +113,8 @@\n \n            decoration: const BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(20),\n-                  topRight: Radius.circular(20), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-\n-         Row(\n-          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-          children: [\n-         IconButton(\n-          onPressed: () {\n-            setState(() {\n-              isOpen = !isOpen;\n-            });\n-          }, \n-          icon: Image.asset(\n-          isOpen ? \"assets/img/open_btn.png\" \n-                 : \"assets/img/close_btn.png\" , \n-            width: 15, \n-            height: 15,\n-            ),\n-            ),\n-\n-               Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                    Text(\n-                      \"10 min \", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 18,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-\n-               const SizedBox(\n-                 width: 15,),\n-\n-             Image.asset(\n-              \"assets/img/ride_user_profile.png\",\n-            width: 35, \n-            height: 35,\n-            ),\n-\n-            const SizedBox( \n-              width: 15,),\n-\n-             Text(\n-                      \"1 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 18,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-      \n-                ],\n-              ),\n-\n-              \n-\n-              IconButton(\n-          onPressed: () {\n-           \n-          }, \n-          icon: Image.asset(\n-           \"assets/img/call.png\", \n-            width: 30, \n-            height: 30,\n-            ),),\n-           \n-           \n-        ],\n-        ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/check_tick.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-       \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n                   topLeft: Radius.circular(10),\n                   topRight: Radius.circular(10), ),\n                   boxShadow:  [\n                   BoxShadow(\n"
                },
                {
                    "date": 1719744843727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,11 +157,10 @@\n                       ),\n                     ),\n \n \n-               const SizedBox(\n-                 width: 15,),\n \n+\n              Image.asset(\n               \"assets/img/ride_user_profile.png\",\n             width: 35, \n             height: 35,\n"
                },
                {
                    "date": 1719744853217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,18 +157,17 @@\n                       ),\n                     ),\n \n \n+               const SizedBox(\n+                 width: 15,),\n \n-\n              Image.asset(\n               \"assets/img/ride_user_profile.png\",\n             width: 35, \n             height: 35,\n             ),\n \n-            const SizedBox( \n-              width: 15,),\n \n              Text(\n                       \"1 min\", \n                       style: TextStyle(\n"
                },
                {
                    "date": 1719745265618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,15 +159,17 @@\n \n \n                const SizedBox(\n                  width: 15,),\n-\n+            \n              Image.asset(\n               \"assets/img/ride_user_profile.png\",\n             width: 35, \n             height: 35,\n             ),\n \n+            const SizedBox( \n+              width: 15,),\n \n              Text(\n                       \"1 min\", \n                       style: TextStyle(\n"
                },
                {
                    "date": 1719745875648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,14 +104,10 @@\n     Column(\n \n       mainAxisAlignment: MainAxisAlignment.end,\n       children: [\n-\n-       \n-\n         Container(\n           padding: const EdgeInsets.symmetric(vertical: 15),\n-\n            decoration: const BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.only(\n                   topLeft: Radius.circular(10),\n@@ -126,9 +122,8 @@\n                  \n                   ),\n           child: Column(\n             children: [\n-\n          Row(\n           mainAxisAlignment: MainAxisAlignment.spaceBetween,\n           children: [\n          IconButton(\n"
                },
                {
                    "date": 1719746120082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,11 +281,9 @@\n         Padding(\n           padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n           child: \n                 InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n+                  \n                   child: Container(\n                               padding: const EdgeInsets.symmetric(\n                                 vertical: 15, horizontal: 25),\n                             \n"
                },
                {
                    "date": 1719746129802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,9 +281,11 @@\n         Padding(\n           padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n           child: \n                 InkWell(\n-                  \n+                  onTap: () {\n+                   context.pop();\n+                  },\n                   child: Container(\n                               padding: const EdgeInsets.symmetric(\n                                 vertical: 15, horizontal: 25),\n                             \n"
                },
                {
                    "date": 1719746262111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,78 +122,81 @@\n                  \n                   ),\n           child: Column(\n             children: [\n-         Row(\n-          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-          children: [\n-         IconButton(\n-          onPressed: () {\n-            setState(() {\n-              isOpen = !isOpen;\n-            });\n-          }, \n-          icon: Image.asset(\n-          isOpen ? \"assets/img/open_btn.png\" \n-                 : \"assets/img/close_btn.png\" , \n-            width: 15, \n-            height: 15,\n-            ),\n-            ),\n-\n-               Row(\n-                mainAxisSize: MainAxisSize.min,\n-                children: [\n-                    Text(\n-                      \"10 min \", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 18,\n-                        fontWeight: FontWeight.w800,\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n                       ),\n-                    ),\n-\n-\n-               const SizedBox(\n-                 width: 15,),\n-            \n-             Image.asset(\n-              \"assets/img/ride_user_profile.png\",\n-            width: 35, \n-            height: 35,\n-            ),\n-\n-            const SizedBox( \n-              width: 15,),\n-\n-             Text(\n-                      \"1 min\", \n-                      style: TextStyle(\n-                        color: TColor.primaryText,\n-                        fontSize: 18,\n-                        fontWeight: FontWeight.w800,\n-                      ),\n-                    ),\n-\n-      \n-                ],\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n               ),\n-\n-              \n-\n-              IconButton(\n-          onPressed: () {\n            \n-          }, \n-          icon: Image.asset(\n-           \"assets/img/call.png\", \n-            width: 30, \n-            height: 30,\n-            ),),\n+              const SizedBox( \n+                width: 15,),\n            \n+               Text(\n+                        \"1 min\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n            \n-        ],\n-        ),\n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n \n                    Text(\n                         \"Picking up Sita KC\", \n                         textAlign: TextAlign.center,\n"
                },
                {
                    "date": 1719746327095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n                 Expanded(\n                    child: \n                    IconTitleButton(\n                     title: \"Cancle Tip\", \n-                    icon: \"assets/img/check_tick.png\", \n+                    icon: \"assets/img/cancle_trip.png\", \n                     onPressed: () {\n \n                    }),\n                  ),\n"
                },
                {
                    "date": 1719746370586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n                 Expanded(\n                    child: \n                    IconTitleButton(\n                     title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancle_trip.png\", \n+                    icon: \"assets/img/cancel_trip.png\", \n                     onPressed: () {\n \n                    }),\n                  ),\n"
                },
                {
                    "date": 1719819772989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n \n \n+import 'dart:ui';\n+\n import 'package:flutter/cupertino.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter/rendering.dart';\n import 'package:flutter/widgets.dart';\n@@ -249,9 +251,80 @@\n                    IconTitleButton(\n                     title: \"Cancle Tip\", \n                     icon: \"assets/img/cancel_trip.png\", \n                     onPressed: () {\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        context: context, builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),),\n \n+                                    Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                                         Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 14,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 14,),\n+\n+                        RoundButton(title: \"YES, CANCLE\", \n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 14,),\n+\n+                         RoundButton(title: \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 14,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n                    }),\n                  ),\n               ],\n             ),\n"
                },
                {
                    "date": 1719819921298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -291,32 +291,32 @@\n                         ),\n                       ),\n \n                       const SizedBox(\n-                        height: 14,),\n+                        height: 15,),\n \n                         const Divider(),\n \n                          const SizedBox(\n-                        height: 14,),\n+                        height: 15,),\n \n                         RoundButton(title: \"YES, CANCLE\", \n                         type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n                        const SizedBox(\n-                        height: 14,),\n+                        height: 15,),\n \n                          RoundButton(title: \"NO\", \n                         type: RoundButtonType.boarded,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n                       const SizedBox(\n-                        height: 14,),\n+                        height: 15,),\n                             \n                             ],\n                                ),\n                                     ),\n"
                },
                {
                    "date": 1719820013773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,25 +298,26 @@\n \n                          const SizedBox(\n                         height: 15,),\n \n-                        RoundButton(title: \"YES, CANCLE\", \n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n                         type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n                        const SizedBox(\n                         height: 15,),\n \n-                         RoundButton(title: \"NO\", \n+                         RoundButton(title:\n+                          \"NO\", \n                         type: RoundButtonType.boarded,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n-                      const SizedBox(\n-                        height: 15,),\n+                     \n                             \n                             ],\n                                ),\n                                     ),\n"
                },
                {
                    "date": 1719820022964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,9 +315,10 @@\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n-                     \n+                      const SizedBox(\n+                        height: 15,),\n                             \n                             ],\n                                ),\n                                     ),\n"
                },
                {
                    "date": 1719820298704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,9 +281,9 @@\n                   ),\n           child: Column(\n             mainAxisSize: MainAxisSize.min,\n             children: [\n-                                         Text(\n+                       Text(\n                         \"Cancle Sita's trip\", \n                         style: TextStyle(\n                           color: TColor.primaryText,\n                           fontSize: 18,\n@@ -300,9 +300,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n+                        type: RoundButtonType.primary,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719820314383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.primary,\n+                        type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719820351747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,471 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"1 min\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        context: context, builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),),\n+\n+                                    Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719820367013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,476 +467,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"1 min\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        context: context, builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),),\n-\n-                                    Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719820508413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n+                        type: RoundButtonType.secondary,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719820531016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n+                        type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719820987246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n                     icon: \"assets/img/cancel_trip.png\", \n                     onPressed: () {\n                       showModalBottomSheet(\n                         backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n+                        barrierColor: Colors.red,\n                         context: context, builder: (context) {\n                           return Stack(\n                             alignment: Alignment.bottomCenter,\n                             children: [\n"
                },
                {
                    "date": 1719821001623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,9 @@\n                     icon: \"assets/img/cancel_trip.png\", \n                     onPressed: () {\n                       showModalBottomSheet(\n                         backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.red,\n+                        barrierColor: Colors.transparent,\n                         context: context, builder: (context) {\n                           return Stack(\n                             alignment: Alignment.bottomCenter,\n                             children: [\n"
                },
                {
                    "date": 1719821020552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,9 +252,9 @@\n                     title: \"Cancle Tip\", \n                     icon: \"assets/img/cancel_trip.png\", \n                     onPressed: () {\n                       showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n+                        backgroundColor: Colors.red,\n                         barrierColor: Colors.transparent,\n                         context: context, builder: (context) {\n                           return Stack(\n                             alignment: Alignment.bottomCenter,\n"
                },
                {
                    "date": 1719821033931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,9 +252,9 @@\n                     title: \"Cancle Tip\", \n                     icon: \"assets/img/cancel_trip.png\", \n                     onPressed: () {\n                       showModalBottomSheet(\n-                        backgroundColor: Colors.red,\n+                        backgroundColor: Colors.transparent,\n                         barrierColor: Colors.transparent,\n                         context: context, builder: (context) {\n                           return Stack(\n                             alignment: Alignment.bottomCenter,\n"
                },
                {
                    "date": 1719821051210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n \n                                     Container(\n           padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n            decoration: const BoxDecoration(\n-                  color: Colors.white,\n+                  color: Colors.red,\n                   borderRadius: BorderRadius.only(\n                   topLeft: Radius.circular(10),\n                   topRight: Radius.circular(10), ),\n                   boxShadow:  [\n"
                },
                {
                    "date": 1719821061017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,471 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"1 min\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        context: context, builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),),\n+\n+                                    Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719821072587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,471 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"1 min\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        context: context, builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),),\n+\n+                                    Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.red,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719821084226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,471 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"1 min\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        context: context, builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),),\n+\n+                                    Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719821113094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,1418 +467,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"1 min\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        context: context, builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),),\n-\n-                                    Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.red,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"1 min\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        context: context, builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),),\n-\n-                                    Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"1 min\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        context: context, builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),),\n-\n-                                    Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.red,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719821576306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,17 +254,18 @@\n                     onPressed: () {\n                       showModalBottomSheet(\n                         backgroundColor: Colors.transparent,\n                         barrierColor: Colors.transparent,\n-                        context: context, builder: (context) {\n+                        context: context, \n+                        builder: (context) {\n                           return Stack(\n                             alignment: Alignment.bottomCenter,\n                             children: [\n                               BackdropFilter(\n                                 filter: ImageFilter.blur(\n                                   sigmaX: 5, sigmaY: 5),),\n \n-                                    Container(\n+        Container(\n           padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n            decoration: const BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.only(\n@@ -295,11 +296,10 @@\n                         height: 15,),\n \n                         const Divider(),\n \n-                         const SizedBox(\n-                        height: 15,),\n \n+\n                         RoundButton(\n                           title: \"YES, CANCLE\", \n                         type: RoundButtonType.red,\n                         onPressed: () {\n"
                },
                {
                    "date": 1719821587916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -296,10 +296,11 @@\n                         height: 15,),\n \n                         const Divider(),\n \n+                         const SizedBox(\n+                        height: 15,),\n \n-\n                         RoundButton(\n                           title: \"YES, CANCLE\", \n                         type: RoundButtonType.red,\n                         onPressed: () {\n"
                },
                {
                    "date": 1719821986915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,472 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"1 min\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719822079490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,472 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+\n+  late MapController controller;\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"1 min\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719822194608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,480 +301,8 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"1 min\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n                         type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                         }),\n@@ -940,477 +468,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-\n-  late MapController controller;\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"1 min\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719823353700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,8 +251,9 @@\n                    IconTitleButton(\n                     title: \"Cancle Tip\", \n                     icon: \"assets/img/cancel_trip.png\", \n                     onPressed: () {\n+                      \n                       showModalBottomSheet(\n                         backgroundColor: Colors.transparent,\n                         barrierColor: Colors.transparent,\n                         context: context, \n"
                },
                {
                    "date": 1719823383005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n                    IconTitleButton(\n                     title: \"Cancle Tip\", \n                     icon: \"assets/img/cancel_trip.png\", \n                     onPressed: () {\n-                      \n+\n                       showModalBottomSheet(\n                         backgroundColor: Colors.transparent,\n                         barrierColor: Colors.transparent,\n                         context: context, \n@@ -312,9 +312,9 @@\n                         height: 15,),\n \n                          RoundButton(title:\n                           \"NO\", \n-                        type: RoundButtonType.boarded,\n+                        type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719823403325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,9 @@\n                         height: 15,),\n \n                          RoundButton(title:\n                           \"NO\", \n-                        type: RoundButtonType.red,\n+                        type: RoundButtonType.boarded,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719823417700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,9 +302,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n+                        type: RoundButtonType.primary,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719823486567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,9 +302,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.primary,\n+                        type: RoundButtonType.secondary,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719823645970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,11 @@\n                             alignment: Alignment.bottomCenter,\n                             children: [\n                               BackdropFilter(\n                                 filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),),\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black26,),\n+                                  ),\n \n         Container(\n           padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n            decoration: const BoxDecoration(\n"
                },
                {
                    "date": 1719823768860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,8 +255,9 @@\n \n                       showModalBottomSheet(\n                         backgroundColor: Colors.transparent,\n                         barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n                         context: context, \n                         builder: (context) {\n                           return Stack(\n                             alignment: Alignment.bottomCenter,\n"
                },
                {
                    "date": 1719823834269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,9 @@\n                             children: [\n                               BackdropFilter(\n                                 filter: ImageFilter.blur(\n                                   sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black26,),\n+                                  child: Container (color: Colors.black38,),\n                                   ),\n \n         Container(\n           padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n"
                },
                {
                    "date": 1719824574107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n+                        type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                         }),\n \n"
                },
                {
                    "date": 1719824926570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common_widget/icon_title_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n \n \n \n class RunRideView extends StatefulWidget {\n@@ -308,8 +309,9 @@\n                           title: \"YES, CANCLE\", \n                         type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n+                          context.push(const ReasonView() );\n                         }),\n \n                        const SizedBox(\n                         height: 15,),\n"
                },
                {
                    "date": 1719824953717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n+                        type: RoundButtonType.secondary,\n                         onPressed: () {\n                           context.pop();\n                           context.push(const ReasonView() );\n                         }),\n"
                },
                {
                    "date": 1719830305390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n+                        type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                           context.push(const ReasonView() );\n                         }),\n"
                },
                {
                    "date": 1719833125142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n+                        type: RoundButtonType.secondary,\n                         onPressed: () {\n                           context.pop();\n                           context.push(const ReasonView() );\n                         }),\n"
                },
                {
                    "date": 1719835387082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import 'package:flutter/material.dart';\n import 'package:flutter/rendering.dart';\n import 'package:flutter/widgets.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common_widget/icon_title_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n import 'package:taxi_driver/view/home/reason_view.dart';\n@@ -23,11 +24,20 @@\n \n }\n class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n   bool isOpen = true;\n+  int ridStatus = 0;\n \n+  //1 = Accepy ride\n+  //2 = waiting\n+  //3 = start\n+  //4 = complete\n+\n   late MapController controller;\n \n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n   @override\n void initState () {\n   super.initState();\n   controller = MapController(\n@@ -104,11 +114,87 @@\n         },  \n     ),\n \n     Column(\n-\n+      crossAxisAlignment: CrossAxisAlignment.end,\n       mainAxisAlignment: MainAxisAlignment.end,\n       children: [\n+\n+        if(ridStatus == 1)\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+              const SizedBox(width: 4,),\n+                      Text(\n+                        \"Waiting for rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+\n+            ],\n+          ),\n+     ),\n+\n         Container(\n           padding: const EdgeInsets.symmetric(vertical: 15),\n            decoration: const BoxDecoration(\n                   color: Colors.white,\n@@ -170,9 +256,9 @@\n               const SizedBox( \n                 width: 15,),\n            \n                Text(\n-                        \"1 min\", \n+                        \"0.5 mi\", \n                         style: TextStyle(\n                           color: TColor.primaryText,\n                           fontSize: 18,\n                           fontWeight: FontWeight.w800,\n"
                },
                {
                    "date": 1719836455769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,13 @@\n \n }\n class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n   bool isOpen = true;\n-  int ridStatus = 0;\n+  int rideStatus = 0;\n \n   //1 = Accepy ride\n-  //2 = waiting\n-  //3 = start\n-  //4 = complete\n+  //2 = start\n+  //3 = complete\n \n   late MapController controller;\n \n   //28.0398257, 82.4838780\n@@ -118,9 +117,9 @@\n       crossAxisAlignment: CrossAxisAlignment.end,\n       mainAxisAlignment: MainAxisAlignment.end,\n       children: [\n \n-        if(ridStatus == 1)\n+        if(rideStatus == 1  )\n         //Ride Arrived Status\n \n \n      Container(\n@@ -193,8 +192,83 @@\n             ],\n           ),\n      ),\n \n+       if(rideStatus == 2  )\n+        //Ride Started Status\n+\n+\n+      Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+              const SizedBox(width: 4,),\n+                      Text(\n+                        \"Waiting for rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+\n+            ],\n+          ),\n+     ),\n+\n         Container(\n           padding: const EdgeInsets.symmetric(vertical: 15),\n            decoration: const BoxDecoration(\n                   color: Colors.white,\n@@ -429,10 +503,27 @@\n             ),\n \n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: \"ARRIVED\", onPressed: () {\n+           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n+           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {\n            \n+         });\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {\n+           \n+         });\n+             }else{\n+              rideStatus = 3;\n+\n+             }\n+           \n            }),\n          ),\n \n              const SizedBox(\n"
                },
                {
                    "date": 1719836511717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,655 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+              const SizedBox(width: 4,),\n+                      Text(\n+                        \"Waiting for rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+\n+            ],\n+          ),\n+     ),\n+\n+       if(rideStatus == 2  )\n+        //Ride Started Status\n+\n+\n+      Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+              const SizedBox(width: 4,),\n+                      Text(\n+                        \"Arrived at dropoff\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+\n+            ],\n+          ),\n+     ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n+           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {\n+           \n+         });\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {\n+           \n+         });\n+             }else{\n+              rideStatus = 3;\n+\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719836542602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,19 +252,8 @@\n                                 fontSize: 16,\n                               ),\n                             ),\n \n-              const SizedBox(width: 4,),\n-                      Text(\n-                        \"Arrived at dropoff\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-\n             ],\n           ),\n      ),\n \n@@ -651,660 +640,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-              const SizedBox(width: 4,),\n-                      Text(\n-                        \"Waiting for rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-\n-            ],\n-          ),\n-     ),\n-\n-       if(rideStatus == 2  )\n-        //Ride Started Status\n-\n-\n-      Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-              const SizedBox(width: 4,),\n-                      Text(\n-                        \"Waiting for rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-\n-            ],\n-          ),\n-     ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n-           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {\n-           \n-         });\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {\n-           \n-         });\n-             }else{\n-              rideStatus = 3;\n-\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719836656917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n                                   minutes: 2,\n                                 ),\n                               ),\n                               onEnd: () {\n-                                print(\"Timer finished\");\n+                                print(\"Arrived at dropoff\");\n                               },\n                               timeTextStyle: TextStyle(\n                                 color: TColor.secondary,\n                                 fontWeight: FontWeight.w800,\n"
                },
                {
                    "date": 1719836881983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,633 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+            ],\n+          ),\n+     ),\n+\n+       if (rideStatus == 2  )\n+        //Ride Started Status\n+\n+\n+      Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Arrived at dropoff\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+            ],\n+          ),\n+     ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n+           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {\n+           \n+         });\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {\n+           \n+         });\n+             }else{\n+              rideStatus = 3;\n+\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837421052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,636 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+               ),\n+\n+\n+            ],\n+          ),\n+     ),\n+\n+       if (rideStatus == 2  )\n+        //Ride Started Status\n+\n+\n+      Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Arrived at dropoff\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+            ],\n+          ),\n+     ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n+           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {\n+           \n+         });\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {\n+           \n+         });\n+             }else{\n+              rideStatus = 3;\n+\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837509209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,637 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.center,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+               ),\n+\n+\n+            ],\n+          ),\n+     ),\n+\n+       if (rideStatus == 2  )\n+        //Ride Started Status\n+\n+\n+      Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Arrived at dropoff\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+            ],\n+          ),\n+     ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n+           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {\n+           \n+         });\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {\n+           \n+         });\n+             }else{\n+              rideStatus = 3;\n+\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837613327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n \n \n      Container(\n       margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n            decoration:  BoxDecoration(\n                   color: Colors.white,\n                   borderRadius: BorderRadius.circular(50),\n                   boxShadow: const [\n@@ -633,1918 +633,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-               ),\n-\n-\n-            ],\n-          ),\n-     ),\n-\n-       if (rideStatus == 2  )\n-        //Ride Started Status\n-\n-\n-      Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Arrived at dropoff\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-            ],\n-          ),\n-     ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n-           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {\n-           \n-         });\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {\n-           \n-         });\n-             }else{\n-              rideStatus = 3;\n-\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-            ],\n-          ),\n-     ),\n-\n-       if (rideStatus == 2  )\n-        //Ride Started Status\n-\n-\n-      Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Arrived at dropoff\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-            ],\n-          ),\n-     ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n-           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {\n-           \n-         });\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {\n-           \n-         });\n-             }else{\n-              rideStatus = 3;\n-\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-              const SizedBox(width: 4,),\n-                      Text(\n-                        \"Waiting for rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-\n-            ],\n-          ),\n-     ),\n-\n-       if(rideStatus == 2  )\n-        //Ride Started Status\n-\n-\n-      Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Arrived at dropoff\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-            ],\n-          ),\n-     ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n-           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {\n-           \n-         });\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {\n-           \n-         });\n-             }else{\n-              rideStatus = 3;\n-\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837651846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,639 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.center,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                          \n+                 ],\n+                 \n+               ),\n+                 Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+\n+            ],\n+          ),\n+     ),\n+\n+       if (rideStatus == 2  )\n+        //Ride Started Status\n+\n+\n+      Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Arrived at dropoff\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+            ],\n+          ),\n+     ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n+           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {\n+           \n+         });\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {\n+           \n+         });\n+             }else{\n+              rideStatus = 3;\n+\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837674162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,657 +169,20 @@\n                                   hoursDescription: \"\",\n                                   minutesDescription: \"\",\n                                   secondsDescription: \"\",\n                                 ),\n-                          \n-                 ],\n-                 \n-               ),\n-                 Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-\n-            ],\n-          ),\n-     ),\n-\n-       if (rideStatus == 2  )\n-        //Ride Started Status\n-\n-\n-      Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Arrived at dropoff\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n                             Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-            ],\n-          ),\n-     ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n-           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {\n-           \n-         });\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {\n-           \n-         });\n-             }else{\n-              rideStatus = 3;\n-\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.center,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n                               \"Waiting for rider\",\n                               textAlign: TextAlign.center,\n                               style: TextStyle(\n                                 color: TColor.secondaryText,\n                                 fontSize: 16,\n                               ),\n                             ),\n                  ],\n+                 \n                ),\n+               \n \n \n             ],\n           ),\n"
                },
                {
                    "date": 1719837712803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,639 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.center,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.justify,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+       if (rideStatus == 2  )\n+        //Ride Started Status\n+\n+\n+      Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Arrived at dropoff\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+\n+            ],\n+          ),\n+     ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"10 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n+           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {\n+           \n+         });\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {\n+           \n+         });\n+             }else{\n+              rideStatus = 3;\n+\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719837722536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,653 +171,14 @@\n                                   secondsDescription: \"\",\n                                 ),\n                             Text(\n                               \"Waiting for rider\",\n-                              textAlign: TextAlign.justify,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-       if (rideStatus == 2  )\n-        //Ride Started Status\n-\n-\n-      Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Arrived at dropoff\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n                               textAlign: TextAlign.center,\n                               style: TextStyle(\n                                 color: TColor.secondaryText,\n                                 fontSize: 16,\n                               ),\n                             ),\n-\n-            ],\n-          ),\n-     ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"10 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n-           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {\n-           \n-         });\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {\n-           \n-         });\n-             }else{\n-              rideStatus = 3;\n-\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.center,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n                  ],\n                  \n                ),\n                \n"
                },
                {
                    "date": 1719838251385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n             mainAxisSize: MainAxisSize.min,\n             children: [\n \n                Stack(\n-                alignment: Alignment.center,\n+                alignment: Alignment.bottomCenter,\n                  children: [\n                    TimerCountdown(\n                                   format: CountDownTimerFormat.minutesSeconds,\n                                   endTime: DateTime.now().add(\n"
                },
                {
                    "date": 1719838282464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,72 +187,10 @@\n             ],\n           ),\n      ),\n \n-       if (rideStatus == 2  )\n-        //Ride Started Status\n+     \n \n-\n-      Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Arrived at dropoff\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-\n-            ],\n-          ),\n-     ),\n-\n         Container(\n           padding: const EdgeInsets.symmetric(vertical: 15),\n            decoration: const BoxDecoration(\n                   color: Colors.white,\n"
                },
                {
                    "date": 1719838390435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n                  Row(\n                   mainAxisSize: MainAxisSize.min,\n                   children: [\n                       Text(\n-                        \"10 min \", \n+                        \"2 min \", \n                         style: TextStyle(\n                           color: TColor.primaryText,\n                           fontSize: 18,\n                           fontWeight: FontWeight.w800,\n"
                },
                {
                    "date": 1719838582047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,643 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n+           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {\n+           \n+         });\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {\n+           \n+         });\n+             }else{\n+              rideStatus = 3;\n+\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719838737319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,8 +186,9 @@\n \n             ],\n           ),\n      ),\n+     if (rideStatus == 2)\n \n      Container(\n       margin: const EdgeInsets.all(20),\n           padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n@@ -639,582 +640,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n-           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {\n-           \n-         });\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {\n-           \n-         });\n-             }else{\n-              rideStatus = 3;\n-\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839069402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,642 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else{}\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839618938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,666 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+              showDialog(context: context, builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    width: 300,\n+                    child: Column(\n+                      children: [\n+\n+                          Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          \n+                        ),\n+                      ),\n+\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839717618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -514,17 +514,18 @@\n                   shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n                   child: Container(\n                     width: 300,\n                     child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n                       children: [\n \n                           Text(\n                         \"Enter Toll Amount\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.primaryText,\n                           fontSize: 23,\n-                          \n+                          fontWeight: FontWeight.w600,\n                         ),\n                       ),\n \n                       ],\n@@ -662,1291 +663,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else{}\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(title: rideStatus == 0 ? \"ARRIVED\" :\n-           rideStatus ==1 ? \"START\" : \"COMPLETE\", onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {\n-           \n-         });\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {\n-           \n-         });\n-             }else{\n-              rideStatus = 3;\n-\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719839862506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,678 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+              showDialog(context: context, builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    width: 300,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 23,\n+                          \n+                        ),\n+                      ),\n+\n+\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719840741756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,726 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+              showDialog(context: context, builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: 300,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 23,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$250\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 16,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719840785015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -569,9 +569,9 @@\n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.primary,\n                           fontSize: 16,\n-                          fontWeight: FontWeight.w600,\n+                         \n                         ),\n                       ),),\n \n                        TextButton(onPressed: () {\n"
                },
                {
                    "date": 1719840801114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -581,9 +581,9 @@\n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.primary,\n                           fontSize: 16,\n-                          fontWeight: FontWeight.w600,\n+                          \n                         ),\n                       ),)\n                         ],\n                        )\n"
                },
                {
                    "date": 1719840979671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,727 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+              showDialog(context: context, builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 23,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$250\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 16,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719841019886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -723,2076 +723,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-              showDialog(context: context, builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: 300,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 23,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$250\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 16,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-              showDialog(context: context, builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    width: 300,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 23,\n-                          \n-                        ),\n-                      ),\n-\n-\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-              showDialog(context: context, builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    width: 300,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                          Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719841046012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -534,9 +534,9 @@\n                         \"Please enter toll amount\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.secondaryText,\n-                          fontSize: 23,\n+                          fontSize: 13,\n                           \n                         ),\n                       ),\n \n"
                },
                {
                    "date": 1719841073646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -534,9 +534,9 @@\n                         \"Please enter toll amount\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.secondaryText,\n-                          fontSize: 13,\n+                          fontSize: 16,\n                           \n                         ),\n                       ),\n \n"
                },
                {
                    "date": 1719841086777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,727 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+              showDialog(context: context, builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$250\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 16,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719841103108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -552,9 +552,9 @@\n               focusedBorder: InputBorder.none,\n               hintText: \"\\$250\",\n               hintStyle: TextStyle(\n                 color: TColor.secondaryText, \n-                fontSize: 16,\n+                fontSize: 25,\n                 ),\n             ),\n           ),\n \n@@ -723,732 +723,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-              showDialog(context: context, builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$250\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 16,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719841116434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -552,9 +552,9 @@\n               focusedBorder: InputBorder.none,\n               hintText: \"\\$250\",\n               hintStyle: TextStyle(\n                 color: TColor.secondaryText, \n-                fontSize: 25,\n+                fontSize: 20,\n                 ),\n             ),\n           ),\n \n"
                },
                {
                    "date": 1719841349660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,730 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+              showDialog(\n+                context: context, \n+                barrierColor: Color(0xff32384D),\n+                builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$250\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 20,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719841384846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -510,9 +510,9 @@\n          setState(() {});\n              }else if (rideStatus == 2) {\n               showDialog(\n                 context: context, \n-                barrierColor: Color(0xff32384D),\n+                barrierColor: Color.fromARGB(255, 5, 39, 159),\n                 builder: (context) {\n                 return Dialog(\n                   shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n                   child: Container(\n@@ -726,732 +726,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-              showDialog(context: context, builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$250\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719841393104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -510,9 +510,9 @@\n          setState(() {});\n              }else if (rideStatus == 2) {\n               showDialog(\n                 context: context, \n-                barrierColor: Color.fromARGB(255, 5, 39, 159),\n+                barrierColor: Color(0xff32384D),\n                 builder: (context) {\n                 return Dialog(\n                   shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n                   child: Container(\n"
                },
                {
                    "date": 1719841419793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -510,9 +510,9 @@\n          setState(() {});\n              }else if (rideStatus == 2) {\n               showDialog(\n                 context: context, \n-                barrierColor: Color(0xff32384D),\n+                barrierColor: const Color(0xff32384D),\n                 builder: (context) {\n                 return Dialog(\n                   shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n                   child: Container(\n"
                },
                {
                    "date": 1719903125707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n }\n class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n   bool isOpen = true;\n   int rideStatus = 0;\n+  bool isCompleteRide = false;\n \n   //1 = Accepy ride\n   //2 = start\n   //3 = complete\n@@ -112,8 +113,10 @@\n            print(\"GeoPointClicked location :$myLocation\");\n         },  \n     ),\n \n+if(!isCompleteRide)\n+\n     Column(\n       crossAxisAlignment: CrossAxisAlignment.end,\n       mainAxisAlignment: MainAxisAlignment.end,\n       children: [\n@@ -608,8 +611,346 @@\n             ],\n           ),\n         )\n       ],\n+    )\n+    \n+else\n+ Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.center,\n+            children: [\n+          \n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"How was your rider?\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+        \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () {\n+\n+                      showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+              showDialog(\n+                context: context, \n+                barrierColor: const Color(0xff32384D),\n+                builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$250\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 20,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n     ),\n     \n     SafeArea(\n       child: Column(\n"
                },
                {
                    "date": 1719903444620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -642,53 +642,17 @@\n           child: Column(\n             children: [\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.center,\n-            children: [\n-          \n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"How was your rider?\", \n+           child: Text(\n+                        \"How was your rider\", \n+                        textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.primaryText,\n                           fontSize: 18,\n+                          \n                         ),\n                       ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-        \n-                   ],\n-                   ),\n          ),\n \n                    Text(\n                         \"Picking up Sita KC\", \n"
                },
                {
                    "date": 1719903613271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -872,8 +872,12 @@\n                         mainAxisAlignment: MainAxisAlignment.end,\n                         children: [\n                           TextButton(onPressed: () {\n                           context.pop();\n+\n+                          setState(() {\n+                            isCompleteRide = true;\n+                          });\n                           }, child:  Text(\n                         \"CANCLE\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n@@ -884,8 +888,10 @@\n                       ),),\n \n                        TextButton(onPressed: () {\n                           context.pop();\n+\n+                          isCompleteRide = true;\n                           }, child:  Text(\n                         \"DONE\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n"
                },
                {
                    "date": 1719903993283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -654,262 +654,30 @@\n                       ),\n          ),\n \n                    Text(\n-                        \"Picking up Sita KC\", \n+                        \"Sita KC\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n                           \n                         ),\n                       ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n+          \n              const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n               height: 15,\n             ),\n \n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 20),\n            child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n+            title:\"RATE RIDER\",\n            onPressed: () {\n              \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-              showDialog(\n-                context: context, \n-                barrierColor: const Color(0xff32384D),\n-                builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$250\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-\n-                          setState(() {\n-                            isCompleteRide = true;\n-                          });\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                          context.pop();\n-\n-                          isCompleteRide = true;\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n            \n+             \n+           \n            }),\n          ),\n \n              const SizedBox(\n"
                },
                {
                    "date": 1719904709644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,11 +403,10 @@\n                    child: \n                    IconTitleButton(\n                     title: \"Cancle Tip\", \n                     icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () {\n-\n-                      showModalBottomSheet(\n+                    onPressed: () async {\n+                    await  showModalBottomSheet(\n                         backgroundColor: Colors.transparent,\n                         barrierColor: Colors.transparent,\n                         isScrollControlled: true,\n                         context: context, \n@@ -501,9 +500,9 @@\n             ? \"ARRIVED\" :\n            rideStatus ==1 \n            ? \"START\" : \n            \"COMPLETE\", \n-           onPressed: () {\n+           onPressed: () async {\n              \n              if (rideStatus == 0) {\n               rideStatus = 1;\n               setState(() {});\n@@ -511,9 +510,9 @@\n              }else if (rideStatus == 1) {\n               rideStatus = 2;\n          setState(() {});\n              }else if (rideStatus == 2) {\n-              showDialog(\n+             await showDialog(\n                 context: context, \n                 barrierColor: const Color(0xff32384D),\n                 builder: (context) {\n                 return Dialog(\n@@ -581,8 +580,11 @@\n                         ),\n                       ),),\n \n                        TextButton(onPressed: () {\n+                        setState(() {\n+                          isCompleteRide = true;\n+                        });\n                           context.pop();\n                           }, child:  Text(\n                         \"DONE\", \n                         textAlign: TextAlign.center,\n"
                },
                {
                    "date": 1719904943906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,832 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+  bool isCompleteRide = false;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+if(!isCompleteRide)\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () async {\n+                    await  showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () async {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+             await showDialog(\n+                context: context, \n+                barrierColor: const Color(0xff32384D),\n+                builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$250\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 20,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                        setState(() {\n+                          isCompleteRide = true;\n+                        });\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    )\n+    \n+else\n+ Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Text(\n+                        \"How was your rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+         ),\n+\n+                   Text(\n+                        \"Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          \n+                        ),\n+                      ),\n+          \n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+            RatingBar.builder(\n+   initialRating: 3,\n+   minRating: 1,\n+   direction: Axis.horizontal,\n+   allowHalfRating: true,\n+   itemCount: 5,\n+   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n+   itemBuilder: (context, _) => Icon(\n+     Icons.star,\n+     color: Colors.amber,\n+   ),\n+   onRatingUpdate: (rating) {\n+     print(rating);\n+   },\n+),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title:\"RATE RIDER\",\n+           onPressed: () {\n+             \n+           \n+             \n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719905064337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -643,8 +643,11 @@\n                  \n                   ),\n           child: Column(\n             children: [\n+          const SizedBox(\n+              height: 15,\n+            ),\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 15),\n            child: Text(\n                         \"How was your rider\", \n@@ -656,8 +659,12 @@\n                         ),\n                       ),\n          ),\n \n+          const SizedBox(\n+              height: 15,\n+            ),\n+\n                    Text(\n                         \"Sita KC\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n@@ -828,816 +835,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-  bool isCompleteRide = false;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-if(!isCompleteRide)\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () async {\n-                    await  showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () async {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-             await showDialog(\n-                context: context, \n-                barrierColor: const Color(0xff32384D),\n-                builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$250\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                        setState(() {\n-                          isCompleteRide = true;\n-                        });\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    )\n-    \n-else\n- Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Text(\n-                        \"How was your rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-         ),\n-\n-                   Text(\n-                        \"Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          \n-                        ),\n-                      ),\n-          \n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title:\"RATE RIDER\",\n-           onPressed: () {\n-             \n-           \n-             \n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719905118092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -669,8 +669,9 @@\n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.primaryText,\n                           fontSize: 25,\n+                          fontWeight: FontWeight.w800\n                           \n                         ),\n                       ),\n           \n"
                },
                {
                    "date": 1719905208287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,840 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+  bool isCompleteRide = false;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+if(!isCompleteRide)\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () async {\n+                    await  showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () async {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+             await showDialog(\n+                context: context, \n+                barrierColor: const Color(0xff32384D),\n+                builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$250\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 20,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                        setState(() {\n+                          isCompleteRide = true;\n+                        });\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    )\n+    \n+else\n+ Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+          const SizedBox(\n+              height: 15,\n+            ),\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Text(\n+                        \"How was your rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+         ),\n+\n+          const SizedBox(\n+              height: 15,\n+            ),\n+\n+                   Text(\n+                        \"Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                          \n+                        ),\n+                      ),\n+          \n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+            RatingBar.builder(\n+   initialRating: 3,\n+   minRating: 1,\n+   direction: Axis.horizontal,\n+   allowHalfRating: true,\n+   itemCount: 5,\n+   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n+   itemBuilder: (context, _) => Icon(\n+     Icons.star,\n+     color: Colors.amber,\n+   ),\n+   onRatingUpdate: (rating) {\n+     print(rating);\n+   },\n+),\n+\n+             const SizedBox(\n+              height: 30,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title:\"RATE RIDER\",\n+           onPressed: () {\n+             \n+           \n+             \n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719905239107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -675,9 +675,9 @@\n                         ),\n                       ),\n           \n              const SizedBox(\n-              height: 15,\n+              height: 8,\n             ),\n \n             RatingBar.builder(\n    initialRating: 3,\n@@ -836,845 +836,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-  bool isCompleteRide = false;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-if(!isCompleteRide)\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () async {\n-                    await  showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () async {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-             await showDialog(\n-                context: context, \n-                barrierColor: const Color(0xff32384D),\n-                builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$250\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                        setState(() {\n-                          isCompleteRide = true;\n-                        });\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    )\n-    \n-else\n- Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-          const SizedBox(\n-              height: 15,\n-            ),\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Text(\n-                        \"How was your rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-         ),\n-\n-          const SizedBox(\n-              height: 15,\n-            ),\n-\n-                   Text(\n-                        \"Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800\n-                          \n-                        ),\n-                      ),\n-          \n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-            RatingBar.builder(\n-   initialRating: 3,\n-   minRating: 1,\n-   direction: Axis.horizontal,\n-   allowHalfRating: true,\n-   itemCount: 5,\n-   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n-   itemBuilder: (context, _) => Icon(\n-     Icons.star,\n-     color: Colors.amber,\n-   ),\n-   onRatingUpdate: (rating) {\n-     print(rating);\n-   },\n-),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title:\"RATE RIDER\",\n-           onPressed: () {\n-             \n-           \n-             \n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719909699078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common_widget/icon_title_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n import 'package:taxi_driver/view/home/reason_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n \n \n \n class RunRideView extends StatefulWidget {\n@@ -704,9 +705,9 @@\n            child: RoundButton(\n             title:\"RATE RIDER\",\n            onPressed: () {\n              \n-           \n+           context.push(const  TipDetailView() );\n              \n            \n            }),\n          ),\n"
                },
                {
                    "date": 1719915692650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,841 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+  bool isCompleteRide = false;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+if(!isCompleteRide)\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () async {\n+                    await  showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () async {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+             await showDialog(\n+                context: context, \n+                barrierColor: const Color(0xff32384D),\n+                builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$250\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 20,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                        setState(() {\n+                          isCompleteRide = true;\n+                        });\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    )\n+    \n+else\n+ Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+          const SizedBox(\n+              height: 15,\n+            ),\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Text(\n+                        \"How was your rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+         ),\n+\n+          const SizedBox(\n+              height: 15,\n+            ),\n+\n+                   Text(\n+                        \"Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                          \n+                        ),\n+                      ),\n+          \n+             const SizedBox(\n+              height: 8,\n+            ),\n+\n+            RatingBar.builder(\n+   initialRating: 3,\n+   minRating: 1,\n+   direction: Axis.horizontal,\n+   allowHalfRating: true,\n+   itemCount: 5,\n+   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n+   itemBuilder: (context, _) => Icon(\n+     Icons.star,\n+     color: Colors.amber,\n+   ),\n+   onRatingUpdate: (rating) {\n+     print(rating);\n+   },\n+),\n+\n+             const SizedBox(\n+              height: 30,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title:\"RATE RIDER\",\n+           onPressed: () {\n+             \n+           context.push(const  TipDetailView() );\n+             \n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719922993431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,841 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+  bool isCompleteRide = false;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+if(!isCompleteRide)\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               Image.asset(\n+                \"assets/img/ride_user_profile.png\",\n+              width: 35, \n+              height: 35,\n+              ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () async {\n+                    await  showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Sita's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.secondary,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () async {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+             await showDialog(\n+                context: context, \n+                barrierColor: const Color(0xff32384D),\n+                builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$219.76\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 20,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                        setState(() {\n+                          isCompleteRide = true;\n+                        });\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    )\n+    \n+else\n+ Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+          const SizedBox(\n+              height: 15,\n+            ),\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Text(\n+                        \"How was your rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+         ),\n+\n+          const SizedBox(\n+              height: 15,\n+            ),\n+\n+                   Text(\n+                        \"Sita KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                          \n+                        ),\n+                      ),\n+          \n+             const SizedBox(\n+              height: 8,\n+            ),\n+\n+            RatingBar.builder(\n+   initialRating: 3,\n+   minRating: 1,\n+   direction: Axis.horizontal,\n+   allowHalfRating: true,\n+   itemCount: 5,\n+   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n+   itemBuilder: (context, _) => Icon(\n+     Icons.star,\n+     color: Colors.amber,\n+   ),\n+   onRatingUpdate: (rating) {\n+     print(rating);\n+   },\n+),\n+\n+             const SizedBox(\n+              height: 30,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title:\"RATE RIDER\",\n+           onPressed: () {\n+             \n+           context.push(const  TipDetailView() );\n+             \n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719930288475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -679,16 +679,16 @@\n              const SizedBox(\n               height: 8,\n             ),\n \n-            RatingBar.builder(\n+  RatingBar.builder(\n    initialRating: 3,\n    minRating: 1,\n    direction: Axis.horizontal,\n    allowHalfRating: true,\n    itemCount: 5,\n    itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n-   itemBuilder: (context, _) => Icon(\n+   itemBuilder: (context, _) => const Icon(\n      Icons.star,\n      color: Colors.amber,\n    ),\n    onRatingUpdate: (rating) {\n"
                },
                {
                    "date": 1720001848085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -837,1687 +837,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-  bool isCompleteRide = false;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-if(!isCompleteRide)\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () async {\n-                    await  showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () async {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-             await showDialog(\n-                context: context, \n-                barrierColor: const Color(0xff32384D),\n-                builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$250\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                        setState(() {\n-                          isCompleteRide = true;\n-                        });\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    )\n-    \n-else\n- Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-          const SizedBox(\n-              height: 15,\n-            ),\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Text(\n-                        \"How was your rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-         ),\n-\n-          const SizedBox(\n-              height: 15,\n-            ),\n-\n-                   Text(\n-                        \"Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                          \n-                        ),\n-                      ),\n-          \n-             const SizedBox(\n-              height: 8,\n-            ),\n-\n-            RatingBar.builder(\n-   initialRating: 3,\n-   minRating: 1,\n-   direction: Axis.horizontal,\n-   allowHalfRating: true,\n-   itemCount: 5,\n-   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n-   itemBuilder: (context, _) => Icon(\n-     Icons.star,\n-     color: Colors.amber,\n-   ),\n-   onRatingUpdate: (rating) {\n-     print(rating);\n-   },\n-),\n-\n-             const SizedBox(\n-              height: 30,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title:\"RATE RIDER\",\n-           onPressed: () {\n-             \n-           context.push(const  TipDetailView() );\n-             \n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}\n-\n-\n-import 'dart:ui';\n-\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-  bool isCompleteRide = false;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-if(!isCompleteRide)\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () async {\n-                    await  showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Sita's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () async {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-             await showDialog(\n-                context: context, \n-                barrierColor: const Color(0xff32384D),\n-                builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$250\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                        setState(() {\n-                          isCompleteRide = true;\n-                        });\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    )\n-    \n-else\n- Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-          const SizedBox(\n-              height: 15,\n-            ),\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Text(\n-                        \"How was your rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-         ),\n-\n-          const SizedBox(\n-              height: 15,\n-            ),\n-\n-                   Text(\n-                        \"Sita KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                          \n-                        ),\n-                      ),\n-          \n-             const SizedBox(\n-              height: 8,\n-            ),\n-\n-            RatingBar.builder(\n-   initialRating: 3,\n-   minRating: 1,\n-   direction: Axis.horizontal,\n-   allowHalfRating: true,\n-   itemCount: 5,\n-   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n-   itemBuilder: (context, _) => Icon(\n-     Icons.star,\n-     color: Colors.amber,\n-   ),\n-   onRatingUpdate: (rating) {\n-     print(rating);\n-   },\n-),\n-\n-             const SizedBox(\n-              height: 30,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title:\"RATE RIDER\",\n-           onPressed: () {\n-             \n-           context.push(const  TipDetailView() );\n-             \n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720012007151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -556,9 +556,9 @@\n                 ),\n             decoration: InputDecoration(\n               enabledBorder: InputBorder.none,\n               focusedBorder: InputBorder.none,\n-              hintText: \"\\$219.76\",\n+              hintText: \"\\$154.57\",\n               hintStyle: TextStyle(\n                 color: TColor.secondaryText, \n                 fontSize: 20,\n                 ),\n"
                },
                {
                    "date": 1722743544056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,1312 @@\n \n \n import 'dart:ui';\n \n+import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/cupertino.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter/rendering.dart';\n import 'package:flutter/widgets.dart';\n import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n import 'package:taxi_driver/common_widget/icon_title_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n import 'package:taxi_driver/view/home/reason_view.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n import 'package:taxi_driver/view/home/tip_detail_view.dart';\n \n \n \n+\n+\n class RunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const RunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  double ratingVal = 5.0;\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n+    }\n+\n+    var startLocation = LocationHelper.shared().lastLocation;\n+\n+    if (startLocation == null) {\n+      return;\n+    }\n+\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n+\n+    if (endLocation == null) {\n+      return;\n+    }\n+    LocationHelper.shared().stopRideLocationSave();\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"Pickup Up \";\n+      case 3:\n+        return \"Waiting For \";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+}\n+\n+/*class RunRideView extends StatefulWidget {\n   const RunRideView({super.key});\n \n \n   @override\n@@ -314,13 +1602,16 @@\n            \n                  const SizedBox(\n                    width: 15,),\n               \n-               Image.asset(\n-                \"assets/img/ride_user_profile.png\",\n-              width: 35, \n-              height: 35,\n-              ),\n+               ClipRRect(\n+                 borderRadius: BorderRadius.circular(40),\n+                 child: Image.asset(\n+                  \"assets/img/ride_user_profile.png\",\n+                               width: 35, \n+                               height: 35,\n+                               ),\n+               ),\n            \n               const SizedBox( \n                 width: 15,),\n            \n@@ -354,9 +1645,9 @@\n                    ),\n          ),\n \n                    Text(\n-                        \"Picking up Sita KC\", \n+                        \"Picking up Jeevan KC\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.secondaryText,\n                           fontSize: 16,\n@@ -441,9 +1732,9 @@\n           child: Column(\n             mainAxisSize: MainAxisSize.min,\n             children: [\n                        Text(\n-                        \"Cancle Sita's trip\", \n+                        \"Cancle Jeevan's trip\", \n                         style: TextStyle(\n                           color: TColor.primaryText,\n                           fontSize: 18,\n                           fontWeight: FontWeight.w800,\n@@ -459,9 +1750,9 @@\n                         height: 15,),\n \n                         RoundButton(\n                           title: \"YES, CANCLE\", \n-                        type: RoundButtonType.secondary,\n+                        type: RoundButtonType.red,\n                         onPressed: () {\n                           context.pop();\n                           context.push(const ReasonView() );\n                         }),\n@@ -665,9 +1956,9 @@\n               height: 15,\n             ),\n \n                    Text(\n-                        \"Sita KC\", \n+                        \"Jeevan KC\", \n                         textAlign: TextAlign.center,\n                         style: TextStyle(\n                           color: TColor.primaryText,\n                           fontSize: 25,\n@@ -837,5 +2128,5 @@\n       addMarker();\n     }\n     \n   }\n-}\n\\ No newline at end of file\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722774403049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2132 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const RunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  double ratingVal = 5.0;\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n+    }\n+\n+    var startLocation = LocationHelper.shared().lastLocation;\n+\n+    if (startLocation == null) {\n+      return;\n+    }\n+\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n+\n+    if (endLocation == null) {\n+      return;\n+    }\n+    LocationHelper.shared().stopRideLocationSave();\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"Pickup Up \";\n+      case 3:\n+        return \"Waiting For \";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+}\n+\n+/*class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+  bool isCompleteRide = false;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+if(!isCompleteRide)\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               ClipRRect(\n+                 borderRadius: BorderRadius.circular(40),\n+                 child: Image.asset(\n+                  \"assets/img/ride_user_profile.png\",\n+                               width: 35, \n+                               height: 35,\n+                               ),\n+               ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Jeevan KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () async {\n+                    await  showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Jeevan's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () async {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+             await showDialog(\n+                context: context, \n+                barrierColor: const Color(0xff32384D),\n+                builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$154.57\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 20,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                        setState(() {\n+                          isCompleteRide = true;\n+                        });\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    )\n+    \n+else\n+ Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+          const SizedBox(\n+              height: 15,\n+            ),\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Text(\n+                        \"How was your rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+         ),\n+\n+          const SizedBox(\n+              height: 15,\n+            ),\n+\n+                   Text(\n+                        \"Jeevan KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                          \n+                        ),\n+                      ),\n+          \n+             const SizedBox(\n+              height: 8,\n+            ),\n+\n+  RatingBar.builder(\n+   initialRating: 3,\n+   minRating: 1,\n+   direction: Axis.horizontal,\n+   allowHalfRating: true,\n+   itemCount: 5,\n+   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n+   itemBuilder: (context, _) => const Icon(\n+     Icons.star,\n+     color: Colors.amber,\n+   ),\n+   onRatingUpdate: (rating) {\n+     print(rating);\n+   },\n+),\n+\n+             const SizedBox(\n+              height: 30,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title:\"RATE RIDER\",\n+           onPressed: () {\n+             \n+           context.push(const  TipDetailView() );\n+             \n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862437702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2132 +0,0 @@\n-\n-\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/location_helper.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const RunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  double ratingVal = 5.0;\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n-      print(\"user_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: rideObj[\"booking_status\"] == bsGoUser\n-                                ? \"ARRIVED\"\n-                                : rideObj[\"booking_status\"] == bsWaitUser\n-                                    ? \"START\"\n-                                    : \"COMPLETE\",\n-                            onPressed: () async {\n-                              if (rideObj[\"booking_status\"] == bsGoUser) {\n-                                // Api Calling Waiting For User\n-                                apiWaitingForUser();\n-                              } else if (rideObj[\"booking_status\"] ==\n-                                  bsWaitUser) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtOTP,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"----\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-\n-                                                      apiRideStart();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"RIDE START\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              } else if (rideObj[\"booking_status\"] == bsStart) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter Toll Amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter toll amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtToll,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"\\$0\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                      apiRideStop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"DONE\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              }\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    await controller.clearAllRoads();\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiWaitingForUser() {\n-    Globs.showHUD();\n-    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n-        SVKey.svDriverWaitUser, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStart() {\n-    if (txtOTP.text.length != 4) {\n-      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n-      return;\n-    }\n-\n-    var startLocation = LocationHelper.shared().lastLocation;\n-\n-    if (startLocation == null) {\n-      return;\n-    }\n-\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"pickup_latitude\": \"${startLocation.latitude}\",\n-      \"pickup_longitude\": \"${startLocation.longitude}\",\n-      \"otp_code\": txtOTP.text\n-    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        LocationHelper.shared().startRideLocationSave(\n-            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStop() {\n-    var endLocation = LocationHelper.shared().lastLocation;\n-\n-    if (endLocation == null) {\n-      return;\n-    }\n-    LocationHelper.shared().stopRideLocationSave();\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"drop_latitude\": \"${endLocation.latitude}\",\n-      \"drop_longitude\": \"${endLocation.longitude}\",\n-      \"ride_location\": LocationHelper.shared()\n-          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n-      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n-    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-\n-        mdShowAlert(\"Ride Completed\",\n-            responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"Pickup Up \";\n-      case 3:\n-        return \"Waiting For \";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}\n-\n-/*class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-  bool isCompleteRide = false;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-if(!isCompleteRide)\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               ClipRRect(\n-                 borderRadius: BorderRadius.circular(40),\n-                 child: Image.asset(\n-                  \"assets/img/ride_user_profile.png\",\n-                               width: 35, \n-                               height: 35,\n-                               ),\n-               ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Jeevan KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () async {\n-                    await  showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Jeevan's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () async {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-             await showDialog(\n-                context: context, \n-                barrierColor: const Color(0xff32384D),\n-                builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$154.57\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                        setState(() {\n-                          isCompleteRide = true;\n-                        });\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    )\n-    \n-else\n- Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-          const SizedBox(\n-              height: 15,\n-            ),\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Text(\n-                        \"How was your rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-         ),\n-\n-          const SizedBox(\n-              height: 15,\n-            ),\n-\n-                   Text(\n-                        \"Jeevan KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                          \n-                        ),\n-                      ),\n-          \n-             const SizedBox(\n-              height: 8,\n-            ),\n-\n-  RatingBar.builder(\n-   initialRating: 3,\n-   minRating: 1,\n-   direction: Axis.horizontal,\n-   allowHalfRating: true,\n-   itemCount: 5,\n-   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n-   itemBuilder: (context, _) => const Icon(\n-     Icons.star,\n-     color: Colors.amber,\n-   ),\n-   onRatingUpdate: (rating) {\n-     print(rating);\n-   },\n-),\n-\n-             const SizedBox(\n-              height: 30,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title:\"RATE RIDER\",\n-           onPressed: () {\n-             \n-           context.push(const  TipDetailView() );\n-             \n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862464684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2132 +0,0 @@\n-\n-\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/location_helper.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const RunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  double ratingVal = 5.0;\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n-      print(\"user_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: rideObj[\"booking_status\"] == bsGoUser\n-                                ? \"ARRIVED\"\n-                                : rideObj[\"booking_status\"] == bsWaitUser\n-                                    ? \"START\"\n-                                    : \"COMPLETE\",\n-                            onPressed: () async {\n-                              if (rideObj[\"booking_status\"] == bsGoUser) {\n-                                // Api Calling Waiting For User\n-                                apiWaitingForUser();\n-                              } else if (rideObj[\"booking_status\"] ==\n-                                  bsWaitUser) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtOTP,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"----\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-\n-                                                      apiRideStart();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"RIDE START\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              } else if (rideObj[\"booking_status\"] == bsStart) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter Toll Amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter toll amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtToll,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"\\$0\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                      apiRideStop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"DONE\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              }\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    await controller.clearAllRoads();\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiWaitingForUser() {\n-    Globs.showHUD();\n-    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n-        SVKey.svDriverWaitUser, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStart() {\n-    if (txtOTP.text.length != 4) {\n-      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n-      return;\n-    }\n-\n-    var startLocation = LocationHelper.shared().lastLocation;\n-\n-    if (startLocation == null) {\n-      return;\n-    }\n-\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"pickup_latitude\": \"${startLocation.latitude}\",\n-      \"pickup_longitude\": \"${startLocation.longitude}\",\n-      \"otp_code\": txtOTP.text\n-    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        LocationHelper.shared().startRideLocationSave(\n-            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStop() {\n-    var endLocation = LocationHelper.shared().lastLocation;\n-\n-    if (endLocation == null) {\n-      return;\n-    }\n-    LocationHelper.shared().stopRideLocationSave();\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"drop_latitude\": \"${endLocation.latitude}\",\n-      \"drop_longitude\": \"${endLocation.longitude}\",\n-      \"ride_location\": LocationHelper.shared()\n-          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n-      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n-    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-\n-        mdShowAlert(\"Ride Completed\",\n-            responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"Pickup Up \";\n-      case 3:\n-        return \"Waiting For \";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}\n-\n-/*class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-  bool isCompleteRide = false;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-if(!isCompleteRide)\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               ClipRRect(\n-                 borderRadius: BorderRadius.circular(40),\n-                 child: Image.asset(\n-                  \"assets/img/ride_user_profile.png\",\n-                               width: 35, \n-                               height: 35,\n-                               ),\n-               ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Jeevan KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () async {\n-                    await  showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Jeevan's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () async {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-             await showDialog(\n-                context: context, \n-                barrierColor: const Color(0xff32384D),\n-                builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$154.57\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                        setState(() {\n-                          isCompleteRide = true;\n-                        });\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    )\n-    \n-else\n- Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-          const SizedBox(\n-              height: 15,\n-            ),\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Text(\n-                        \"How was your rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-         ),\n-\n-          const SizedBox(\n-              height: 15,\n-            ),\n-\n-                   Text(\n-                        \"Jeevan KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                          \n-                        ),\n-                      ),\n-          \n-             const SizedBox(\n-              height: 8,\n-            ),\n-\n-  RatingBar.builder(\n-   initialRating: 3,\n-   minRating: 1,\n-   direction: Axis.horizontal,\n-   allowHalfRating: true,\n-   itemCount: 5,\n-   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n-   itemBuilder: (context, _) => const Icon(\n-     Icons.star,\n-     color: Colors.amber,\n-   ),\n-   onRatingUpdate: (rating) {\n-     print(rating);\n-   },\n-),\n-\n-             const SizedBox(\n-              height: 30,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title:\"RATE RIDER\",\n-           onPressed: () {\n-             \n-           context.push(const  TipDetailView() );\n-             \n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722863293714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2132 @@\n+\n+\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter/rendering.dart';\n+import 'package:flutter/widgets.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/reason_view.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+\n+\n+\n+\n+class RunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const RunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  double ratingVal = 5.0;\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n+    }\n+\n+    var startLocation = LocationHelper.shared().lastLocation;\n+\n+    if (startLocation == null) {\n+      return;\n+    }\n+\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n+\n+    if (endLocation == null) {\n+      return;\n+    }\n+    LocationHelper.shared().stopRideLocationSave();\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"Pickup Up \";\n+      case 3:\n+        return \"Waiting For \";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+}\n+\n+/*class RunRideView extends StatefulWidget {\n+  const RunRideView({super.key});\n+\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+\n+}\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n+  bool isOpen = true;\n+  int rideStatus = 0;\n+  bool isCompleteRide = false;\n+\n+  //1 = Accepy ride\n+  //2 = start\n+  //3 = complete\n+\n+  late MapController controller;\n+\n+  //28.0398257, 82.4838780\n+  //28.0403014, 82.4838194\n+\n+  @override\n+void initState () {\n+  super.initState();\n+  controller = MapController(\n+                             initPosition: GeoPoint(\n+        latitude: 28.0398257,\n+        longitude: 82.4838780,\n+      ),\n+                            \n+            );\n+\n+            controller.addObserver(this);\n+}\n+            @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    body: Stack(\n+      children: [\n+\n+      \n+    \n+\n+      OSMFlutter( \n+        controller: controller,\n+        osmOption: OSMOption(\n+          enableRotationByGesture: true,\n+             \n+            zoomOption: const ZoomOption(\n+                  initZoom: 8,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+            ),\n+              staticPoints: [],\n+            roadConfiguration:const RoadOption(\n+                    roadColor: Colors.blueAccent,\n+            ),\n+           userLocationMarker: UserLocationMaker (\n+                personMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.location_history_rounded,\n+                        color: Colors.red,\n+                        size: 48,\n+                    ),\n+                ),\n+                directionArrowMarker: const MarkerIcon(\n+                    icon: Icon(\n+                        Icons.double_arrow,\n+                        size: 48,\n+                    ),\n+                ),\n+            ),\n+\n+            showDefaultInfoWindow: false\n+        ),\n+        onMapIsReady: (isReady) {\n+          if(isReady) {\n+            print(\"map is ready\");\n+          }\n+        },\n+        onLocationChanged: (myLocation) {\n+           print(\"user location :$myLocation\");\n+        },  \n+\n+        onGeoPointClicked: (myLocation) {\n+           print(\"GeoPointClicked location :$myLocation\");\n+        },  \n+    ),\n+\n+if(!isCompleteRide)\n+\n+    Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+        if(rideStatus == 1  )\n+        //Ride Arrived Status\n+\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+     if (rideStatus == 2)\n+\n+     Container(\n+      margin: const EdgeInsets.all(20),\n+          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n+           decoration:  BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.circular(50),\n+                  boxShadow: const [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+\n+               Stack(\n+                alignment: Alignment.bottomCenter,\n+                 children: [\n+                   TimerCountdown(\n+                                  format: CountDownTimerFormat.minutesSeconds,\n+                                  endTime: DateTime.now().add(\n+                                    const Duration(\n+                                      minutes: 2,\n+                                    ),\n+                                  ),\n+                                  onEnd: () {\n+                                    print(\"Timer finished\");\n+                                  },\n+                                  timeTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  colonsTextStyle: TextStyle(\n+                                    color: TColor.secondary,\n+                                    fontWeight: FontWeight.w800,\n+                                    fontSize: 25,\n+                                  ),\n+                                  spacerWidth: 0,\n+                                  daysDescription: \"\",\n+                                  hoursDescription: \"\",\n+                                  minutesDescription: \"\",\n+                                  secondsDescription: \"\",\n+                                ),\n+                            Text(\n+                              \"Arrived at dropoff\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                 ],\n+                 \n+               ),\n+               \n+\n+\n+            ],\n+          ),\n+     ),\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Row(\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+            children: [\n+           IconButton(\n+            onPressed: () {\n+              setState(() {\n+                isOpen = !isOpen;\n+              });\n+            }, \n+            icon: Image.asset(\n+            isOpen ? \"assets/img/open_btn.png\" \n+                   : \"assets/img/close_btn.png\" , \n+              width: 15, \n+              height: 15,\n+              ),\n+              ),\n+           \n+                 Row(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                      Text(\n+                        \"2 min \", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+           \n+                 const SizedBox(\n+                   width: 15,),\n+              \n+               ClipRRect(\n+                 borderRadius: BorderRadius.circular(40),\n+                 child: Image.asset(\n+                  \"assets/img/ride_user_profile.png\",\n+                               width: 35, \n+                               height: 35,\n+                               ),\n+               ),\n+           \n+              const SizedBox( \n+                width: 15,),\n+           \n+               Text(\n+                        \"0.5 mi\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+           \n+                 \n+                  ],\n+                ),\n+           \n+                \n+           \n+                IconButton(\n+            onPressed: () {\n+             \n+            }, \n+            icon: Image.asset(\n+             \"assets/img/call.png\", \n+              width: 30, \n+              height: 30,\n+              ),),\n+             \n+             \n+                   ],\n+                   ),\n+         ),\n+\n+                   Text(\n+                        \"Picking up Jeevan KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),\n+            if(isOpen)\n+            const SizedBox(\n+              height: 8,\n+             ),\n+\n+        if(isOpen)\n+       const Divider(\n+        height: 0.5, \n+        endIndent: 20, \n+        indent: 20,),\n+\n+           if(isOpen)\n+             const SizedBox(\n+              height: 8,\n+             ),\n+             if(isOpen)\n+            Row(\n+             \n+              children: [\n+\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Chat\", \n+                    icon: \"assets/img/chat.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                 Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Message\", \n+                    icon: \"assets/img/message.png\", \n+                    onPressed: () {\n+\n+                   }),\n+                 ),\n+                Expanded(\n+                   child: \n+                   IconTitleButton(\n+                    title: \"Cancle Tip\", \n+                    icon: \"assets/img/cancel_trip.png\", \n+                    onPressed: () async {\n+                    await  showModalBottomSheet(\n+                        backgroundColor: Colors.transparent,\n+                        barrierColor: Colors.transparent,\n+                        isScrollControlled: true,\n+                        context: context, \n+                        builder: (context) {\n+                          return Stack(\n+                            alignment: Alignment.bottomCenter,\n+                            children: [\n+                              BackdropFilter(\n+                                filter: ImageFilter.blur(\n+                                  sigmaX: 5, sigmaY: 5),\n+                                  child: Container (color: Colors.black38,),\n+                                  ),\n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+                       Text(\n+                        \"Cancle Jeevan's trip\", \n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+\n+                        const Divider(),\n+\n+                         const SizedBox(\n+                        height: 15,),\n+\n+                        RoundButton(\n+                          title: \"YES, CANCLE\", \n+                        type: RoundButtonType.red,\n+                        onPressed: () {\n+                          context.pop();\n+                          context.push(const ReasonView() );\n+                        }),\n+\n+                       const SizedBox(\n+                        height: 15,),\n+\n+                         RoundButton(title:\n+                          \"NO\", \n+                        type: RoundButtonType.boarded,\n+                        onPressed: () {\n+                          context.pop();\n+                        }),\n+\n+                      const SizedBox(\n+                        height: 15,),\n+                            \n+                            ],\n+                               ),\n+                                    ),\n+               ] );\n+\n+                      });\n+\n+                   }),\n+                 ),\n+              ],\n+            ),\n+\n+             const SizedBox(\n+              height: 15,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title: rideStatus == 0 \n+            ? \"ARRIVED\" :\n+           rideStatus ==1 \n+           ? \"START\" : \n+           \"COMPLETE\", \n+           onPressed: () async {\n+             \n+             if (rideStatus == 0) {\n+              rideStatus = 1;\n+              setState(() {});\n+\n+             }else if (rideStatus == 1) {\n+              rideStatus = 2;\n+         setState(() {});\n+             }else if (rideStatus == 2) {\n+             await showDialog(\n+                context: context, \n+                barrierColor: const Color(0xff32384D),\n+                builder: (context) {\n+                return Dialog(\n+                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n+                  child: Container(\n+                    padding: const EdgeInsets.all(15),\n+                    width: context.width -50,\n+                    height: 190,\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+\n+                     Text(\n+                        \"Enter Toll Amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 23,\n+                          fontWeight: FontWeight.w600,\n+                        ),\n+                      ),\n+\n+                     Text(\n+                        \"Please enter toll amount\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 14,\n+                          \n+                        ),\n+                      ),\n+\n+\n+        TextField(\n+            keyboardType: TextInputType.number,\n+            style: TextStyle(\n+                color: TColor.primaryText, \n+                fontSize: 16,\n+                ),\n+            decoration: InputDecoration(\n+              enabledBorder: InputBorder.none,\n+              focusedBorder: InputBorder.none,\n+              hintText: \"\\$154.57\",\n+              hintStyle: TextStyle(\n+                color: TColor.secondaryText, \n+                fontSize: 20,\n+                ),\n+            ),\n+          ),\n+\n+                       Divider(),\n+\n+                       Row(\n+                        mainAxisAlignment: MainAxisAlignment.end,\n+                        children: [\n+                          TextButton(onPressed: () {\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"CANCLE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                         \n+                        ),\n+                      ),),\n+\n+                       TextButton(onPressed: () {\n+                        setState(() {\n+                          isCompleteRide = true;\n+                        });\n+                          context.pop();\n+                          }, child:  Text(\n+                        \"DONE\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primary,\n+                          fontSize: 16,\n+                          \n+                        ),\n+                      ),)\n+                        ],\n+                       )\n+                      ],\n+                    ),\n+                  ),\n+                );\n+              });\n+             }\n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    )\n+    \n+else\n+ Column(\n+      crossAxisAlignment: CrossAxisAlignment.end,\n+      mainAxisAlignment: MainAxisAlignment.end,\n+      children: [\n+\n+\n+     \n+\n+        Container(\n+          padding: const EdgeInsets.symmetric(vertical: 15),\n+           decoration: const BoxDecoration(\n+                  color: Colors.white,\n+                  borderRadius: BorderRadius.only(\n+                  topLeft: Radius.circular(10),\n+                  topRight: Radius.circular(10), ),\n+                  boxShadow:  [\n+                  BoxShadow(\n+                    color: Colors.black12,\n+                    blurRadius: 10,\n+                    offset: Offset (0,-5),\n+                     ),\n+                 ]\n+                 \n+                  ),\n+          child: Column(\n+            children: [\n+          const SizedBox(\n+              height: 15,\n+            ),\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 15),\n+           child: Text(\n+                        \"How was your rider\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 18,\n+                          \n+                        ),\n+                      ),\n+         ),\n+\n+          const SizedBox(\n+              height: 15,\n+            ),\n+\n+                   Text(\n+                        \"Jeevan KC\", \n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                          \n+                        ),\n+                      ),\n+          \n+             const SizedBox(\n+              height: 8,\n+            ),\n+\n+  RatingBar.builder(\n+   initialRating: 3,\n+   minRating: 1,\n+   direction: Axis.horizontal,\n+   allowHalfRating: true,\n+   itemCount: 5,\n+   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n+   itemBuilder: (context, _) => const Icon(\n+     Icons.star,\n+     color: Colors.amber,\n+   ),\n+   onRatingUpdate: (rating) {\n+     print(rating);\n+   },\n+),\n+\n+             const SizedBox(\n+              height: 30,\n+            ),\n+\n+         Padding(\n+           padding: const EdgeInsets.symmetric(horizontal: 20),\n+           child: RoundButton(\n+            title:\"RATE RIDER\",\n+           onPressed: () {\n+             \n+           context.push(const  TipDetailView() );\n+             \n+           \n+           }),\n+         ),\n+\n+             const SizedBox(\n+              height: 25,\n+            ),\n+            \n+            ],\n+          ),\n+        )\n+      ],\n+    ),\n+    \n+    SafeArea(\n+      child: Column(\n+      mainAxisAlignment: MainAxisAlignment.start,\n+      children: [\n+        Padding(\n+          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n+          child: \n+                InkWell(\n+                  onTap: () {\n+                   context.pop();\n+                  },\n+                  child: Container(\n+                              padding: const EdgeInsets.symmetric(\n+                                vertical: 15, horizontal: 25),\n+                            \n+                               decoration: BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.circular(50),\n+                      \n+                      boxShadow: const [\n+                      BoxShadow(\n+                        color: Colors.black26,\n+                        blurRadius: 10,\n+                        \n+                         ),\n+                              \n+                              ]),\n+                              child: Row(\n+                        children: [\n+                       Image.asset(\n+                        \"assets/img/pickup_pin_1.png\",\n+                         width: 30, \n+                         height: 30,),\n+\n+                       const SizedBox(\n+                        width: 8,),\n+\n+                        Expanded(\n+                          child: Text(\n+                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n+                                style: TextStyle(\n+                                  color: TColor.primaryText,\n+                                  fontSize: 15,\n+                                  \n+                                ),\n+                                ),\n+                        ),\n+                          \n+                        ],\n+                       \n+                     ),),\n+                ),\n+                \n+              \n+              \n+            \n+          ),\n+        \n+      ],\n+    ),\n+    )\n+\n+    ],\n+  ),\n+  );\n+}\n+\n+void addMarker() async {\n+  await controller.setMarkerOfStaticPoint(\n+    id: \"pickup\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/pickup_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+   await controller.setMarkerOfStaticPoint(\n+    id: \"dropoff\", \n+    markerIcon: MarkerIcon(\n+    iconWidget: Image.asset(\n+      \"assets/img/drop_pin.png\", \n+      width: 80, \n+      height: 80,\n+      ),\n+  ),);\n+\n+                            \n+  await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n+    \"pickup\");\n+\n+    await controller.setStaticPosition( \n+    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n+    \"dropoff\");\n+\n+loadMapRoad();\n+}\n+void loadMapRoad() async {\n+await controller.drawRoad( \n+  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n+  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n+  roadType: RoadType.car,\n+  roadOption: \n+  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n+  );\n+}\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async{\n+    if(isReady) {\n+      addMarker();\n+    }\n+    \n+  }\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724057626083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,1304 @@\n+import 'dart:ui';\n \n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n \n-import 'dart:ui';\n \n+class RunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const RunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  double ratingVal = 5.0;\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n+    }\n+\n+    var startLocation = LocationHelper.shared().lastLocation;\n+\n+    if (startLocation == null) {\n+      return;\n+    }\n+\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n+\n+    if (endLocation == null) {\n+      return;\n+    }\n+    LocationHelper.shared().stopRideLocationSave();\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"Pickup Up \";\n+      case 3:\n+        return \"Waiting For \";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+}\n+\n+\n+/*import 'dart:ui';\n+\n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/cupertino.dart';\n import 'package:flutter/material.dart';\n import 'package:flutter/rendering.dart';\n@@ -17,16 +1313,15 @@\n import 'package:taxi_driver/common/service_call.dart';\n import 'package:taxi_driver/common/socket_manager.dart';\n import 'package:taxi_driver/common_widget/icon_title_button.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/reason_view.dart';\n import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n \n \n \n \n \n+\n class RunRideView extends StatefulWidget {\n   final Map rObj;\n   const RunRideView({super.key, required this.rObj});\n \n@@ -1302,9 +2597,9 @@\n       default:\n         return Colors.blue;\n     }\n   }\n-}\n+}*/\n \n /*class RunRideView extends StatefulWidget {\n   const RunRideView({super.key});\n \n"
                },
                {
                    "date": 1725469978721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1296 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class RunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const RunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  //23.02756018230479, 72.58131973941731\n+  //23.02726396414328, 72.5851928489523\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  double ratingVal = 5.0;\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n+    }\n+\n+    var startLocation = LocationHelper.shared().lastLocation;\n+\n+    if (startLocation == null) {\n+      return;\n+    }\n+\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n+\n+    if (endLocation == null) {\n+      return;\n+    }\n+    LocationHelper.shared().stopRideLocationSave();\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"Pickup Up \";\n+      case 3:\n+        return \"Waiting For \";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1725519903723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,9 @@\n   //2 = Start\n   //4 = Complete\n \n   late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n+  \n   String timeCount = \"...\";\n   String km = \"...\";\n   double ratingVal = 5.0;\n   @override\n"
                },
                {
                    "date": 1725520148901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,9 +326,9 @@\n                                 const SizedBox(\n                                   width: 15,\n                                 ),\n                                 Text(\n-                                  \"$km km\",\n+                                  \"$km \",\n                                   style: TextStyle(\n                                       color: TColor.primaryText,\n                                       fontSize: 18,\n                                       fontWeight: FontWeight.w800),\n@@ -1291,3431 +1291,4 @@\n         return Colors.blue;\n     }\n   }\n }\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/location_helper.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-\n-class RunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const RunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  double ratingVal = 5.0;\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n-      print(\"user_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: rideObj[\"booking_status\"] == bsGoUser\n-                                ? \"ARRIVED\"\n-                                : rideObj[\"booking_status\"] == bsWaitUser\n-                                    ? \"START\"\n-                                    : \"COMPLETE\",\n-                            onPressed: () async {\n-                              if (rideObj[\"booking_status\"] == bsGoUser) {\n-                                // Api Calling Waiting For User\n-                                apiWaitingForUser();\n-                              } else if (rideObj[\"booking_status\"] ==\n-                                  bsWaitUser) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtOTP,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"----\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-\n-                                                      apiRideStart();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"RIDE START\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              } else if (rideObj[\"booking_status\"] == bsStart) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter Toll Amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter toll amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtToll,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"\\$0\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                      apiRideStop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"DONE\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              }\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    await controller.clearAllRoads();\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiWaitingForUser() {\n-    Globs.showHUD();\n-    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n-        SVKey.svDriverWaitUser, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStart() {\n-    if (txtOTP.text.length != 4) {\n-      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n-      return;\n-    }\n-\n-    var startLocation = LocationHelper.shared().lastLocation;\n-\n-    if (startLocation == null) {\n-      return;\n-    }\n-\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"pickup_latitude\": \"${startLocation.latitude}\",\n-      \"pickup_longitude\": \"${startLocation.longitude}\",\n-      \"otp_code\": txtOTP.text\n-    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        LocationHelper.shared().startRideLocationSave(\n-            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStop() {\n-    var endLocation = LocationHelper.shared().lastLocation;\n-\n-    if (endLocation == null) {\n-      return;\n-    }\n-    LocationHelper.shared().stopRideLocationSave();\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"drop_latitude\": \"${endLocation.latitude}\",\n-      \"drop_longitude\": \"${endLocation.longitude}\",\n-      \"ride_location\": LocationHelper.shared()\n-          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n-      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n-    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-\n-        mdShowAlert(\"Ride Completed\",\n-            responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"Pickup Up \";\n-      case 3:\n-        return \"Waiting For \";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}\n-\n-\n-/*import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter/rendering.dart';\n-import 'package:flutter/widgets.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/location_helper.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-\n-\n-\n-\n-\n-class RunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const RunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  //23.02756018230479, 72.58131973941731\n-  //23.02726396414328, 72.5851928489523\n-\n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  double ratingVal = 5.0;\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n-      print(\"user_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: rideObj[\"booking_status\"] == bsGoUser\n-                                ? \"ARRIVED\"\n-                                : rideObj[\"booking_status\"] == bsWaitUser\n-                                    ? \"START\"\n-                                    : \"COMPLETE\",\n-                            onPressed: () async {\n-                              if (rideObj[\"booking_status\"] == bsGoUser) {\n-                                // Api Calling Waiting For User\n-                                apiWaitingForUser();\n-                              } else if (rideObj[\"booking_status\"] ==\n-                                  bsWaitUser) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtOTP,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"----\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-\n-                                                      apiRideStart();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"RIDE START\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              } else if (rideObj[\"booking_status\"] == bsStart) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter Toll Amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter toll amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtToll,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"\\$0\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                      apiRideStop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"DONE\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              }\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    await controller.clearAllRoads();\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiWaitingForUser() {\n-    Globs.showHUD();\n-    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n-        SVKey.svDriverWaitUser, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStart() {\n-    if (txtOTP.text.length != 4) {\n-      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n-      return;\n-    }\n-\n-    var startLocation = LocationHelper.shared().lastLocation;\n-\n-    if (startLocation == null) {\n-      return;\n-    }\n-\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"pickup_latitude\": \"${startLocation.latitude}\",\n-      \"pickup_longitude\": \"${startLocation.longitude}\",\n-      \"otp_code\": txtOTP.text\n-    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        LocationHelper.shared().startRideLocationSave(\n-            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStop() {\n-    var endLocation = LocationHelper.shared().lastLocation;\n-\n-    if (endLocation == null) {\n-      return;\n-    }\n-    LocationHelper.shared().stopRideLocationSave();\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"drop_latitude\": \"${endLocation.latitude}\",\n-      \"drop_longitude\": \"${endLocation.longitude}\",\n-      \"ride_location\": LocationHelper.shared()\n-          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n-      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n-    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-\n-        mdShowAlert(\"Ride Completed\",\n-            responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"Pickup Up \";\n-      case 3:\n-        return \"Waiting For \";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}*/\n-\n-/*class RunRideView extends StatefulWidget {\n-  const RunRideView({super.key});\n-\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-\n-}\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n-  bool isOpen = true;\n-  int rideStatus = 0;\n-  bool isCompleteRide = false;\n-\n-  //1 = Accepy ride\n-  //2 = start\n-  //3 = complete\n-\n-  late MapController controller;\n-\n-  //28.0398257, 82.4838780\n-  //28.0403014, 82.4838194\n-\n-  @override\n-void initState () {\n-  super.initState();\n-  controller = MapController(\n-                             initPosition: GeoPoint(\n-        latitude: 28.0398257,\n-        longitude: 82.4838780,\n-      ),\n-                            \n-            );\n-\n-            controller.addObserver(this);\n-}\n-            @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    body: Stack(\n-      children: [\n-\n-      \n-    \n-\n-      OSMFlutter( \n-        controller: controller,\n-        osmOption: OSMOption(\n-          enableRotationByGesture: true,\n-             \n-            zoomOption: const ZoomOption(\n-                  initZoom: 8,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-            ),\n-              staticPoints: [],\n-            roadConfiguration:const RoadOption(\n-                    roadColor: Colors.blueAccent,\n-            ),\n-           userLocationMarker: UserLocationMaker (\n-                personMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.location_history_rounded,\n-                        color: Colors.red,\n-                        size: 48,\n-                    ),\n-                ),\n-                directionArrowMarker: const MarkerIcon(\n-                    icon: Icon(\n-                        Icons.double_arrow,\n-                        size: 48,\n-                    ),\n-                ),\n-            ),\n-\n-            showDefaultInfoWindow: false\n-        ),\n-        onMapIsReady: (isReady) {\n-          if(isReady) {\n-            print(\"map is ready\");\n-          }\n-        },\n-        onLocationChanged: (myLocation) {\n-           print(\"user location :$myLocation\");\n-        },  \n-\n-        onGeoPointClicked: (myLocation) {\n-           print(\"GeoPointClicked location :$myLocation\");\n-        },  \n-    ),\n-\n-if(!isCompleteRide)\n-\n-    Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-        if(rideStatus == 1  )\n-        //Ride Arrived Status\n-\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-     if (rideStatus == 2)\n-\n-     Container(\n-      margin: const EdgeInsets.all(20),\n-          padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 25),\n-           decoration:  BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.circular(50),\n-                  boxShadow: const [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-\n-               Stack(\n-                alignment: Alignment.bottomCenter,\n-                 children: [\n-                   TimerCountdown(\n-                                  format: CountDownTimerFormat.minutesSeconds,\n-                                  endTime: DateTime.now().add(\n-                                    const Duration(\n-                                      minutes: 2,\n-                                    ),\n-                                  ),\n-                                  onEnd: () {\n-                                    print(\"Timer finished\");\n-                                  },\n-                                  timeTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  colonsTextStyle: TextStyle(\n-                                    color: TColor.secondary,\n-                                    fontWeight: FontWeight.w800,\n-                                    fontSize: 25,\n-                                  ),\n-                                  spacerWidth: 0,\n-                                  daysDescription: \"\",\n-                                  hoursDescription: \"\",\n-                                  minutesDescription: \"\",\n-                                  secondsDescription: \"\",\n-                                ),\n-                            Text(\n-                              \"Arrived at dropoff\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                 ],\n-                 \n-               ),\n-               \n-\n-\n-            ],\n-          ),\n-     ),\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Row(\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-            children: [\n-           IconButton(\n-            onPressed: () {\n-              setState(() {\n-                isOpen = !isOpen;\n-              });\n-            }, \n-            icon: Image.asset(\n-            isOpen ? \"assets/img/open_btn.png\" \n-                   : \"assets/img/close_btn.png\" , \n-              width: 15, \n-              height: 15,\n-              ),\n-              ),\n-           \n-                 Row(\n-                  mainAxisSize: MainAxisSize.min,\n-                  children: [\n-                      Text(\n-                        \"2 min \", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-           \n-                 const SizedBox(\n-                   width: 15,),\n-              \n-               ClipRRect(\n-                 borderRadius: BorderRadius.circular(40),\n-                 child: Image.asset(\n-                  \"assets/img/ride_user_profile.png\",\n-                               width: 35, \n-                               height: 35,\n-                               ),\n-               ),\n-           \n-              const SizedBox( \n-                width: 15,),\n-           \n-               Text(\n-                        \"0.5 mi\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-           \n-                 \n-                  ],\n-                ),\n-           \n-                \n-           \n-                IconButton(\n-            onPressed: () {\n-             \n-            }, \n-            icon: Image.asset(\n-             \"assets/img/call.png\", \n-              width: 30, \n-              height: 30,\n-              ),),\n-             \n-             \n-                   ],\n-                   ),\n-         ),\n-\n-                   Text(\n-                        \"Picking up Jeevan KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),\n-            if(isOpen)\n-            const SizedBox(\n-              height: 8,\n-             ),\n-\n-        if(isOpen)\n-       const Divider(\n-        height: 0.5, \n-        endIndent: 20, \n-        indent: 20,),\n-\n-           if(isOpen)\n-             const SizedBox(\n-              height: 8,\n-             ),\n-             if(isOpen)\n-            Row(\n-             \n-              children: [\n-\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Chat\", \n-                    icon: \"assets/img/chat.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                 Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Message\", \n-                    icon: \"assets/img/message.png\", \n-                    onPressed: () {\n-\n-                   }),\n-                 ),\n-                Expanded(\n-                   child: \n-                   IconTitleButton(\n-                    title: \"Cancle Tip\", \n-                    icon: \"assets/img/cancel_trip.png\", \n-                    onPressed: () async {\n-                    await  showModalBottomSheet(\n-                        backgroundColor: Colors.transparent,\n-                        barrierColor: Colors.transparent,\n-                        isScrollControlled: true,\n-                        context: context, \n-                        builder: (context) {\n-                          return Stack(\n-                            alignment: Alignment.bottomCenter,\n-                            children: [\n-                              BackdropFilter(\n-                                filter: ImageFilter.blur(\n-                                  sigmaX: 5, sigmaY: 5),\n-                                  child: Container (color: Colors.black38,),\n-                                  ),\n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-                       Text(\n-                        \"Cancle Jeevan's trip\", \n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-\n-                        const Divider(),\n-\n-                         const SizedBox(\n-                        height: 15,),\n-\n-                        RoundButton(\n-                          title: \"YES, CANCLE\", \n-                        type: RoundButtonType.red,\n-                        onPressed: () {\n-                          context.pop();\n-                          context.push(const ReasonView() );\n-                        }),\n-\n-                       const SizedBox(\n-                        height: 15,),\n-\n-                         RoundButton(title:\n-                          \"NO\", \n-                        type: RoundButtonType.boarded,\n-                        onPressed: () {\n-                          context.pop();\n-                        }),\n-\n-                      const SizedBox(\n-                        height: 15,),\n-                            \n-                            ],\n-                               ),\n-                                    ),\n-               ] );\n-\n-                      });\n-\n-                   }),\n-                 ),\n-              ],\n-            ),\n-\n-             const SizedBox(\n-              height: 15,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title: rideStatus == 0 \n-            ? \"ARRIVED\" :\n-           rideStatus ==1 \n-           ? \"START\" : \n-           \"COMPLETE\", \n-           onPressed: () async {\n-             \n-             if (rideStatus == 0) {\n-              rideStatus = 1;\n-              setState(() {});\n-\n-             }else if (rideStatus == 1) {\n-              rideStatus = 2;\n-         setState(() {});\n-             }else if (rideStatus == 2) {\n-             await showDialog(\n-                context: context, \n-                barrierColor: const Color(0xff32384D),\n-                builder: (context) {\n-                return Dialog(\n-                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n-                  child: Container(\n-                    padding: const EdgeInsets.all(15),\n-                    width: context.width -50,\n-                    height: 190,\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-\n-                     Text(\n-                        \"Enter Toll Amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 23,\n-                          fontWeight: FontWeight.w600,\n-                        ),\n-                      ),\n-\n-                     Text(\n-                        \"Please enter toll amount\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 14,\n-                          \n-                        ),\n-                      ),\n-\n-\n-        TextField(\n-            keyboardType: TextInputType.number,\n-            style: TextStyle(\n-                color: TColor.primaryText, \n-                fontSize: 16,\n-                ),\n-            decoration: InputDecoration(\n-              enabledBorder: InputBorder.none,\n-              focusedBorder: InputBorder.none,\n-              hintText: \"\\$154.57\",\n-              hintStyle: TextStyle(\n-                color: TColor.secondaryText, \n-                fontSize: 20,\n-                ),\n-            ),\n-          ),\n-\n-                       Divider(),\n-\n-                       Row(\n-                        mainAxisAlignment: MainAxisAlignment.end,\n-                        children: [\n-                          TextButton(onPressed: () {\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"CANCLE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                         \n-                        ),\n-                      ),),\n-\n-                       TextButton(onPressed: () {\n-                        setState(() {\n-                          isCompleteRide = true;\n-                        });\n-                          context.pop();\n-                          }, child:  Text(\n-                        \"DONE\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primary,\n-                          fontSize: 16,\n-                          \n-                        ),\n-                      ),)\n-                        ],\n-                       )\n-                      ],\n-                    ),\n-                  ),\n-                );\n-              });\n-             }\n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    )\n-    \n-else\n- Column(\n-      crossAxisAlignment: CrossAxisAlignment.end,\n-      mainAxisAlignment: MainAxisAlignment.end,\n-      children: [\n-\n-\n-     \n-\n-        Container(\n-          padding: const EdgeInsets.symmetric(vertical: 15),\n-           decoration: const BoxDecoration(\n-                  color: Colors.white,\n-                  borderRadius: BorderRadius.only(\n-                  topLeft: Radius.circular(10),\n-                  topRight: Radius.circular(10), ),\n-                  boxShadow:  [\n-                  BoxShadow(\n-                    color: Colors.black12,\n-                    blurRadius: 10,\n-                    offset: Offset (0,-5),\n-                     ),\n-                 ]\n-                 \n-                  ),\n-          child: Column(\n-            children: [\n-          const SizedBox(\n-              height: 15,\n-            ),\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 15),\n-           child: Text(\n-                        \"How was your rider\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 18,\n-                          \n-                        ),\n-                      ),\n-         ),\n-\n-          const SizedBox(\n-              height: 15,\n-            ),\n-\n-                   Text(\n-                        \"Jeevan KC\", \n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                          \n-                        ),\n-                      ),\n-          \n-             const SizedBox(\n-              height: 8,\n-            ),\n-\n-  RatingBar.builder(\n-   initialRating: 3,\n-   minRating: 1,\n-   direction: Axis.horizontal,\n-   allowHalfRating: true,\n-   itemCount: 5,\n-   itemPadding: const EdgeInsets.symmetric(horizontal: 4.0),\n-   itemBuilder: (context, _) => const Icon(\n-     Icons.star,\n-     color: Colors.amber,\n-   ),\n-   onRatingUpdate: (rating) {\n-     print(rating);\n-   },\n-),\n-\n-             const SizedBox(\n-              height: 30,\n-            ),\n-\n-         Padding(\n-           padding: const EdgeInsets.symmetric(horizontal: 20),\n-           child: RoundButton(\n-            title:\"RATE RIDER\",\n-           onPressed: () {\n-             \n-           context.push(const  TipDetailView() );\n-             \n-           \n-           }),\n-         ),\n-\n-             const SizedBox(\n-              height: 25,\n-            ),\n-            \n-            ],\n-          ),\n-        )\n-      ],\n-    ),\n-    \n-    SafeArea(\n-      child: Column(\n-      mainAxisAlignment: MainAxisAlignment.start,\n-      children: [\n-        Padding(\n-          padding: const EdgeInsets.symmetric( horizontal: 20, vertical: 10,),\n-          child: \n-                InkWell(\n-                  onTap: () {\n-                   context.pop();\n-                  },\n-                  child: Container(\n-                              padding: const EdgeInsets.symmetric(\n-                                vertical: 15, horizontal: 25),\n-                            \n-                               decoration: BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.circular(50),\n-                      \n-                      boxShadow: const [\n-                      BoxShadow(\n-                        color: Colors.black26,\n-                        blurRadius: 10,\n-                        \n-                         ),\n-                              \n-                              ]),\n-                              child: Row(\n-                        children: [\n-                       Image.asset(\n-                        \"assets/img/pickup_pin_1.png\",\n-                         width: 30, \n-                         height: 30,),\n-\n-                       const SizedBox(\n-                        width: 8,),\n-\n-                        Expanded(\n-                          child: Text(\n-                                 \"Tulisipur Chowk Bus Stop, F015, Ghorahi Nepal\", \n-                                style: TextStyle(\n-                                  color: TColor.primaryText,\n-                                  fontSize: 15,\n-                                  \n-                                ),\n-                                ),\n-                        ),\n-                          \n-                        ],\n-                       \n-                     ),),\n-                ),\n-                \n-              \n-              \n-            \n-          ),\n-        \n-      ],\n-    ),\n-    )\n-\n-    ],\n-  ),\n-  );\n-}\n-\n-void addMarker() async {\n-  await controller.setMarkerOfStaticPoint(\n-    id: \"pickup\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/pickup_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-   await controller.setMarkerOfStaticPoint(\n-    id: \"dropoff\", \n-    markerIcon: MarkerIcon(\n-    iconWidget: Image.asset(\n-      \"assets/img/drop_pin.png\", \n-      width: 80, \n-      height: 80,\n-      ),\n-  ),);\n-\n-                            \n-  await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n-    \"pickup\");\n-\n-    await controller.setStaticPosition( \n-    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n-    \"dropoff\");\n-\n-loadMapRoad();\n-}\n-void loadMapRoad() async {\n-await controller.drawRoad( \n-  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n-  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n-  roadType: RoadType.car,\n-  roadOption: \n-  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n-  );\n-}\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async{\n-    if(isReady) {\n-      addMarker();\n-    }\n-    \n-  }\n-}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725520157576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,9 +326,9 @@\n                                 const SizedBox(\n                                   width: 15,\n                                 ),\n                                 Text(\n-                                  \"$km \",\n+                                  \"$km km\",\n                                   style: TextStyle(\n                                       color: TColor.primaryText,\n                                       fontSize: 18,\n                                       fontWeight: FontWeight.w800),\n"
                },
                {
                    "date": 1725520544797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -527,9 +527,15 @@\n                             Expanded(\n                               child: IconTitleButton(\n                                 icon: \"assets/img/message.png\",\n                                 title: \"Message\",\n-                                onPressed: () {},\n+                                onPressed: () {\n+                                   if(ServiceCall.userType == 1) {\n+                          context.push(const SupportMessageView(uObj: {},));\n+                        }else{\n+                          context.push(const SupportMessageView(uObj: {},));\n+                        }\n+                                },\n                               ),\n                             ),\n                             Expanded(\n                               child: IconTitleButton(\n"
                },
                {
                    "date": 1725520818408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1294 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class RunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const RunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  \n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  double ratingVal = 5.0;\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n+    }\n+\n+    var startLocation = LocationHelper.shared().lastLocation;\n+\n+    if (startLocation == null) {\n+      return;\n+    }\n+\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n+\n+    if (endLocation == null) {\n+      return;\n+    }\n+    LocationHelper.shared().stopRideLocationSave();\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"Pickup Up \";\n+      case 3:\n+        return \"Waiting For \";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1725680761596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/location_helper.dart';\n@@ -31,9 +31,9 @@\n const bsStart = 4;\n const bsComplete = 5;\n const bsCancel = 6;\n \n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n+class _RunRideViewState extends State<RunRideView> {\n   bool isOpen = true;\n \n   Map rideObj = {};\n \n@@ -43,37 +43,35 @@\n   //1 = Accept Ride\n   //2 = Start\n   //4 = Complete\n \n-  late MapController controller;\n-  \n+  late GoogleMapController mapController;\n+  final Set<Marker> _markers = {};\n+  final Set<Polyline> _polylines = {};\n+  LatLng? _initialPosition;\n+\n   String timeCount = \"...\";\n   String km = \"...\";\n   double ratingVal = 5.0;\n+\n   @override\n   void initState() {\n-    // TODO: implement initState\n     super.initState();\n \n     rideObj = widget.rObj;\n \n     if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      _initialPosition = LatLng(\n+        double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+        double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n       );\n     } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      _initialPosition = LatLng(\n+        double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+        double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n       );\n     }\n \n-    controller.addObserver(this);\n-\n     SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n       print(\"user_cancel_ride socket get : ${data.toString()}\");\n       if (data[KKey.status] == \"1\") {\n         if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n@@ -90,11 +88,9 @@\n   }\n \n   @override\n   void dispose() {\n-    // TODO: implement dispose\n     super.dispose();\n-    controller.dispose();\n   }\n \n   @override\n   Widget build(BuildContext context) {\n@@ -102,43 +98,20 @@\n \n     return Scaffold(\n       body: Stack(\n         children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n+          GoogleMap(\n+            initialCameraPosition: CameraPosition(\n+              target: _initialPosition ?? LatLng(0, 0),\n+              zoom: 15,\n+            ),\n+            markers: _markers,\n+            polylines: _polylines,\n+            onMapCreated: (GoogleMapController controller) {\n+              mapController = controller;\n+              addMarkers();\n+              loadMapRoad();\n             },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n           ),\n           if (rideObj[\"booking_status\"] != bsComplete)\n             Column(\n               crossAxisAlignment: CrossAxisAlignment.end,\n@@ -204,69 +177,8 @@\n                         ),\n                       ],\n                     ),\n                   ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n                 Container(\n                   padding: const EdgeInsets.symmetric(vertical: 15),\n                   decoration: const BoxDecoration(\n                       color: Colors.white,\n@@ -409,9 +321,8 @@\n                                               fontWeight: FontWeight.w700),\n                                         ),\n                                       ],\n                                     ),\n-\n                                     Row(\n                                       mainAxisAlignment:\n                                           MainAxisAlignment.spaceBetween,\n                                       children: [\n@@ -600,11 +511,8 @@\n                                                         onPressed: () {\n                                                           context.pop();\n \n                                                           apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n                                                         }),\n                                                     const SizedBox(\n                                                       height: 15,\n                                                     ),\n@@ -768,8 +676,11 @@\n                                                     fontSize: 23,\n                                                     fontWeight:\n                                                         FontWeight.w600),\n                                               ),\n+                                             \n+\n+\n                                               Text(\n                                                 \"Please enter toll amount\",\n                                                 textAlign: TextAlign.center,\n                                                 style: TextStyle(\n@@ -1291,4 +1202,5 @@\n         return Colors.blue;\n     }\n   }\n }\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725681314828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,10 +107,9 @@\n             markers: _markers,\n             polylines: _polylines,\n             onMapCreated: (GoogleMapController controller) {\n               mapController = controller;\n-              addMarkers();\n-              loadMapRoad();\n+\n             },\n           ),\n           if (rideObj[\"booking_status\"] != bsComplete)\n             Column(\n@@ -905,101 +904,11 @@\n       ),\n     );\n   }\n \n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n+ \n \n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n \n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    await controller.clearAllRoads();\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n   //TODO: ApiCalling\n \n   void apiWaitingForUser() {\n     Globs.showHUD();\n@@ -1071,9 +980,9 @@\n       if (responseObj[KKey.status] == \"1\") {\n         rideObj = responseObj[KKey.payload] as Map? ?? {};\n         LocationHelper.shared().startRideLocationSave(\n             rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n+\n       } else {\n         mdShowAlert(Globs.appName,\n             responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n@@ -1202,5 +1111,4 @@\n         return Colors.blue;\n     }\n   }\n }\n-*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725682159611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/location_helper.dart';\n@@ -31,9 +31,9 @@\n const bsStart = 4;\n const bsComplete = 5;\n const bsCancel = 6;\n \n-class _RunRideViewState extends State<RunRideView> {\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n   bool isOpen = true;\n \n   Map rideObj = {};\n \n@@ -43,35 +43,37 @@\n   //1 = Accept Ride\n   //2 = Start\n   //4 = Complete\n \n-  late GoogleMapController mapController;\n-  final Set<Marker> _markers = {};\n-  final Set<Polyline> _polylines = {};\n-  LatLng? _initialPosition;\n-\n+  late MapController controller;\n+  \n   String timeCount = \"...\";\n   String km = \"...\";\n   double ratingVal = 5.0;\n-\n   @override\n   void initState() {\n+    // TODO: implement initState\n     super.initState();\n \n     rideObj = widget.rObj;\n \n     if (rideObj[\"booking_status\"] < bsStart) {\n-      _initialPosition = LatLng(\n-        double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-        double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n       );\n     } else {\n-      _initialPosition = LatLng(\n-        double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-        double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n       );\n     }\n \n+    controller.addObserver(this);\n+\n     SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n       print(\"user_cancel_ride socket get : ${data.toString()}\");\n       if (data[KKey.status] == \"1\") {\n         if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n@@ -88,9 +90,11 @@\n   }\n \n   @override\n   void dispose() {\n+    // TODO: implement dispose\n     super.dispose();\n+    controller.dispose();\n   }\n \n   @override\n   Widget build(BuildContext context) {\n@@ -98,19 +102,43 @@\n \n     return Scaffold(\n       body: Stack(\n         children: [\n-          GoogleMap(\n-            initialCameraPosition: CameraPosition(\n-              target: _initialPosition ?? LatLng(0, 0),\n-              zoom: 15,\n-            ),\n-            markers: _markers,\n-            polylines: _polylines,\n-            onMapCreated: (GoogleMapController controller) {\n-              mapController = controller;\n-\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n             },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n           ),\n           if (rideObj[\"booking_status\"] != bsComplete)\n             Column(\n               crossAxisAlignment: CrossAxisAlignment.end,\n@@ -176,8 +204,69 @@\n                         ),\n                       ],\n                     ),\n                   ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n                 Container(\n                   padding: const EdgeInsets.symmetric(vertical: 15),\n                   decoration: const BoxDecoration(\n                       color: Colors.white,\n@@ -320,8 +409,9 @@\n                                               fontWeight: FontWeight.w700),\n                                         ),\n                                       ],\n                                     ),\n+\n                                     Row(\n                                       mainAxisAlignment:\n                                           MainAxisAlignment.spaceBetween,\n                                       children: [\n@@ -510,8 +600,11 @@\n                                                         onPressed: () {\n                                                           context.pop();\n \n                                                           apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n                                                         }),\n                                                     const SizedBox(\n                                                       height: 15,\n                                                     ),\n@@ -675,11 +768,8 @@\n                                                     fontSize: 23,\n                                                     fontWeight:\n                                                         FontWeight.w600),\n                                               ),\n-                                             \n-\n-\n                                               Text(\n                                                 \"Please enter toll amount\",\n                                                 textAlign: TextAlign.center,\n                                                 style: TextStyle(\n@@ -904,11 +994,101 @@\n       ),\n     );\n   }\n \n- \n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n \n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n \n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n   //TODO: ApiCalling\n \n   void apiWaitingForUser() {\n     Globs.showHUD();\n@@ -980,9 +1160,9 @@\n       if (responseObj[KKey.status] == \"1\") {\n         rideObj = responseObj[KKey.payload] as Map? ?? {};\n         LocationHelper.shared().startRideLocationSave(\n             rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-\n+        loadMapRoad();\n       } else {\n         mdShowAlert(Globs.appName,\n             responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n"
                },
                {
                    "date": 1725689834599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1291,1304 +1291,4 @@\n         return Colors.blue;\n     }\n   }\n }\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/location_helper.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class RunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const RunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  \n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  double ratingVal = 5.0;\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n-      print(\"user_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {\n-                                   if(ServiceCall.userType == 1) {\n-                          context.push(const SupportMessageView(uObj: {},));\n-                        }else{\n-                          context.push(const SupportMessageView(uObj: {},));\n-                        }\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: rideObj[\"booking_status\"] == bsGoUser\n-                                ? \"ARRIVED\"\n-                                : rideObj[\"booking_status\"] == bsWaitUser\n-                                    ? \"START\"\n-                                    : \"COMPLETE\",\n-                            onPressed: () async {\n-                              if (rideObj[\"booking_status\"] == bsGoUser) {\n-                                // Api Calling Waiting For User\n-                                apiWaitingForUser();\n-                              } else if (rideObj[\"booking_status\"] ==\n-                                  bsWaitUser) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtOTP,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"----\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-\n-                                                      apiRideStart();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"RIDE START\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              } else if (rideObj[\"booking_status\"] == bsStart) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter Toll Amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter toll amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtToll,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"\\$0\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                      apiRideStop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"DONE\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              }\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    await controller.clearAllRoads();\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiWaitingForUser() {\n-    Globs.showHUD();\n-    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n-        SVKey.svDriverWaitUser, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStart() {\n-    if (txtOTP.text.length != 4) {\n-      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n-      return;\n-    }\n-\n-    var startLocation = LocationHelper.shared().lastLocation;\n-\n-    if (startLocation == null) {\n-      return;\n-    }\n-\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"pickup_latitude\": \"${startLocation.latitude}\",\n-      \"pickup_longitude\": \"${startLocation.longitude}\",\n-      \"otp_code\": txtOTP.text\n-    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        LocationHelper.shared().startRideLocationSave(\n-            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStop() {\n-    var endLocation = LocationHelper.shared().lastLocation;\n-\n-    if (endLocation == null) {\n-      return;\n-    }\n-    LocationHelper.shared().stopRideLocationSave();\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"drop_latitude\": \"${endLocation.latitude}\",\n-      \"drop_longitude\": \"${endLocation.longitude}\",\n-      \"ride_location\": LocationHelper.shared()\n-          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n-      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n-    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-\n-        mdShowAlert(\"Ride Completed\",\n-            responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"Pickup Up \";\n-      case 3:\n-        return \"Waiting For \";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1725692464872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1212 @@\n+import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class RunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const RunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _RunRideViewState extends State<RunRideView> {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late GoogleMapController mapController;\n+  Set<Marker> _markers = {};\n+  Polyline _polyline = Polyline(polylineId: PolylineId('route'));\n+\n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  double ratingVal = 5.0;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+     // _addMarker(\n+        LatLng(\n+          double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+          double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+      //  ),\n+       // \"pickup\",\n+      //  \"assets/img/pickup_pin.png\",\n+      );\n+    } else {\n+     // _addMarker(\n+        LatLng(\n+          double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+          double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+       // ),\n+        //\"dropoff\",\n+       // \"assets/img/drop_pin.png\",\n+      );\n+    }\n+\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    super.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          GoogleMap(\n+            onMapCreated: (GoogleMapController controller) {\n+              mapController = controller;\n+              //_loadMapRoad();\n+            },\n+            initialCameraPosition: CameraPosition(\n+              target: LatLng(\n+                double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+              ),\n+              zoom: 15,\n+            ),\n+            markers: _markers,\n+            polylines: {_polyline},\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                         \n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  /*void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }*/\n+\n+  //TODO: ApiCalling\n+\n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n+    }\n+\n+    var startLocation = LocationHelper.shared().lastLocation;\n+\n+    if (startLocation == null) {\n+      return;\n+    }\n+\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        //loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n+\n+    if (endLocation == null) {\n+      return;\n+    }\n+    LocationHelper.shared().stopRideLocationSave();\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"Pickup Up \";\n+      case 3:\n+        return \"Waiting For \";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1725698292681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,1304 @@\n+\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n+import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n+import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n+import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/location_helper.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/icon_title_button.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+import 'package:taxi_driver/view/home/tip_detail_view.dart';\n+\n+class RunRideView extends StatefulWidget {\n+  final Map rObj;\n+  const RunRideView({super.key, required this.rObj});\n+\n+  @override\n+  State<RunRideView> createState() => _RunRideViewState();\n+}\n+\n+const bsPending = 0;\n+const bsAccept = 1;\n+const bsGoUser = 2;\n+const bsWaitUser = 3;\n+const bsStart = 4;\n+const bsComplete = 5;\n+const bsCancel = 6;\n+\n+class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n+  bool isOpen = true;\n+\n+  Map rideObj = {};\n+\n+  TextEditingController txtOTP = TextEditingController();\n+  TextEditingController txtToll = TextEditingController();\n+\n+  //1 = Accept Ride\n+  //2 = Start\n+  //4 = Complete\n+\n+  late MapController controller;\n+  \n+  String timeCount = \"...\";\n+  String km = \"...\";\n+  double ratingVal = 5.0;\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    rideObj = widget.rObj;\n+\n+    if (rideObj[\"booking_status\"] < bsStart) {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+      );\n+    } else {\n+      controller = MapController(\n+        initPosition: GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+      );\n+    }\n+\n+    controller.addObserver(this);\n+\n+    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n+      print(\"user_cancel_ride socket get : ${data.toString()}\");\n+      if (data[KKey.status] == \"1\") {\n+        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n+          openUserRideCancelPopup();\n+        }\n+      }\n+    });\n+  }\n+\n+  void openUserRideCancelPopup() async {\n+    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n+      context.pop();\n+    }, isForce: true);\n+  }\n+\n+  @override\n+  void dispose() {\n+    // TODO: implement dispose\n+    super.dispose();\n+    controller.dispose();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n+\n+    return Scaffold(\n+      body: Stack(\n+        children: [\n+          OSMFlutter(\n+            controller: controller,\n+            osmOption: OSMOption(\n+                enableRotationByGesture: true,\n+                zoomOption: const ZoomOption(\n+                  initZoom: 15,\n+                  minZoomLevel: 3,\n+                  maxZoomLevel: 19,\n+                  stepZoom: 1.0,\n+                ),\n+                staticPoints: [],\n+                roadConfiguration: const RoadOption(\n+                  roadColor: Colors.blueAccent,\n+                ),\n+                markerOption: MarkerOption(\n+                  defaultMarker: const MarkerIcon(\n+                    icon: Icon(\n+                      Icons.person_pin_circle,\n+                      color: Colors.blue,\n+                      size: 56,\n+                    ),\n+                  ),\n+                ),\n+                showDefaultInfoWindow: false),\n+            onMapIsReady: (isReady) {\n+              if (isReady) {\n+                print(\"map is ready\");\n+              }\n+            },\n+            onLocationChanged: (myLocation) {\n+              print(\"user location :$myLocation\");\n+            },\n+            onGeoPointClicked: (myLocation) {\n+              print(\"GeoPointClicked location :$myLocation\");\n+            },\n+          ),\n+          if (rideObj[\"booking_status\"] != bsComplete)\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                if (rideObj[\"booking_status\"] == bsWaitUser)\n+                  // Ride Arrived Status\n+                  Container(\n+                    margin: const EdgeInsets.all(20),\n+                    padding: const EdgeInsets.symmetric(\n+                        vertical: 10, horizontal: 25),\n+                    decoration: BoxDecoration(\n+                        color: Colors.white,\n+                        borderRadius: BorderRadius.circular(50),\n+                        boxShadow: const [\n+                          BoxShadow(\n+                            color: Colors.black12,\n+                            blurRadius: 10,\n+                            offset: Offset(0, -5),\n+                          ),\n+                        ]),\n+                    child: Column(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        Stack(\n+                          alignment: Alignment.bottomCenter,\n+                          children: [\n+                            TimerCountdown(\n+                              format: CountDownTimerFormat.minutesSeconds,\n+                              endTime: DateTime.now().add(\n+                                const Duration(\n+                                  minutes: 2,\n+                                ),\n+                              ),\n+                              onEnd: () {\n+                                print(\"Timer finished\");\n+                              },\n+                              timeTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              colonsTextStyle: TextStyle(\n+                                color: TColor.secondary,\n+                                fontWeight: FontWeight.w800,\n+                                fontSize: 25,\n+                              ),\n+                              spacerWidth: 0,\n+                              daysDescription: \"\",\n+                              hoursDescription: \"\",\n+                              minutesDescription: \"\",\n+                              secondsDescription: \"\",\n+                            ),\n+                            Text(\n+                              \"Waiting for rider\",\n+                              textAlign: TextAlign.center,\n+                              style: TextStyle(\n+                                color: TColor.secondaryText,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                // if (rideObj[\"booking_status\"] == bsStart)\n+                //   // Ride Started Status\n+                //   Container(\n+                //     margin: const EdgeInsets.all(20),\n+                //     padding: const EdgeInsets.symmetric(\n+                //         vertical: 10, horizontal: 25),\n+                //     decoration: BoxDecoration(\n+                //         color: Colors.white,\n+                //         borderRadius: BorderRadius.circular(50),\n+                //         boxShadow: const [\n+                //           BoxShadow(\n+                //             color: Colors.black12,\n+                //             blurRadius: 10,\n+                //             offset: Offset(0, -5),\n+                //           ),\n+                //         ]),\n+                //     child: Column(\n+                //       mainAxisSize: MainAxisSize.min,\n+                //       children: [\n+                //         Stack(\n+                //           alignment: Alignment.bottomCenter,\n+                //           children: [\n+                //             TimerCountdown(\n+                //               format: CountDownTimerFormat.minutesSeconds,\n+                //               endTime: DateTime.now().add(\n+                //                 const Duration(\n+                //                   minutes: 2,\n+                //                 ),\n+                //               ),\n+                //               onEnd: () {\n+                //                 print(\"Timer finished\");\n+                //               },\n+                //               timeTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               colonsTextStyle: TextStyle(\n+                //                 color: TColor.secondary,\n+                //                 fontWeight: FontWeight.w800,\n+                //                 fontSize: 25,\n+                //               ),\n+                //               spacerWidth: 0,\n+                //               daysDescription: \"\",\n+                //               hoursDescription: \"\",\n+                //               minutesDescription: \"\",\n+                //               secondsDescription: \"\",\n+                //             ),\n+                //             Text(\n+                //               \"Arrived at dropoff\",\n+                //               textAlign: TextAlign.center,\n+                //               style: TextStyle(\n+                //                 color: TColor.secondaryText,\n+                //                 fontSize: 16,\n+                //               ),\n+                //             ),\n+                //           ],\n+                //         ),\n+                //       ],\n+                //     ),\n+                //   ),\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Row(\n+                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n+                          children: [\n+                            IconButton(\n+                              onPressed: () {\n+                                setState(() {\n+                                  isOpen = !isOpen;\n+                                });\n+                              },\n+                              icon: Image.asset(\n+                                isOpen\n+                                    ? \"assets/img/open_btn.png\"\n+                                    : \"assets/img/close_btn.png\",\n+                                width: 15,\n+                                height: 15,\n+                              ),\n+                            ),\n+                            Row(\n+                              mainAxisSize: MainAxisSize.min,\n+                              children: [\n+                                Text(\n+                                  \"$timeCount min\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                ClipRRect(\n+                                  borderRadius: BorderRadius.circular(17.5),\n+                                  child: CachedNetworkImage(\n+                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                    width: 35,\n+                                    height: 35,\n+                                    fit: BoxFit.contain,\n+                                  ),\n+                                ),\n+                                const SizedBox(\n+                                  width: 15,\n+                                ),\n+                                Text(\n+                                  \"$km km\",\n+                                  style: TextStyle(\n+                                      color: TColor.primaryText,\n+                                      fontSize: 18,\n+                                      fontWeight: FontWeight.w800),\n+                                ),\n+                              ],\n+                            ),\n+                            IconButton(\n+                              onPressed: () {},\n+                              icon: Image.asset(\n+                                \"assets/img/call.png\",\n+                                width: 30,\n+                                height: 30,\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      ),\n+                      Text(\n+                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.secondaryText,\n+                          fontSize: 16,\n+                        ),\n+                      ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          rideObj[\"name\"] as String? ?? \"\",\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                        Text(\n+                                          statusText(),\n+                                          style: TextStyle(\n+                                              color: statusColor(),\n+                                              fontSize: 20,\n+                                              fontWeight: FontWeight.w700),\n+                                        ),\n+                                      ],\n+                                    ),\n+\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                        Text(\n+                                          (rideObj[\"payment_type\"] ?? 1) == 1\n+                                              ? \"COD\"\n+                                              : \"Online\",\n+                                          style: TextStyle(\n+                                            color: TColor.secondaryText,\n+                                            fontSize: 20,\n+                                            fontWeight: FontWeight.w700,\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen &&\n+                          (rideObj[\"booking_status\"] == bsWaitUser ||\n+                              rideObj[\"booking_status\"] == bsStart))\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Padding(\n+                          padding: const EdgeInsets.all(15),\n+                          child: Row(\n+                            children: [\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(5),\n+                                child: CachedNetworkImage(\n+                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n+                                  width: 50,\n+                                  height: 50,\n+                                  fit: BoxFit.contain,\n+                                ),\n+                              ),\n+                              const SizedBox(\n+                                width: 15,\n+                              ),\n+                              Expanded(\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    Text(\n+                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          fontWeight: FontWeight.w700),\n+                                    ),\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n+                                          style: TextStyle(\n+                                              color: TColor.secondaryText,\n+                                              fontSize: 14),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                  ],\n+                                ),\n+                              )\n+                            ],\n+                          ),\n+                        ),\n+                      if (isOpen)\n+                        const Divider(\n+                          height: 0.5,\n+                          endIndent: 20,\n+                          indent: 20,\n+                        ),\n+                      if (isOpen)\n+                        const SizedBox(\n+                          height: 8,\n+                        ),\n+                      if (isOpen)\n+                        Row(\n+                          children: [\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/chat.png\",\n+                                title: \"Chat\",\n+                                onPressed: () {\n+                                  context.push(SupportMessageView(uObj: {\n+                                    \"user_id\": rideObj[\"user_id\"],\n+                                    \"name\": rideObj[\"name\"],\n+                                    \"image\": rideObj[\"image\"]\n+                                  }));\n+                                },\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/message.png\",\n+                                title: \"Message\",\n+                                onPressed: () {},\n+                              ),\n+                            ),\n+                            Expanded(\n+                              child: IconTitleButton(\n+                                icon: \"assets/img/cancel_trip.png\",\n+                                title: \"Cancel Tip\",\n+                                onPressed: () async {\n+                                  await showModalBottomSheet(\n+                                      backgroundColor: Colors.transparent,\n+                                      barrierColor: Colors.transparent,\n+                                      isScrollControlled: true,\n+                                      context: context,\n+                                      builder: (context) {\n+                                        return Stack(\n+                                            alignment: Alignment.bottomCenter,\n+                                            children: [\n+                                              BackdropFilter(\n+                                                filter: ImageFilter.blur(\n+                                                    sigmaX: 5, sigmaY: 5),\n+                                                child: Container(\n+                                                  color: Colors.black38,\n+                                                ),\n+                                              ),\n+                                              Container(\n+                                                padding:\n+                                                    const EdgeInsets.symmetric(\n+                                                        vertical: 20,\n+                                                        horizontal: 20),\n+                                                decoration: const BoxDecoration(\n+                                                    color: Colors.white,\n+                                                    borderRadius:\n+                                                        BorderRadius.only(\n+                                                            topLeft: Radius\n+                                                                .circular(10),\n+                                                            topRight:\n+                                                                Radius.circular(\n+                                                                    10)),\n+                                                    boxShadow: [\n+                                                      BoxShadow(\n+                                                        color: Colors.black12,\n+                                                        blurRadius: 10,\n+                                                        offset: Offset(0, -5),\n+                                                      ),\n+                                                    ]),\n+                                                child: Column(\n+                                                  mainAxisSize:\n+                                                      MainAxisSize.min,\n+                                                  children: [\n+                                                    Text(\n+                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n+                                                      style: TextStyle(\n+                                                          color: TColor\n+                                                              .primaryText,\n+                                                          fontSize: 18,\n+                                                          fontWeight:\n+                                                              FontWeight.w800),\n+                                                    ),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    const Divider(),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"YES, CANCEL\",\n+                                                        type:\n+                                                            RoundButtonType.red,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+\n+                                                          apiCancelRide();\n+\n+                                                          // context.push(\n+                                                          //     const ReasonView());\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                    RoundButton(\n+                                                        title: \"NO\",\n+                                                        type: RoundButtonType\n+                                                            .boarded,\n+                                                        onPressed: () {\n+                                                          context.pop();\n+                                                        }),\n+                                                    const SizedBox(\n+                                                      height: 15,\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              ),\n+                                            ]);\n+                                      });\n+                                },\n+                              ),\n+                            ),\n+                          ],\n+                        ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: rideObj[\"booking_status\"] == bsGoUser\n+                                ? \"ARRIVED\"\n+                                : rideObj[\"booking_status\"] == bsWaitUser\n+                                    ? \"START\"\n+                                    : \"COMPLETE\",\n+                            onPressed: () async {\n+                              if (rideObj[\"booking_status\"] == bsGoUser) {\n+                                // Api Calling Waiting For User\n+                                apiWaitingForUser();\n+                              } else if (rideObj[\"booking_status\"] ==\n+                                  bsWaitUser) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter OTP\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtOTP,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"----\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+\n+                                                      apiRideStart();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"RIDE START\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              } else if (rideObj[\"booking_status\"] == bsStart) {\n+                                await showDialog(\n+                                    context: context,\n+                                    barrierColor: const Color(0xff32384D)\n+                                        .withOpacity(0.4),\n+                                    builder: (context) {\n+                                      return Dialog(\n+                                        shape: RoundedRectangleBorder(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10)),\n+                                        child: Container(\n+                                          padding: const EdgeInsets.all(15),\n+                                          width: context.width - 50,\n+                                          height: 190,\n+                                          child: Column(\n+                                            crossAxisAlignment:\n+                                                CrossAxisAlignment.start,\n+                                            children: [\n+                                              Text(\n+                                                \"Enter Toll Amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.primaryText,\n+                                                    fontSize: 23,\n+                                                    fontWeight:\n+                                                        FontWeight.w600),\n+                                              ),\n+                                              Text(\n+                                                \"Please enter toll amount\",\n+                                                textAlign: TextAlign.center,\n+                                                style: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 8),\n+                                              ),\n+                                              TextField(\n+                                                controller: txtToll,\n+                                                keyboardType:\n+                                                    TextInputType.number,\n+                                                style: TextStyle(\n+                                                  color: TColor.primaryText,\n+                                                  fontSize: 16,\n+                                                ),\n+                                                decoration: InputDecoration(\n+                                                  enabledBorder:\n+                                                      InputBorder.none,\n+                                                  focusedBorder:\n+                                                      InputBorder.none,\n+                                                  hintText: \"\\$0\",\n+                                                  hintStyle: TextStyle(\n+                                                    color: TColor.secondaryText,\n+                                                    fontSize: 16,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                              const Divider(),\n+                                              Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.end,\n+                                                children: [\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"CANCEL\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.red,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  ),\n+                                                  TextButton(\n+                                                    onPressed: () {\n+                                                      context.pop();\n+                                                      apiRideStop();\n+                                                    },\n+                                                    child: Text(\n+                                                      \"DONE\",\n+                                                      textAlign:\n+                                                          TextAlign.center,\n+                                                      style: TextStyle(\n+                                                          color: TColor.primary,\n+                                                          fontSize: 16,\n+                                                          fontWeight:\n+                                                              FontWeight.w600),\n+                                                    ),\n+                                                  )\n+                                                ],\n+                                              )\n+                                            ],\n+                                          ),\n+                                        ),\n+                                      );\n+                                    });\n+                              }\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            )\n+          else\n+            Column(\n+              crossAxisAlignment: CrossAxisAlignment.end,\n+              mainAxisAlignment: MainAxisAlignment.end,\n+              children: [\n+                Container(\n+                  padding: const EdgeInsets.symmetric(vertical: 15),\n+                  decoration: const BoxDecoration(\n+                      color: Colors.white,\n+                      borderRadius: BorderRadius.only(\n+                          topLeft: Radius.circular(10),\n+                          topRight: Radius.circular(10)),\n+                      boxShadow: [\n+                        BoxShadow(\n+                          color: Colors.black12,\n+                          blurRadius: 10,\n+                          offset: Offset(0, -5),\n+                        ),\n+                      ]),\n+                  child: Column(\n+                    children: [\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 15),\n+                        child: Text(\n+                          \"How was your rider?\",\n+                          textAlign: TextAlign.center,\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 18),\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 15,\n+                      ),\n+                      Text(\n+                        rideObj[\"name\"] as String? ?? \"\",\n+                        textAlign: TextAlign.center,\n+                        style: TextStyle(\n+                          color: TColor.primaryText,\n+                          fontSize: 25,\n+                          fontWeight: FontWeight.w800,\n+                        ),\n+                      ),\n+                      const SizedBox(\n+                        height: 8,\n+                      ),\n+                      RatingBar.builder(\n+                        initialRating: ratingVal,\n+                        minRating: 1,\n+                        direction: Axis.horizontal,\n+                        allowHalfRating: true,\n+                        itemCount: 5,\n+                        itemPadding:\n+                            const EdgeInsets.symmetric(horizontal: 4.0),\n+                        itemBuilder: (context, _) => const Icon(\n+                          Icons.star,\n+                          color: Colors.amber,\n+                        ),\n+                        onRatingUpdate: (rating) {\n+                          ratingVal = rating;\n+                          print(rating);\n+                        },\n+                      ),\n+                      const SizedBox(\n+                        height: 30,\n+                      ),\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 20),\n+                        child: RoundButton(\n+                            title: \"RATE RIDER\",\n+                            onPressed: () {\n+                              apiSubmitRate();\n+                              // context.push(const TipDetailsView());\n+                            }),\n+                      ),\n+                      const SizedBox(\n+                        height: 25,\n+                      ),\n+                    ],\n+                  ),\n+                )\n+              ],\n+            ),\n+          SafeArea(\n+            child: Column(\n+              mainAxisAlignment: MainAxisAlignment.start,\n+              children: [\n+                Padding(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n+                  child: InkWell(\n+                    onTap: () {\n+                      context.pop();\n+                    },\n+                    child: Container(\n+                      padding: const EdgeInsets.symmetric(\n+                          vertical: 15, horizontal: 25),\n+                      decoration: BoxDecoration(\n+                          color: Colors.white,\n+                          borderRadius: BorderRadius.circular(50),\n+                          boxShadow: const [\n+                            BoxShadow(\n+                              color: Colors.black26,\n+                              blurRadius: 10,\n+                            ),\n+                          ]),\n+                      child: Row(\n+                        children: [\n+                          Image.asset(\n+                            showPickUp\n+                                ? \"assets/img/pickup_pin_1.png\"\n+                                : \"assets/img/drop_pin_1.png\",\n+                            width: 30,\n+                            height: 30,\n+                          ),\n+                          const SizedBox(\n+                            width: 8,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              rideObj[showPickUp\n+                                      ? \"pickup_address\"\n+                                      : \"drop_address\"] as String? ??\n+                                  \"\",\n+                              style: TextStyle(\n+                                color: TColor.primaryText,\n+                                fontSize: 15,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                )\n+              ],\n+            ),\n+          )\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void addMarker() async {\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"pickup\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/pickup_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    await controller.setMarkerOfStaticPoint(\n+      id: \"dropoff\",\n+      markerIcon: MarkerIcon(\n+        iconWidget: Image.asset(\n+          \"assets/img/drop_pin.png\",\n+          width: 80,\n+          height: 80,\n+        ),\n+      ),\n+    );\n+\n+    loadMapRoad();\n+  }\n+\n+  void loadMapRoad() async {\n+    await controller.clearAllRoads();\n+    if (rideObj[\"booking_status\"] == bsGoUser ||\n+        rideObj[\"booking_status\"] == bsWaitUser) {\n+      // Current to Pickup Location Road Draw\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+            longitude:\n+                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n+      ], \"pickup\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude:\n+                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    } else {\n+      // Current Location to Drop Off Location Draw Road\n+      await controller.setStaticPosition([\n+        GeoPoint(\n+            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n+      ], \"dropoff\");\n+\n+      var roadInfo = await controller.drawRoad(\n+          GeoPoint(\n+              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n+              longitude:\n+                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n+          GeoPoint(\n+              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+              longitude:\n+                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n+          roadType: RoadType.car,\n+          roadOption: const RoadOption(\n+              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n+      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Future<void> mapIsReady(bool isReady) async {\n+    if (isReady) {\n+      addMarker();\n+    }\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void apiWaitingForUser() {\n+    Globs.showHUD();\n+    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n+        SVKey.svDriverWaitUser, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiCancelRide() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"booking_status\": rideObj[\"booking_status\"].toString()\n+    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        mdShowAlert(\n+            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n+            () {\n+          context.pop();\n+        });\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStart() {\n+    if (txtOTP.text.length != 4) {\n+      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n+      return;\n+    }\n+\n+    var startLocation = LocationHelper.shared().lastLocation;\n+\n+    if (startLocation == null) {\n+      return;\n+    }\n+\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"pickup_latitude\": \"${startLocation.latitude}\",\n+      \"pickup_longitude\": \"${startLocation.longitude}\",\n+      \"otp_code\": txtOTP.text\n+    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        LocationHelper.shared().startRideLocationSave(\n+            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n+        loadMapRoad();\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiRideStop() {\n+    var endLocation = LocationHelper.shared().lastLocation;\n+\n+    if (endLocation == null) {\n+      return;\n+    }\n+    LocationHelper.shared().stopRideLocationSave();\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"booking_id\": rideObj[\"booking_id\"].toString(),\n+      \"drop_latitude\": \"${endLocation.latitude}\",\n+      \"drop_longitude\": \"${endLocation.longitude}\",\n+      \"ride_location\": LocationHelper.shared()\n+          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n+      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n+    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        rideObj = responseObj[KKey.payload] as Map? ?? {};\n+        if (mounted) {\n+          setState(() {});\n+        }\n+\n+        mdShowAlert(\"Ride Completed\",\n+            responseObj[KKey.message] as String? ?? MSG.success, () {});\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, err.toString(), () {});\n+    });\n+  }\n+\n+  void apiSubmitRate() {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      {\n+        \"booking_id\": rideObj[\"booking_id\"].toString(),\n+        \"rating\": ratingVal.toString(),\n+        \"comment\": \"\",\n+      },\n+      SVKey.svRideRating,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if (responseObj[KKey.status] == \"1\") {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.success, () {\n+            context.pop();\n+          });\n+        } else {\n+          mdShowAlert(Globs.appName,\n+              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        Globs.hideHUD();\n+        mdShowAlert(Globs.appName, err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  String statusName() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"Pickup Up \";\n+      case 3:\n+        return \"Waiting For \";\n+      case 4:\n+        return \"Ride Started With\";\n+      case 5:\n+        return \"Ride Complete With\";\n+      case 6:\n+        return \"Ride Cancel\";\n+      default:\n+        return \"Finding Driver Near By\";\n+    }\n+  }\n+\n+  String statusText() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return \"On Way\";\n+      case 3:\n+        return \"Waiting\";\n+      case 4:\n+        return \"Started\";\n+      case 5:\n+        return \"Completed\";\n+      case 6:\n+        return \"Cancel\";\n+      case 7:\n+        return \"No Drivers\";\n+      default:\n+        return \"Pending\";\n+    }\n+  }\n+\n+  Color statusColor() {\n+    switch (rideObj[\"booking_status\"]) {\n+      case 2:\n+        return Colors.green;\n+      case 3:\n+        return Colors.orange;\n+      case 4:\n+        return Colors.green;\n+      case 5:\n+        return Colors.green;\n+      case 6:\n+        return Colors.red;\n+      case 7:\n+        return Colors.red;\n+      default:\n+        return Colors.blue;\n+    }\n+  }\n+}\n+\n+/*import 'dart:ui';\n+\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n@@ -1208,5 +2504,5 @@\n       default:\n         return Colors.blue;\n     }\n   }\n-}\n+}*/\n"
                },
                {
                    "date": 1725699071954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-\n+/*\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n@@ -1292,11 +1292,11 @@\n         return Colors.blue;\n     }\n   }\n }\n+*/\n+import 'dart:ui';\n \n-/*import 'dart:ui';\n-\n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n@@ -2504,5 +2504,5 @@\n       default:\n         return Colors.blue;\n     }\n   }\n-}*/\n+}\n"
                },
                {
                    "date": 1725700290651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1304 +1,8 @@\n-/*\n import 'dart:ui';\n \n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/location_helper.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class RunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const RunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  \n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  double ratingVal = 5.0;\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n-      print(\"user_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: rideObj[\"booking_status\"] == bsGoUser\n-                                ? \"ARRIVED\"\n-                                : rideObj[\"booking_status\"] == bsWaitUser\n-                                    ? \"START\"\n-                                    : \"COMPLETE\",\n-                            onPressed: () async {\n-                              if (rideObj[\"booking_status\"] == bsGoUser) {\n-                                // Api Calling Waiting For User\n-                                apiWaitingForUser();\n-                              } else if (rideObj[\"booking_status\"] ==\n-                                  bsWaitUser) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtOTP,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"----\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-\n-                                                      apiRideStart();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"RIDE START\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              } else if (rideObj[\"booking_status\"] == bsStart) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter Toll Amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter toll amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtToll,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"\\$0\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                      apiRideStop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"DONE\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              }\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    await controller.clearAllRoads();\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiWaitingForUser() {\n-    Globs.showHUD();\n-    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n-        SVKey.svDriverWaitUser, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStart() {\n-    if (txtOTP.text.length != 4) {\n-      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n-      return;\n-    }\n-\n-    var startLocation = LocationHelper.shared().lastLocation;\n-\n-    if (startLocation == null) {\n-      return;\n-    }\n-\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"pickup_latitude\": \"${startLocation.latitude}\",\n-      \"pickup_longitude\": \"${startLocation.longitude}\",\n-      \"otp_code\": txtOTP.text\n-    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        LocationHelper.shared().startRideLocationSave(\n-            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStop() {\n-    var endLocation = LocationHelper.shared().lastLocation;\n-\n-    if (endLocation == null) {\n-      return;\n-    }\n-    LocationHelper.shared().stopRideLocationSave();\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"drop_latitude\": \"${endLocation.latitude}\",\n-      \"drop_longitude\": \"${endLocation.longitude}\",\n-      \"ride_location\": LocationHelper.shared()\n-          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n-      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n-    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-\n-        mdShowAlert(\"Ride Completed\",\n-            responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"Pickup Up \";\n-      case 3:\n-        return \"Waiting For \";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}\n-*/\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n@@ -1354,24 +58,24 @@\n \n     rideObj = widget.rObj;\n \n     if (rideObj[\"booking_status\"] < bsStart) {\n-     // _addMarker(\n+      _addMarker(\n         LatLng(\n           double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n           double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-      //  ),\n-       // \"pickup\",\n-      //  \"assets/img/pickup_pin.png\",\n+      ),\n+        \"pickup\",\n+        \"assets/img/pickup_pin.png\",\n       );\n     } else {\n-     // _addMarker(\n+      _addMarker(\n         LatLng(\n           double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n           double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-       // ),\n-        //\"dropoff\",\n-       // \"assets/img/drop_pin.png\",\n+        ),\n+        \"dropoff\",\n+        \"assets/img/drop_pin.png\",\n       );\n     }\n \n     SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n@@ -1404,9 +108,9 @@\n         children: [\n           GoogleMap(\n             onMapCreated: (GoogleMapController controller) {\n               mapController = controller;\n-              //_loadMapRoad();\n+              _loadMapRoad();\n             },\n             initialCameraPosition: CameraPosition(\n               target: LatLng(\n                 double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n@@ -2208,9 +912,9 @@\n       ),\n     );\n   }\n \n-  /*void addMarker() async {\n+  void addMarker() async {\n     await controller.setMarkerOfStaticPoint(\n       id: \"pickup\",\n       markerIcon: MarkerIcon(\n         iconWidget: Image.asset(\n@@ -2299,9 +1003,9 @@\n   Future<void> mapIsReady(bool isReady) async {\n     if (isReady) {\n       addMarker();\n     }\n-  }*/\n+  }\n \n   //TODO: ApiCalling\n \n   void apiWaitingForUser() {\n@@ -2374,9 +1078,9 @@\n       if (responseObj[KKey.status] == \"1\") {\n         rideObj = responseObj[KKey.payload] as Map? ?? {};\n         LocationHelper.shared().startRideLocationSave(\n             rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        //loadMapRoad();\n+        loadMapRoad();\n       } else {\n         mdShowAlert(Globs.appName,\n             responseObj[KKey.message] as String? ?? MSG.fail, () {});\n       }\n"
                },
                {
                    "date": 1725700301204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1209,1298 +1209,4 @@\n         return Colors.blue;\n     }\n   }\n }\n-import 'dart:ui';\n-\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\n-import 'package:flutter_rating_bar/flutter_rating_bar.dart';\n-import 'package:flutter_timer_countdown/flutter_timer_countdown.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/location_helper.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/icon_title_button.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-import 'package:taxi_driver/view/home/tip_detail_view.dart';\n-\n-class RunRideView extends StatefulWidget {\n-  final Map rObj;\n-  const RunRideView({super.key, required this.rObj});\n-\n-  @override\n-  State<RunRideView> createState() => _RunRideViewState();\n-}\n-\n-const bsPending = 0;\n-const bsAccept = 1;\n-const bsGoUser = 2;\n-const bsWaitUser = 3;\n-const bsStart = 4;\n-const bsComplete = 5;\n-const bsCancel = 6;\n-\n-class _RunRideViewState extends State<RunRideView> with OSMMixinObserver {\n-  bool isOpen = true;\n-\n-  Map rideObj = {};\n-\n-  TextEditingController txtOTP = TextEditingController();\n-  TextEditingController txtToll = TextEditingController();\n-\n-  //1 = Accept Ride\n-  //2 = Start\n-  //4 = Complete\n-\n-  late MapController controller;\n-  \n-  String timeCount = \"...\";\n-  String km = \"...\";\n-  double ratingVal = 5.0;\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    rideObj = widget.rObj;\n-\n-    if (rideObj[\"booking_status\"] < bsStart) {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-      );\n-    } else {\n-      controller = MapController(\n-        initPosition: GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-      );\n-    }\n-\n-    controller.addObserver(this);\n-\n-    SocketManager.shared.socket?.on(\"user_cancel_ride\", (data) {\n-      print(\"user_cancel_ride socket get : ${data.toString()}\");\n-      if (data[KKey.status] == \"1\") {\n-        if (data[KKey.payload][\"booking_id\"] == rideObj[\"booking_id\"]) {\n-          openUserRideCancelPopup();\n-        }\n-      }\n-    });\n-  }\n-\n-  void openUserRideCancelPopup() async {\n-    mdShowAlert(\"Ride Cancel\", \"User cancel ride\", () {\n-      context.pop();\n-    }, isForce: true);\n-  }\n-\n-  @override\n-  void dispose() {\n-    // TODO: implement dispose\n-    super.dispose();\n-    controller.dispose();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    var showPickUp = rideObj[\"booking_status\"] < bsStart;\n-\n-    return Scaffold(\n-      body: Stack(\n-        children: [\n-          OSMFlutter(\n-            controller: controller,\n-            osmOption: OSMOption(\n-                enableRotationByGesture: true,\n-                zoomOption: const ZoomOption(\n-                  initZoom: 15,\n-                  minZoomLevel: 3,\n-                  maxZoomLevel: 19,\n-                  stepZoom: 1.0,\n-                ),\n-                staticPoints: [],\n-                roadConfiguration: const RoadOption(\n-                  roadColor: Colors.blueAccent,\n-                ),\n-                markerOption: MarkerOption(\n-                  defaultMarker: const MarkerIcon(\n-                    icon: Icon(\n-                      Icons.person_pin_circle,\n-                      color: Colors.blue,\n-                      size: 56,\n-                    ),\n-                  ),\n-                ),\n-                showDefaultInfoWindow: false),\n-            onMapIsReady: (isReady) {\n-              if (isReady) {\n-                print(\"map is ready\");\n-              }\n-            },\n-            onLocationChanged: (myLocation) {\n-              print(\"user location :$myLocation\");\n-            },\n-            onGeoPointClicked: (myLocation) {\n-              print(\"GeoPointClicked location :$myLocation\");\n-            },\n-          ),\n-          if (rideObj[\"booking_status\"] != bsComplete)\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                if (rideObj[\"booking_status\"] == bsWaitUser)\n-                  // Ride Arrived Status\n-                  Container(\n-                    margin: const EdgeInsets.all(20),\n-                    padding: const EdgeInsets.symmetric(\n-                        vertical: 10, horizontal: 25),\n-                    decoration: BoxDecoration(\n-                        color: Colors.white,\n-                        borderRadius: BorderRadius.circular(50),\n-                        boxShadow: const [\n-                          BoxShadow(\n-                            color: Colors.black12,\n-                            blurRadius: 10,\n-                            offset: Offset(0, -5),\n-                          ),\n-                        ]),\n-                    child: Column(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        Stack(\n-                          alignment: Alignment.bottomCenter,\n-                          children: [\n-                            TimerCountdown(\n-                              format: CountDownTimerFormat.minutesSeconds,\n-                              endTime: DateTime.now().add(\n-                                const Duration(\n-                                  minutes: 2,\n-                                ),\n-                              ),\n-                              onEnd: () {\n-                                print(\"Timer finished\");\n-                              },\n-                              timeTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              colonsTextStyle: TextStyle(\n-                                color: TColor.secondary,\n-                                fontWeight: FontWeight.w800,\n-                                fontSize: 25,\n-                              ),\n-                              spacerWidth: 0,\n-                              daysDescription: \"\",\n-                              hoursDescription: \"\",\n-                              minutesDescription: \"\",\n-                              secondsDescription: \"\",\n-                            ),\n-                            Text(\n-                              \"Waiting for rider\",\n-                              textAlign: TextAlign.center,\n-                              style: TextStyle(\n-                                color: TColor.secondaryText,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                // if (rideObj[\"booking_status\"] == bsStart)\n-                //   // Ride Started Status\n-                //   Container(\n-                //     margin: const EdgeInsets.all(20),\n-                //     padding: const EdgeInsets.symmetric(\n-                //         vertical: 10, horizontal: 25),\n-                //     decoration: BoxDecoration(\n-                //         color: Colors.white,\n-                //         borderRadius: BorderRadius.circular(50),\n-                //         boxShadow: const [\n-                //           BoxShadow(\n-                //             color: Colors.black12,\n-                //             blurRadius: 10,\n-                //             offset: Offset(0, -5),\n-                //           ),\n-                //         ]),\n-                //     child: Column(\n-                //       mainAxisSize: MainAxisSize.min,\n-                //       children: [\n-                //         Stack(\n-                //           alignment: Alignment.bottomCenter,\n-                //           children: [\n-                //             TimerCountdown(\n-                //               format: CountDownTimerFormat.minutesSeconds,\n-                //               endTime: DateTime.now().add(\n-                //                 const Duration(\n-                //                   minutes: 2,\n-                //                 ),\n-                //               ),\n-                //               onEnd: () {\n-                //                 print(\"Timer finished\");\n-                //               },\n-                //               timeTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               colonsTextStyle: TextStyle(\n-                //                 color: TColor.secondary,\n-                //                 fontWeight: FontWeight.w800,\n-                //                 fontSize: 25,\n-                //               ),\n-                //               spacerWidth: 0,\n-                //               daysDescription: \"\",\n-                //               hoursDescription: \"\",\n-                //               minutesDescription: \"\",\n-                //               secondsDescription: \"\",\n-                //             ),\n-                //             Text(\n-                //               \"Arrived at dropoff\",\n-                //               textAlign: TextAlign.center,\n-                //               style: TextStyle(\n-                //                 color: TColor.secondaryText,\n-                //                 fontSize: 16,\n-                //               ),\n-                //             ),\n-                //           ],\n-                //         ),\n-                //       ],\n-                //     ),\n-                //   ),\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Row(\n-                          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n-                          children: [\n-                            IconButton(\n-                              onPressed: () {\n-                                setState(() {\n-                                  isOpen = !isOpen;\n-                                });\n-                              },\n-                              icon: Image.asset(\n-                                isOpen\n-                                    ? \"assets/img/open_btn.png\"\n-                                    : \"assets/img/close_btn.png\",\n-                                width: 15,\n-                                height: 15,\n-                              ),\n-                            ),\n-                            Row(\n-                              mainAxisSize: MainAxisSize.min,\n-                              children: [\n-                                Text(\n-                                  \"$timeCount min\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                ClipRRect(\n-                                  borderRadius: BorderRadius.circular(17.5),\n-                                  child: CachedNetworkImage(\n-                                    imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                    width: 35,\n-                                    height: 35,\n-                                    fit: BoxFit.contain,\n-                                  ),\n-                                ),\n-                                const SizedBox(\n-                                  width: 15,\n-                                ),\n-                                Text(\n-                                  \"$km km\",\n-                                  style: TextStyle(\n-                                      color: TColor.primaryText,\n-                                      fontSize: 18,\n-                                      fontWeight: FontWeight.w800),\n-                                ),\n-                              ],\n-                            ),\n-                            IconButton(\n-                              onPressed: () {},\n-                              icon: Image.asset(\n-                                \"assets/img/call.png\",\n-                                width: 30,\n-                                height: 30,\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      ),\n-                      Text(\n-                        \"${statusName()} ${rideObj[\"name\"] ?? \"\"}\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.secondaryText,\n-                          fontSize: 16,\n-                        ),\n-                      ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"image\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          rideObj[\"name\"] as String? ?? \"\",\n-                                          style: const TextStyle(\n-                                              fontSize: 16,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                        Text(\n-                                          statusText(),\n-                                          style: TextStyle(\n-                                              color: statusColor(),\n-                                              fontSize: 20,\n-                                              fontWeight: FontWeight.w700),\n-                                        ),\n-                                      ],\n-                                    ),\n-\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"${rideObj[\"mobile_code\"] as String? ?? \"\"} ${rideObj[\"mobile\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                        Text(\n-                                          (rideObj[\"payment_type\"] ?? 1) == 1\n-                                              ? \"COD\"\n-                                              : \"Online\",\n-                                          style: TextStyle(\n-                                            color: TColor.secondaryText,\n-                                            fontSize: 20,\n-                                            fontWeight: FontWeight.w700,\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen &&\n-                          (rideObj[\"booking_status\"] == bsWaitUser ||\n-                              rideObj[\"booking_status\"] == bsStart))\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Padding(\n-                          padding: const EdgeInsets.all(15),\n-                          child: Row(\n-                            children: [\n-                              ClipRRect(\n-                                borderRadius: BorderRadius.circular(5),\n-                                child: CachedNetworkImage(\n-                                  imageUrl: rideObj[\"icon\"] as String? ?? \"\",\n-                                  width: 50,\n-                                  height: 50,\n-                                  fit: BoxFit.contain,\n-                                ),\n-                              ),\n-                              const SizedBox(\n-                                width: 15,\n-                              ),\n-                              Expanded(\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    Text(\n-                                      \"${rideObj[\"brand_name\"] as String? ?? \"\"} - ${rideObj[\"model_name\"] as String? ?? \"\"} - ${rideObj[\"series_name\"] as String? ?? \"\"}\",\n-                                      style: const TextStyle(\n-                                          fontSize: 16,\n-                                          fontWeight: FontWeight.w700),\n-                                    ),\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          \"No Plat: ${rideObj[\"car_number\"] as String? ?? \"\"}\",\n-                                          style: TextStyle(\n-                                              color: TColor.secondaryText,\n-                                              fontSize: 14),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                  ],\n-                                ),\n-                              )\n-                            ],\n-                          ),\n-                        ),\n-                      if (isOpen)\n-                        const Divider(\n-                          height: 0.5,\n-                          endIndent: 20,\n-                          indent: 20,\n-                        ),\n-                      if (isOpen)\n-                        const SizedBox(\n-                          height: 8,\n-                        ),\n-                      if (isOpen)\n-                        Row(\n-                          children: [\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/chat.png\",\n-                                title: \"Chat\",\n-                                onPressed: () {\n-                                  context.push(SupportMessageView(uObj: {\n-                                    \"user_id\": rideObj[\"user_id\"],\n-                                    \"name\": rideObj[\"name\"],\n-                                    \"image\": rideObj[\"image\"]\n-                                  }));\n-                                },\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/message.png\",\n-                                title: \"Message\",\n-                                onPressed: () {},\n-                              ),\n-                            ),\n-                            Expanded(\n-                              child: IconTitleButton(\n-                                icon: \"assets/img/cancel_trip.png\",\n-                                title: \"Cancel Tip\",\n-                                onPressed: () async {\n-                                  await showModalBottomSheet(\n-                                      backgroundColor: Colors.transparent,\n-                                      barrierColor: Colors.transparent,\n-                                      isScrollControlled: true,\n-                                      context: context,\n-                                      builder: (context) {\n-                                        return Stack(\n-                                            alignment: Alignment.bottomCenter,\n-                                            children: [\n-                                              BackdropFilter(\n-                                                filter: ImageFilter.blur(\n-                                                    sigmaX: 5, sigmaY: 5),\n-                                                child: Container(\n-                                                  color: Colors.black38,\n-                                                ),\n-                                              ),\n-                                              Container(\n-                                                padding:\n-                                                    const EdgeInsets.symmetric(\n-                                                        vertical: 20,\n-                                                        horizontal: 20),\n-                                                decoration: const BoxDecoration(\n-                                                    color: Colors.white,\n-                                                    borderRadius:\n-                                                        BorderRadius.only(\n-                                                            topLeft: Radius\n-                                                                .circular(10),\n-                                                            topRight:\n-                                                                Radius.circular(\n-                                                                    10)),\n-                                                    boxShadow: [\n-                                                      BoxShadow(\n-                                                        color: Colors.black12,\n-                                                        blurRadius: 10,\n-                                                        offset: Offset(0, -5),\n-                                                      ),\n-                                                    ]),\n-                                                child: Column(\n-                                                  mainAxisSize:\n-                                                      MainAxisSize.min,\n-                                                  children: [\n-                                                    Text(\n-                                                      \"Cancel ${rideObj[\"name\"] ?? \"\"} trip?\",\n-                                                      style: TextStyle(\n-                                                          color: TColor\n-                                                              .primaryText,\n-                                                          fontSize: 18,\n-                                                          fontWeight:\n-                                                              FontWeight.w800),\n-                                                    ),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    const Divider(),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"YES, CANCEL\",\n-                                                        type:\n-                                                            RoundButtonType.red,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-\n-                                                          apiCancelRide();\n-\n-                                                          // context.push(\n-                                                          //     const ReasonView());\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                    RoundButton(\n-                                                        title: \"NO\",\n-                                                        type: RoundButtonType\n-                                                            .boarded,\n-                                                        onPressed: () {\n-                                                          context.pop();\n-                                                        }),\n-                                                    const SizedBox(\n-                                                      height: 15,\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              ),\n-                                            ]);\n-                                      });\n-                                },\n-                              ),\n-                            ),\n-                          ],\n-                        ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: rideObj[\"booking_status\"] == bsGoUser\n-                                ? \"ARRIVED\"\n-                                : rideObj[\"booking_status\"] == bsWaitUser\n-                                    ? \"START\"\n-                                    : \"COMPLETE\",\n-                            onPressed: () async {\n-                              if (rideObj[\"booking_status\"] == bsGoUser) {\n-                                // Api Calling Waiting For User\n-                                apiWaitingForUser();\n-                              } else if (rideObj[\"booking_status\"] ==\n-                                  bsWaitUser) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter OTP\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtOTP,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"----\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-\n-                                                      apiRideStart();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"RIDE START\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              } else if (rideObj[\"booking_status\"] == bsStart) {\n-                                await showDialog(\n-                                    context: context,\n-                                    barrierColor: const Color(0xff32384D)\n-                                        .withOpacity(0.4),\n-                                    builder: (context) {\n-                                      return Dialog(\n-                                        shape: RoundedRectangleBorder(\n-                                            borderRadius:\n-                                                BorderRadius.circular(10)),\n-                                        child: Container(\n-                                          padding: const EdgeInsets.all(15),\n-                                          width: context.width - 50,\n-                                          height: 190,\n-                                          child: Column(\n-                                            crossAxisAlignment:\n-                                                CrossAxisAlignment.start,\n-                                            children: [\n-                                              Text(\n-                                                \"Enter Toll Amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.primaryText,\n-                                                    fontSize: 23,\n-                                                    fontWeight:\n-                                                        FontWeight.w600),\n-                                              ),\n-                                              Text(\n-                                                \"Please enter toll amount\",\n-                                                textAlign: TextAlign.center,\n-                                                style: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 8),\n-                                              ),\n-                                              TextField(\n-                                                controller: txtToll,\n-                                                keyboardType:\n-                                                    TextInputType.number,\n-                                                style: TextStyle(\n-                                                  color: TColor.primaryText,\n-                                                  fontSize: 16,\n-                                                ),\n-                                                decoration: InputDecoration(\n-                                                  enabledBorder:\n-                                                      InputBorder.none,\n-                                                  focusedBorder:\n-                                                      InputBorder.none,\n-                                                  hintText: \"\\$0\",\n-                                                  hintStyle: TextStyle(\n-                                                    color: TColor.secondaryText,\n-                                                    fontSize: 16,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                              const Divider(),\n-                                              Row(\n-                                                mainAxisAlignment:\n-                                                    MainAxisAlignment.end,\n-                                                children: [\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"CANCEL\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.red,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  ),\n-                                                  TextButton(\n-                                                    onPressed: () {\n-                                                      context.pop();\n-                                                      apiRideStop();\n-                                                    },\n-                                                    child: Text(\n-                                                      \"DONE\",\n-                                                      textAlign:\n-                                                          TextAlign.center,\n-                                                      style: TextStyle(\n-                                                          color: TColor.primary,\n-                                                          fontSize: 16,\n-                                                          fontWeight:\n-                                                              FontWeight.w600),\n-                                                    ),\n-                                                  )\n-                                                ],\n-                                              )\n-                                            ],\n-                                          ),\n-                                        ),\n-                                      );\n-                                    });\n-                              }\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            )\n-          else\n-            Column(\n-              crossAxisAlignment: CrossAxisAlignment.end,\n-              mainAxisAlignment: MainAxisAlignment.end,\n-              children: [\n-                Container(\n-                  padding: const EdgeInsets.symmetric(vertical: 15),\n-                  decoration: const BoxDecoration(\n-                      color: Colors.white,\n-                      borderRadius: BorderRadius.only(\n-                          topLeft: Radius.circular(10),\n-                          topRight: Radius.circular(10)),\n-                      boxShadow: [\n-                        BoxShadow(\n-                          color: Colors.black12,\n-                          blurRadius: 10,\n-                          offset: Offset(0, -5),\n-                        ),\n-                      ]),\n-                  child: Column(\n-                    children: [\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 15),\n-                        child: Text(\n-                          \"How was your rider?\",\n-                          textAlign: TextAlign.center,\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 18),\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 15,\n-                      ),\n-                      Text(\n-                        rideObj[\"name\"] as String? ?? \"\",\n-                        textAlign: TextAlign.center,\n-                        style: TextStyle(\n-                          color: TColor.primaryText,\n-                          fontSize: 25,\n-                          fontWeight: FontWeight.w800,\n-                        ),\n-                      ),\n-                      const SizedBox(\n-                        height: 8,\n-                      ),\n-                      RatingBar.builder(\n-                        initialRating: ratingVal,\n-                        minRating: 1,\n-                        direction: Axis.horizontal,\n-                        allowHalfRating: true,\n-                        itemCount: 5,\n-                        itemPadding:\n-                            const EdgeInsets.symmetric(horizontal: 4.0),\n-                        itemBuilder: (context, _) => const Icon(\n-                          Icons.star,\n-                          color: Colors.amber,\n-                        ),\n-                        onRatingUpdate: (rating) {\n-                          ratingVal = rating;\n-                          print(rating);\n-                        },\n-                      ),\n-                      const SizedBox(\n-                        height: 30,\n-                      ),\n-                      Padding(\n-                        padding: const EdgeInsets.symmetric(horizontal: 20),\n-                        child: RoundButton(\n-                            title: \"RATE RIDER\",\n-                            onPressed: () {\n-                              apiSubmitRate();\n-                              // context.push(const TipDetailsView());\n-                            }),\n-                      ),\n-                      const SizedBox(\n-                        height: 25,\n-                      ),\n-                    ],\n-                  ),\n-                )\n-              ],\n-            ),\n-          SafeArea(\n-            child: Column(\n-              mainAxisAlignment: MainAxisAlignment.start,\n-              children: [\n-                Padding(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n-                  child: InkWell(\n-                    onTap: () {\n-                      context.pop();\n-                    },\n-                    child: Container(\n-                      padding: const EdgeInsets.symmetric(\n-                          vertical: 15, horizontal: 25),\n-                      decoration: BoxDecoration(\n-                          color: Colors.white,\n-                          borderRadius: BorderRadius.circular(50),\n-                          boxShadow: const [\n-                            BoxShadow(\n-                              color: Colors.black26,\n-                              blurRadius: 10,\n-                            ),\n-                          ]),\n-                      child: Row(\n-                        children: [\n-                          Image.asset(\n-                            showPickUp\n-                                ? \"assets/img/pickup_pin_1.png\"\n-                                : \"assets/img/drop_pin_1.png\",\n-                            width: 30,\n-                            height: 30,\n-                          ),\n-                          const SizedBox(\n-                            width: 8,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              rideObj[showPickUp\n-                                      ? \"pickup_address\"\n-                                      : \"drop_address\"] as String? ??\n-                                  \"\",\n-                              style: TextStyle(\n-                                color: TColor.primaryText,\n-                                fontSize: 15,\n-                              ),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                )\n-              ],\n-            ),\n-          )\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void addMarker() async {\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"pickup\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/pickup_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    await controller.setMarkerOfStaticPoint(\n-      id: \"dropoff\",\n-      markerIcon: MarkerIcon(\n-        iconWidget: Image.asset(\n-          \"assets/img/drop_pin.png\",\n-          width: 80,\n-          height: 80,\n-        ),\n-      ),\n-    );\n-\n-    loadMapRoad();\n-  }\n-\n-  void loadMapRoad() async {\n-    await controller.clearAllRoads();\n-    if (rideObj[\"booking_status\"] == bsGoUser ||\n-        rideObj[\"booking_status\"] == bsWaitUser) {\n-      // Current to Pickup Location Road Draw\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            longitude:\n-                double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0)\n-      ], \"pickup\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude:\n-                  double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    } else {\n-      // Current Location to Drop Off Location Draw Road\n-      await controller.setStaticPosition([\n-        GeoPoint(\n-            latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            longitude: double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0)\n-      ], \"dropoff\");\n-\n-      var roadInfo = await controller.drawRoad(\n-          GeoPoint(\n-              latitude: LocationHelper.shared().lastLocation?.latitude ?? 0.0,\n-              longitude:\n-                  LocationHelper.shared().lastLocation?.longitude ?? 0.0),\n-          GeoPoint(\n-              latitude: double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-              longitude:\n-                  double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0),\n-          roadType: RoadType.car,\n-          roadOption: const RoadOption(\n-              roadColor: Colors.blueAccent, roadBorderWidth: 3));\n-      timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-      km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Future<void> mapIsReady(bool isReady) async {\n-    if (isReady) {\n-      addMarker();\n-    }\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void apiWaitingForUser() {\n-    Globs.showHUD();\n-    ServiceCall.post({\"booking_id\": rideObj[\"booking_id\"].toString()},\n-        SVKey.svDriverWaitUser, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiCancelRide() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"booking_status\": rideObj[\"booking_status\"].toString()\n-    }, SVKey.svRideCancel, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        mdShowAlert(\n-            Globs.appName, responseObj[KKey.message] as String? ?? MSG.success,\n-            () {\n-          context.pop();\n-        });\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStart() {\n-    if (txtOTP.text.length != 4) {\n-      mdShowAlert(\"Error\", \"Pleas valid OTP\", () {});\n-      return;\n-    }\n-\n-    var startLocation = LocationHelper.shared().lastLocation;\n-\n-    if (startLocation == null) {\n-      return;\n-    }\n-\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"pickup_latitude\": \"${startLocation.latitude}\",\n-      \"pickup_longitude\": \"${startLocation.longitude}\",\n-      \"otp_code\": txtOTP.text\n-    }, SVKey.svRideStart, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        LocationHelper.shared().startRideLocationSave(\n-            rideObj[\"booking_id\"] as int? ?? 0, startLocation);\n-        loadMapRoad();\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiRideStop() {\n-    var endLocation = LocationHelper.shared().lastLocation;\n-\n-    if (endLocation == null) {\n-      return;\n-    }\n-    LocationHelper.shared().stopRideLocationSave();\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"booking_id\": rideObj[\"booking_id\"].toString(),\n-      \"drop_latitude\": \"${endLocation.latitude}\",\n-      \"drop_longitude\": \"${endLocation.longitude}\",\n-      \"ride_location\": LocationHelper.shared()\n-          .getRideSaveLocationJsonString(rideObj[\"booking_id\"] as int? ?? 0),\n-      \"toll_tax\": txtToll.text == \"\" ? \"0\" : txtToll.text\n-    }, SVKey.svRideStop, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        rideObj = responseObj[KKey.payload] as Map? ?? {};\n-        if (mounted) {\n-          setState(() {});\n-        }\n-\n-        mdShowAlert(\"Ride Completed\",\n-            responseObj[KKey.message] as String? ?? MSG.success, () {});\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, err.toString(), () {});\n-    });\n-  }\n-\n-  void apiSubmitRate() {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      {\n-        \"booking_id\": rideObj[\"booking_id\"].toString(),\n-        \"rating\": ratingVal.toString(),\n-        \"comment\": \"\",\n-      },\n-      SVKey.svRideRating,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if (responseObj[KKey.status] == \"1\") {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.success, () {\n-            context.pop();\n-          });\n-        } else {\n-          mdShowAlert(Globs.appName,\n-              responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        Globs.hideHUD();\n-        mdShowAlert(Globs.appName, err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  String statusName() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"Pickup Up \";\n-      case 3:\n-        return \"Waiting For \";\n-      case 4:\n-        return \"Ride Started With\";\n-      case 5:\n-        return \"Ride Complete With\";\n-      case 6:\n-        return \"Ride Cancel\";\n-      default:\n-        return \"Finding Driver Near By\";\n-    }\n-  }\n-\n-  String statusText() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return \"On Way\";\n-      case 3:\n-        return \"Waiting\";\n-      case 4:\n-        return \"Started\";\n-      case 5:\n-        return \"Completed\";\n-      case 6:\n-        return \"Cancel\";\n-      case 7:\n-        return \"No Drivers\";\n-      default:\n-        return \"Pending\";\n-    }\n-  }\n-\n-  Color statusColor() {\n-    switch (rideObj[\"booking_status\"]) {\n-      case 2:\n-        return Colors.green;\n-      case 3:\n-        return Colors.orange;\n-      case 4:\n-        return Colors.green;\n-      case 5:\n-        return Colors.green;\n-      case 6:\n-        return Colors.red;\n-      case 7:\n-        return Colors.red;\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1725778039450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-\n-import 'dart:async';\n+/*import 'dart:async';\n import 'dart:ui';\n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n@@ -47,13 +46,16 @@\n \n   late GoogleMapController mapController;\n   final Completer<GoogleMapController> _controller = Completer();\n \n+\n   String timeCount = \"...\";\n   String km = \"...\";\n \n   double ratingVal = 5.0;\n \n+  Set<Marker> _markers = {};\n+\n   @override\n   void initState() {\n     super.initState();\n \n@@ -99,10 +101,10 @@\n                 double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n               ),\n               zoom: 15,\n             ),\n-            markers: _createMarkers(),\n-            polylines: _createPolylines(),\n+            //markers: _createMarkers(),\n+            //polylines: _createPolylines(),\n           ),\n           if (rideObj[\"booking_status\"] != bsComplete)\n             Column(\n               crossAxisAlignment: CrossAxisAlignment.end,\n@@ -653,8 +655,10 @@\n                           Image.asset(\n                             showPickUp\n                                 ? \"assets/img/pickup_pin_1.png\"\n                                 : \"assets/img/drop_pin_1.png\",\n+                        \n+\n                             width: 30,\n                             height: 30,\n                           ),\n                           const SizedBox(\n@@ -687,89 +691,97 @@\n \n \n \n \n+void addMarker() async {\n+  final BitmapDescriptor pickupIcon = await BitmapDescriptor.fromAssetImage(\n+    ImageConfiguration(size: Size(48, 48)), // Adjust the size as needed\n+    'assets/img/pickup_pin.png',\n+  );\n \n+  final BitmapDescriptor dropoffIcon = await BitmapDescriptor.fromAssetImage(\n+    ImageConfiguration(size: Size(48, 48)), // Adjust the size as needed\n+    'assets/img/drop_pin.png',\n+  );\n \n+  setState(() {\n+    _markers.add(\n+      Marker(\n+        markerId: MarkerId('pickup'),\n+        position: LatLng(\n+          double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+          double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+        ),\n+        icon: pickupIcon,\n+      ),\n+    );\n \n+    _markers.add(\n+      Marker(\n+        markerId: MarkerId('dropoff'),\n+        position: LatLng(\n+          double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+          double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+        ),\n+        icon: dropoffIcon,\n+      ),\n+    );\n+  });\n \n+  loadMapRoad();\n+}\n \n+void loadMapRoad() async {\n+  if (_currentLocation == null) return;\n \n+  LatLng startPoint = LatLng(\n+    _currentLocation!.latitude ?? 0.0,\n+    _currentLocation!.longitude ?? 0.0,\n+  );\n \n-  void addMarker() async {\n-    setState(() {\n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId('pickup'),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.fromAsset('assets/img/pickup_pin.png'),\n-        ),\n-      );\n+  LatLng endPoint;\n+  if (rideObj[\"booking_status\"] == bsGoUser || rideObj[\"booking_status\"] == bsWaitUser) {\n+    endPoint = LatLng(\n+      double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n+      double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n+    );\n+  } else {\n+    endPoint = LatLng(\n+      double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n+      double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n+    );\n+  }\n \n-      _markers.add(\n-        Marker(\n-          markerId: MarkerId('dropoff'),\n-          position: LatLng(\n-            double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-            double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-          ),\n-          icon: BitmapDescriptor.fromAsset('assets/img/drop_pin.png'),\n-        ),\n-      );\n-    });\n+  // Assuming you have a method to get the route between two points\n+  List<LatLng> route = await getRoute(startPoint, endPoint);\n \n-    loadMapRoad();\n+  setState(() {\n+    _polyline = Polyline(\n+      polylineId: PolylineId('route'),\n+      points: route,\n+      color: Colors.blueAccent,\n+      width: 3,\n+    );\n+  });\n+\n+  // Assuming you have a method to calculate distance and duration\n+  var roadInfo = await calculateDistanceAndDuration(startPoint, endPoint);\n+  timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n+  km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n+\n+  if (mounted) {\n+    setState(() {});\n   }\n+}\n \n-  void loadMapRoad() async {\n-    if (_currentLocation == null) return;\n \n-    LatLng startPoint = LatLng(\n-      _currentLocation!.latitude ?? 0.0,\n-      _currentLocation!.longitude ?? 0.0,\n-    );\n \n-    LatLng endPoint;\n-    if (rideObj[\"booking_status\"] == bsGoUser || rideObj[\"booking_status\"] == bsWaitUser) {\n-      endPoint = LatLng(\n-        double.tryParse(rideObj[\"pickup_lat\"].toString()) ?? 0.0,\n-        double.tryParse(rideObj[\"pickup_long\"].toString()) ?? 0.0,\n-      );\n-    } else {\n-      endPoint = LatLng(\n-        double.tryParse(rideObj[\"drop_lat\"].toString()) ?? 0.0,\n-        double.tryParse(rideObj[\"drop_long\"].toString()) ?? 0.0,\n-      );\n-    }\n \n-    // Assuming you have a method to get the route between two points\n-    List<LatLng> route = await getRoute(startPoint, endPoint);\n \n-    setState(() {\n-      _polyline = Polyline(\n-        polylineId: PolylineId('route'),\n-        points: route,\n-        color: Colors.blueAccent,\n-        width: 3,\n-      );\n-    });\n \n-    // Assuming you have a method to calculate distance and duration\n-    var roadInfo = await calculateDistanceAndDuration(startPoint, endPoint);\n-    timeCount = ((roadInfo.duration ?? 0.0) / 60.0).toStringAsFixed(1);\n-    km = ((roadInfo.distance ?? 0.0)).toStringAsFixed(1);\n \n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n \n \n- \n-\n   //TODO: ApiCalling\n \n   void apiWaitingForUser() {\n     Globs.showHUD();\n@@ -972,4 +984,5 @@\n         return Colors.blue;\n     }\n   }\n }\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725778930959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-/*import 'dart:async';\n+import 'dart:async';\n import 'dart:ui';\n import 'package:cached_network_image/cached_network_image.dart';\n import 'package:flutter/material.dart';\n import 'package:google_maps_flutter/google_maps_flutter.dart';\n@@ -984,5 +984,4 @@\n         return Colors.blue;\n     }\n   }\n }\n-*/\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719737801550,
            "name": "Commit-0",
            "content": "\n\nimport 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\nimport 'package:flutter/widgets.dart';\nimport 'package:flutter_osm_plugin/flutter_osm_plugin.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\n\n\n\nclass RunRideView extends StatefulWidget {\n  const RunRideView({super.key});\n\n\n  @override\n  State<RunRideView> createState() => _RunRideViewState();\n\n}\nclass _RunRideViewState extends State<RunRideView> with OSMMixinObserver{\n  bool isOpen = true;\n\n  late MapController controller;\n\n  @override\nvoid initState () {\n  super.initState();\n  controller = MapController(\n                             initPosition: GeoPoint(\n        latitude: 28.0398257,\n        longitude: 82.4838780,\n      ),\n                            \n            );\n\n            controller.addObserver(this);\n}\n            @override\n  void dispose() {\n    // TODO: implement dispose\n    super.dispose();\n    controller.dispose();\n  }\n\n  @override\nWidget build(BuildContext context) {\n\n  return Scaffold(\n    body: Stack(\n      children: [\n\n      \n    \n\n      OSMFlutter( \n        controller: controller,\n        osmOption: OSMOption(\n          enableRotationByGesture: true,\n             \n            zoomOption: const ZoomOption(\n                  initZoom: 8,\n                  minZoomLevel: 3,\n                  maxZoomLevel: 19,\n                  stepZoom: 1.0,\n            ),\n              staticPoints: [],\n            roadConfiguration:const RoadOption(\n                    roadColor: Colors.blueAccent,\n            ),\n           userLocationMarker: UserLocationMaker (\n                personMarker: const MarkerIcon(\n                    icon: Icon(\n                        Icons.location_history_rounded,\n                        color: Colors.red,\n                        size: 48,\n                    ),\n                ),\n                directionArrowMarker: const MarkerIcon(\n                    icon: Icon(\n                        Icons.double_arrow,\n                        size: 48,\n                    ),\n                ),\n            ),\n\n            showDefaultInfoWindow: false\n        ),\n        onMapIsReady: (isReady) {\n          if(isReady) {\n            print(\"map is ready\");\n          }\n        },\n        onLocationChanged: (myLocation) {\n           print(\"user location :$myLocation\");\n        },  \n\n        onGeoPointClicked: (myLocation) {\n           print(\"GeoPointClicked location :$myLocation\");\n        },  \n    ),\n\n    Column(\n\n      mainAxisAlignment: MainAxisAlignment.end,\n      children: [\n\n       \n\n        Container(\n          padding: const EdgeInsets.symmetric(vertical: 15),\n\n           decoration: const BoxDecoration(\n                  color: Colors.white,\n                  borderRadius: BorderRadius.only(\n                  topLeft: Radius.circular(10),\n                  topRight: Radius.circular(10), ),\n                  boxShadow:  [\n                  BoxShadow(\n                    color: Colors.black12,\n                    blurRadius: 10,\n                    offset: Offset (0,-5),\n                     ),\n                 ]\n                 \n                  ),\n          child: Column(\n            children: [\n              Row(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: [\n                \n               \n\n                Text(\n                      \"25 min\", \n                      style: TextStyle(\n                        color: TColor.primaryText,\n                        fontSize: 25,\n                        fontWeight: FontWeight.w800,\n                      ),\n                    ),\n\n               \n                ],\n              ),\n\n             const SizedBox(\n              height: 8,\n             ),\n            Row(\n             \n              children: [\n\n                 Expanded(\n                   child: Text(\n                        \"\\$12.50\", \n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                          color: TColor.secondaryText,\n                          fontSize: 18,\n                          \n                        ),\n                      ),\n                 ),\n                    Expanded(\n                      child: Text(\n                        \"4.5 KM\", \n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                          color: TColor.secondaryText,\n                          fontSize: 18,\n                          \n                        ),\n                      ),\n                    ),\n                     Expanded(\n                       child: Padding(\n                         padding: const EdgeInsets.symmetric(horizontal: 25, \n                         vertical: 8),\n                       \n                         child: Row(\n                         mainAxisAlignment: MainAxisAlignment.center,\n                           children: [\n                            Image.asset\n                            (\"assets/img/rate_tip.png\", \n                            width: 15, \n                            height: 15, \n                            ),\n                         \n                            const SizedBox(width: 4,),\n                            \n                             Text(\n                              \"3.5\", \n                              style: TextStyle(\n                                color: TColor.secondaryText,\n                                fontSize: 18,\n                                \n                              ),\n                              ),\n                           ],\n                         ),\n                       ),\n                     ),\n              ],\n            ),\n\n            const SizedBox(\n              height: 15,\n            ),\n\n                     Padding(\n                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n                       child:\n                        Row(\n                        children: [\n                       Container(\n                        width: 10,\n                        height: 10,\n                        decoration: BoxDecoration(\n                          color: TColor.secondary,\n                        borderRadius: BorderRadius.circular(10)\n                        ),\n                       ),\n\n                       const SizedBox(\n                        width: 15,),\n\n                        Text(\n                               \"23 Dang Nepal , Ring Road\", \n                              style: TextStyle(\n                                color: TColor.primaryText,\n                                fontSize: 15,\n                                \n                              ),\n                              ),\n                          \n                        ],\n                       \n                     ),\n              \n            ),\n\n\n             Padding(\n                       padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n                       child:\n                        Row(\n                        children: [\n                       Container(\n                        width: 10,\n                        height: 10,\n                        decoration: BoxDecoration(\n                          color: TColor.primary,\n                      \n                        ),\n                       ),\n\n                       const SizedBox(\n                        width: 15,),\n\n                        Text(\n                              \"Moon Light Drug Distributers, Ghorahi Nepal\",\n                              style: TextStyle(\n                                color: TColor.primaryText,\n                                fontSize: 15,\n                                \n                              ),\n                              ),\n                          \n                        ],\n                       \n                     ),\n              \n            ),\n\n             const SizedBox(\n              height: 15,\n            ),\n\n             InkWell(\n              onTap: () {\n             \n              },\n               child: Container(\n                          width: double.maxFinite,\n                          margin: const EdgeInsets.symmetric(horizontal: 20),\n                          padding: const EdgeInsets.all(6),\n                          decoration: BoxDecoration(\n                            color: TColor.primary,\n                          borderRadius: BorderRadius.circular(30),\n                          ),\n                          child: Stack(\n                            alignment: Alignment.centerRight,\n                            children: [\n                            Row(\n                              mainAxisAlignment: MainAxisAlignment.center,\n                              children: [\n                          Text(\n                                \"TAP TO ACCEPT\", \n                                style: TextStyle(\n                                  color: TColor.primaryTextW,\n                                  fontSize: 17,\n                                  fontWeight: FontWeight.w700,\n                                  \n                                ),\n                                ),\n                              ],\n                            ),\n               \n                            Container(\n                          height: 40,\n                          width: 40,\n                          decoration: BoxDecoration(\n                            color: Colors.black12,\n                          borderRadius: BorderRadius.circular(20),\n                          ),\n                          alignment: Alignment.center,\n                          child:\n               \n                          Text(\n                                \"15\", \n                                style: TextStyle(\n                                  color: TColor.primaryTextW,\n                                  fontSize: 14,\n                                  fontWeight: FontWeight.w700,),\n                                  \n                                ),\n                                ),\n                          ],),\n                         ),\n             ),\n\n\n             const SizedBox(\n              height: 25,\n            ),\n            \n            ],\n          ),\n        )\n      ],\n    ),\n    \n    SafeArea(\n      child: Column(\n      mainAxisAlignment: MainAxisAlignment.start,\n      children: [\n        Padding(\n          padding: const EdgeInsets.all(15),\n          child: Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n             \n          \n                InkWell(\n                  onTap: () {\n                   context.pop();\n                  },\n                  child: Container(\n                              padding: const EdgeInsets.symmetric(\n                                vertical: 15, horizontal: 25),\n                            \n                               decoration: BoxDecoration(\n                      color: Colors.white,\n                      borderRadius: BorderRadius.circular(30),\n                      \n                      boxShadow: const [\n                      BoxShadow(\n                        color: Colors.black26,\n                        blurRadius: 10,\n                        \n                         ),\n                              \n                              ]),\n                              child:Row(\n                                mainAxisSize: MainAxisSize.min,\n                                crossAxisAlignment: CrossAxisAlignment.center,\n                                children: [\n                       Image.asset(\n                        \"assets/img/close.png\", \n                        width: 25, \n                        height: 25,\n                        ),\n                 \n                         Text(\n                          \"No Thanks\", \n                          style: TextStyle(\n                            color: TColor.primaryText,\n                            fontSize: 16,\n                            \n                          ),\n                        ),\n                                ],\n                  )),\n                ),\n                \n              \n              \n            ],\n          ),\n        )\n      ],\n    ),\n    )\n\n    ],\n  ),\n  );\n}\n\nvoid addMarker() async {\n  await controller.setMarkerOfStaticPoint(\n    id: \"pickup\", \n    markerIcon: MarkerIcon(\n    iconWidget: Image.asset(\n      \"assets/img/pickup_pin.png\", \n      width: 80, \n      height: 80,\n      ),\n  ),);\n\n   await controller.setMarkerOfStaticPoint(\n    id: \"dropoff\", \n    markerIcon: MarkerIcon(\n    iconWidget: Image.asset(\n      \"assets/img/drop_pin.png\", \n      width: 80, \n      height: 80,\n      ),\n  ),);\n\n                            \n  await controller.setStaticPosition( \n    [GeoPoint(latitude: 28.0398257, longitude: 82.4838780)], \n    \"pickup\");\n\n    await controller.setStaticPosition( \n    [GeoPoint(latitude: 28.0403014, longitude: 82.4838194)], \n    \"dropoff\");\n\nloadMapRoad();\n}\nvoid loadMapRoad() async {\nawait controller.drawRoad( \n  GeoPoint(latitude: 28.0398257, longitude: 82.4838780), \n  GeoPoint(latitude: 28.0403014, longitude: 82.4838194), \n  roadType: RoadType.car,\n  roadOption: \n  const RoadOption(roadColor: Colors.blueAccent, roadBorderWidth: 3)\n  );\n}\n\n  @override\n  Future<void> mapIsReady(bool isReady) async{\n    if(isReady) {\n      addMarker();\n    }\n    \n  }\n}"
        }
    ]
}