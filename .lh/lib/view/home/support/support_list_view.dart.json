{
    "sourceFile": "lib/view/home/support/support_list_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1722774388520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722862436770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,136 +0,0 @@\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/support_user_row.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class SupportListView extends StatefulWidget {\n-  const SupportListView({super.key});\n-\n-  @override\n-  State<SupportListView> createState() => _SupportListViewState();\n-}\n-\n-class _SupportListViewState extends State<SupportListView> {\n-  List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getList();\n-\n-    // Received Message In Socket On Event\n-    SocketManager.shared.socket?.on(\"support_message\", (data) {\n-      print(\"support_message socket get :${data.toString()} \");\n-      if (data[KKey.status] == \"1\") {\n-        var mObj = data[KKey.payload] as List? ?? [];\n-        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n-        Map? userObj;\n-        var senderId = mObj[0][\"sender_id\"];\n-        var userExits = false;\n-        for (var uObj in listArr) {\n-          if (senderId == uObj[\"user_id\"]) {\n-            uObj[\"message\"] = mObj[0][\"message\"];\n-            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n-            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n-            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n-            userExits = true;\n-            userObj = uObj;\n-            break;\n-          }\n-        }\n-\n-        if (!userExits) {\n-          senderUserObj[\"message\"] = mObj[0][\"message\"];\n-          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n-          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n-          senderUserObj[\"base_count\"] = 1;\n-          listArr.insert(0, senderUserObj);\n-        }else{\n-          listArr.remove(userObj);\n-          listArr.insert(0, userObj);\n-        }\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      }\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: TColor.lightWhite,\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Supports\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: ListView.builder(\n-        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n-        itemBuilder: (context, index) {\n-          var uObj = listArr[index] as Map? ?? {};\n-\n-          return SupportUserRow(\n-            uObj: uObj,\n-            onPressed: () async {\n-              await context.push(SupportMessageView(\n-                uObj: uObj,\n-              ));\n-              getList();\n-            },\n-          );\n-        },\n-        \n-        \n-        itemCount: listArr.length,\n-      ),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void getList() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862476754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722863276479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/support_user_row.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class SupportListView extends StatefulWidget {\n+  const SupportListView({super.key});\n+\n+  @override\n+  State<SupportListView> createState() => _SupportListViewState();\n+}\n+\n+class _SupportListViewState extends State<SupportListView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n+        Map? userObj;\n+        var senderId = mObj[0][\"sender_id\"];\n+        var userExits = false;\n+        for (var uObj in listArr) {\n+          if (senderId == uObj[\"user_id\"]) {\n+            uObj[\"message\"] = mObj[0][\"message\"];\n+            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n+            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n+            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n+            userExits = true;\n+            userObj = uObj;\n+            break;\n+          }\n+        }\n+\n+        if (!userExits) {\n+          senderUserObj[\"message\"] = mObj[0][\"message\"];\n+          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n+          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n+          senderUserObj[\"base_count\"] = 1;\n+          listArr.insert(0, senderUserObj);\n+        }else{\n+          listArr.remove(userObj);\n+          listArr.insert(0, userObj);\n+        }\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Supports\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var uObj = listArr[index] as Map? ?? {};\n+\n+          return SupportUserRow(\n+            uObj: uObj,\n+            onPressed: () async {\n+              await context.push(SupportMessageView(\n+                uObj: uObj,\n+              ));\n+              getList();\n+            },\n+          );\n+        },\n+        \n+        \n+        itemCount: listArr.length,\n+      ),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1724056457035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,275 @@\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/support_user_row.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class SupportListView extends StatefulWidget {\n+  const SupportListView({super.key});\n+\n+  @override\n+  State<SupportListView> createState() => _SupportListViewState();\n+}\n+\n+class _SupportListViewState extends State<SupportListView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n+        Map? userObj;\n+        var senderId = mObj[0][\"sender_id\"];\n+        var userExits = false;\n+        for (var uObj in listArr) {\n+          if (senderId == uObj[\"user_id\"]) {\n+            uObj[\"message\"] = mObj[0][\"message\"];\n+            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n+            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n+            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n+            userExits = true;\n+            userObj = uObj;\n+            break;\n+          }\n+        }\n+\n+        if (!userExits) {\n+          senderUserObj[\"message\"] = mObj[0][\"message\"];\n+          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n+          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n+          senderUserObj[\"base_count\"] = 1;\n+          listArr.insert(0, senderUserObj);\n+        }else{\n+          listArr.remove(userObj);\n+          listArr.insert(0, userObj);\n+        }\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Supports\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var uObj = listArr[index] as Map? ?? {};\n+\n+          return SupportUserRow(\n+            uObj: uObj,\n+            onPressed: () async {\n+              await context.push(SupportMessageView(\n+                uObj: uObj,\n+              ));\n+              getList();\n+            },\n+          );\n+        },\n+        \n+        \n+        itemCount: listArr.length,\n+      ),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n+\n+\n+\n+/*import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/support_user_row.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class SupportListView extends StatefulWidget {\n+  const SupportListView({super.key});\n+\n+  @override\n+  State<SupportListView> createState() => _SupportListViewState();\n+}\n+\n+class _SupportListViewState extends State<SupportListView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n+        Map? userObj;\n+        var senderId = mObj[0][\"sender_id\"];\n+        var userExits = false;\n+        for (var uObj in listArr) {\n+          if (senderId == uObj[\"user_id\"]) {\n+            uObj[\"message\"] = mObj[0][\"message\"];\n+            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n+            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n+            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n+            userExits = true;\n+            userObj = uObj;\n+            break;\n+          }\n+        }\n+\n+        if (!userExits) {\n+          senderUserObj[\"message\"] = mObj[0][\"message\"];\n+          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n+          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n+          senderUserObj[\"base_count\"] = 1;\n+          listArr.insert(0, senderUserObj);\n+        }else{\n+          listArr.remove(userObj);\n+          listArr.insert(0, userObj);\n+        }\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Supports\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var uObj = listArr[index] as Map? ?? {};\n+\n+          return SupportUserRow(\n+            uObj: uObj,\n+            onPressed: () async {\n+              await context.push(SupportMessageView(\n+                uObj: uObj,\n+              ));\n+              getList();\n+            },\n+          );\n+        },\n+        \n+        \n+        itemCount: listArr.length,\n+      ),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}*/\n"
                },
                {
                    "date": 1724063693259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,141 +272,4 @@\n       mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n     });\n   }\n }*/\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/support_user_row.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class SupportListView extends StatefulWidget {\n-  const SupportListView({super.key});\n-\n-  @override\n-  State<SupportListView> createState() => _SupportListViewState();\n-}\n-\n-class _SupportListViewState extends State<SupportListView> {\n-  List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getList();\n-\n-    // Received Message In Socket On Event\n-    SocketManager.shared.socket?.on(\"support_message\", (data) {\n-      print(\"support_message socket get :${data.toString()} \");\n-      if (data[KKey.status] == \"1\") {\n-        var mObj = data[KKey.payload] as List? ?? [];\n-        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n-        Map? userObj;\n-        var senderId = mObj[0][\"sender_id\"];\n-        var userExits = false;\n-        for (var uObj in listArr) {\n-          if (senderId == uObj[\"user_id\"]) {\n-            uObj[\"message\"] = mObj[0][\"message\"];\n-            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n-            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n-            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n-            userExits = true;\n-            userObj = uObj;\n-            break;\n-          }\n-        }\n-\n-        if (!userExits) {\n-          senderUserObj[\"message\"] = mObj[0][\"message\"];\n-          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n-          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n-          senderUserObj[\"base_count\"] = 1;\n-          listArr.insert(0, senderUserObj);\n-        }else{\n-          listArr.remove(userObj);\n-          listArr.insert(0, userObj);\n-        }\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      }\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: TColor.lightWhite,\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Supports\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: ListView.builder(\n-        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n-        itemBuilder: (context, index) {\n-          var uObj = listArr[index] as Map? ?? {};\n-\n-          return SupportUserRow(\n-            uObj: uObj,\n-            onPressed: () async {\n-              await context.push(SupportMessageView(\n-                uObj: uObj,\n-              ));\n-              getList();\n-            },\n-          );\n-        },\n-        \n-        \n-        itemCount: listArr.length,\n-      ),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void getList() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-}\n-\n"
                },
                {
                    "date": 1724594103405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,280 @@\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/support_user_row.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class SupportListView extends StatefulWidget {\n+  const SupportListView({super.key});\n+\n+  @override\n+  State<SupportListView> createState() => _SupportListViewState();\n+}\n+\n+class _SupportListViewState extends State<SupportListView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    getList();\n+    setupSocketListener();\n+  }\n+\n+  void setupSocketListener() {\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        handleSocketMessage(data);\n+      }\n+    });\n+  }\n+\n+  void handleSocketMessage(dynamic data) {\n+    var mObj = data[KKey.payload] as List? ?? [];\n+    var senderUserObj = data[\"user_info\"] as Map? ?? {};\n+    Map? userObj;\n+    var senderId = mObj[0][\"sender_id\"];\n+    var userExits = false;\n+\n+    for (var uObj in listArr) {\n+      if (senderId == uObj[\"user_id\"]) {\n+        uObj[\"message\"] = mObj[0][\"message\"];\n+        uObj[\"message_type\"] = mObj[0][\"message_type\"];\n+        uObj[\"created_date\"] = mObj[0][\"created_date\"];\n+        uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n+        userExits = true;\n+        userObj = uObj;\n+        break;\n+      }\n+    }\n+\n+    if (!userExits) {\n+      senderUserObj[\"message\"] = mObj[0][\"message\"];\n+      senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n+      senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n+      senderUserObj[\"base_count\"] = 1;\n+      listArr.insert(0, senderUserObj);\n+    } else {\n+      listArr.remove(userObj);\n+      listArr.insert(0, userObj);\n+    }\n+\n+    if (mounted) {\n+      setState(() {});\n+    }\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Supports\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var uObj = listArr[index] as Map? ?? {};\n+\n+          return SupportUserRow(\n+            uObj: uObj,\n+            onPressed: () async {\n+              await context.push(SupportMessageView(\n+                uObj: uObj,\n+              ));\n+              getList();\n+            },\n+          );\n+        },\n+        itemCount: listArr.length,\n+      ),\n+    );\n+  }\n+\n+  void getList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n+\n+\n+/*import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/support_user_row.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class SupportListView extends StatefulWidget {\n+  const SupportListView({super.key});\n+\n+  @override\n+  State<SupportListView> createState() => _SupportListViewState();\n+}\n+\n+class _SupportListViewState extends State<SupportListView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n+        Map? userObj;\n+        var senderId = mObj[0][\"sender_id\"];\n+        var userExits = false;\n+        for (var uObj in listArr) {\n+          if (senderId == uObj[\"user_id\"]) {\n+            uObj[\"message\"] = mObj[0][\"message\"];\n+            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n+            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n+            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n+            userExits = true;\n+            userObj = uObj;\n+            break;\n+          }\n+        }\n+\n+        if (!userExits) {\n+          senderUserObj[\"message\"] = mObj[0][\"message\"];\n+          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n+          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n+          senderUserObj[\"base_count\"] = 1;\n+          listArr.insert(0, senderUserObj);\n+        }else{\n+          listArr.remove(userObj);\n+          listArr.insert(0, userObj);\n+        }\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Supports\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var uObj = listArr[index] as Map? ?? {};\n+\n+          return SupportUserRow(\n+            uObj: uObj,\n+            onPressed: () async {\n+              await context.push(SupportMessageView(\n+                uObj: uObj,\n+              ));\n+              getList();\n+            },\n+          );\n+        },\n+        \n+        \n+        itemCount: listArr.length,\n+      ),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n+\n+\n+\n+*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724594158782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,148 +18,8 @@\n   List listArr = [];\n \n   @override\n   void initState() {\n-    super.initState();\n-    getList();\n-    setupSocketListener();\n-  }\n-\n-  void setupSocketListener() {\n-    SocketManager.shared.socket?.on(\"support_message\", (data) {\n-      print(\"support_message socket get :${data.toString()} \");\n-      if (data[KKey.status] == \"1\") {\n-        handleSocketMessage(data);\n-      }\n-    });\n-  }\n-\n-  void handleSocketMessage(dynamic data) {\n-    var mObj = data[KKey.payload] as List? ?? [];\n-    var senderUserObj = data[\"user_info\"] as Map? ?? {};\n-    Map? userObj;\n-    var senderId = mObj[0][\"sender_id\"];\n-    var userExits = false;\n-\n-    for (var uObj in listArr) {\n-      if (senderId == uObj[\"user_id\"]) {\n-        uObj[\"message\"] = mObj[0][\"message\"];\n-        uObj[\"message_type\"] = mObj[0][\"message_type\"];\n-        uObj[\"created_date\"] = mObj[0][\"created_date\"];\n-        uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n-        userExits = true;\n-        userObj = uObj;\n-        break;\n-      }\n-    }\n-\n-    if (!userExits) {\n-      senderUserObj[\"message\"] = mObj[0][\"message\"];\n-      senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n-      senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n-      senderUserObj[\"base_count\"] = 1;\n-      listArr.insert(0, senderUserObj);\n-    } else {\n-      listArr.remove(userObj);\n-      listArr.insert(0, userObj);\n-    }\n-\n-    if (mounted) {\n-      setState(() {});\n-    }\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: TColor.lightWhite,\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Supports\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: ListView.builder(\n-        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n-        itemBuilder: (context, index) {\n-          var uObj = listArr[index] as Map? ?? {};\n-\n-          return SupportUserRow(\n-            uObj: uObj,\n-            onPressed: () async {\n-              await context.push(SupportMessageView(\n-                uObj: uObj,\n-              ));\n-              getList();\n-            },\n-          );\n-        },\n-        itemCount: listArr.length,\n-      ),\n-    );\n-  }\n-\n-  void getList() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-}\n-\n-\n-/*import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/support_user_row.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class SupportListView extends StatefulWidget {\n-  const SupportListView({super.key});\n-\n-  @override\n-  State<SupportListView> createState() => _SupportListViewState();\n-}\n-\n-class _SupportListViewState extends State<SupportListView> {\n-  List listArr = [];\n-\n-  @override\n-  void initState() {\n     // TODO: implement initState\n     super.initState();\n     getList();\n \n@@ -276,148 +136,8 @@\n }\n \n \n \n-*/\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/support_user_row.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class SupportListView extends StatefulWidget {\n-  const SupportListView({super.key});\n-\n-  @override\n-  State<SupportListView> createState() => _SupportListViewState();\n-}\n-\n-class _SupportListViewState extends State<SupportListView> {\n-  List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getList();\n-\n-    // Received Message In Socket On Event\n-    SocketManager.shared.socket?.on(\"support_message\", (data) {\n-      print(\"support_message socket get :${data.toString()} \");\n-      if (data[KKey.status] == \"1\") {\n-        var mObj = data[KKey.payload] as List? ?? [];\n-        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n-        Map? userObj;\n-        var senderId = mObj[0][\"sender_id\"];\n-        var userExits = false;\n-        for (var uObj in listArr) {\n-          if (senderId == uObj[\"user_id\"]) {\n-            uObj[\"message\"] = mObj[0][\"message\"];\n-            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n-            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n-            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n-            userExits = true;\n-            userObj = uObj;\n-            break;\n-          }\n-        }\n-\n-        if (!userExits) {\n-          senderUserObj[\"message\"] = mObj[0][\"message\"];\n-          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n-          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n-          senderUserObj[\"base_count\"] = 1;\n-          listArr.insert(0, senderUserObj);\n-        }else{\n-          listArr.remove(userObj);\n-          listArr.insert(0, userObj);\n-        }\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      }\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: TColor.lightWhite,\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Supports\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: ListView.builder(\n-        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n-        itemBuilder: (context, index) {\n-          var uObj = listArr[index] as Map? ?? {};\n-\n-          return SupportUserRow(\n-            uObj: uObj,\n-            onPressed: () async {\n-              await context.push(SupportMessageView(\n-                uObj: uObj,\n-              ));\n-              getList();\n-            },\n-          );\n-        },\n-        \n-        \n-        itemCount: listArr.length,\n-      ),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void getList() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-}\n-\n-\n-\n /*import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n@@ -551,5 +271,5 @@\n       Globs.hideHUD();\n       mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n     });\n   }\n-}*/\n\\ No newline at end of file\n+}*/\n"
                },
                {
                    "date": 1724929046157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,143 +133,4 @@\n       mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n     });\n   }\n }\n-\n-\n-\n-/*import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/support_user_row.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class SupportListView extends StatefulWidget {\n-  const SupportListView({super.key});\n-\n-  @override\n-  State<SupportListView> createState() => _SupportListViewState();\n-}\n-\n-class _SupportListViewState extends State<SupportListView> {\n-  List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getList();\n-\n-    // Received Message In Socket On Event\n-    SocketManager.shared.socket?.on(\"support_message\", (data) {\n-      print(\"support_message socket get :${data.toString()} \");\n-      if (data[KKey.status] == \"1\") {\n-        var mObj = data[KKey.payload] as List? ?? [];\n-        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n-        Map? userObj;\n-        var senderId = mObj[0][\"sender_id\"];\n-        var userExits = false;\n-        for (var uObj in listArr) {\n-          if (senderId == uObj[\"user_id\"]) {\n-            uObj[\"message\"] = mObj[0][\"message\"];\n-            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n-            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n-            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n-            userExits = true;\n-            userObj = uObj;\n-            break;\n-          }\n-        }\n-\n-        if (!userExits) {\n-          senderUserObj[\"message\"] = mObj[0][\"message\"];\n-          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n-          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n-          senderUserObj[\"base_count\"] = 1;\n-          listArr.insert(0, senderUserObj);\n-        }else{\n-          listArr.remove(userObj);\n-          listArr.insert(0, userObj);\n-        }\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      }\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: TColor.lightWhite,\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Supports\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: ListView.builder(\n-        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n-        itemBuilder: (context, index) {\n-          var uObj = listArr[index] as Map? ?? {};\n-\n-          return SupportUserRow(\n-            uObj: uObj,\n-            onPressed: () async {\n-              await context.push(SupportMessageView(\n-                uObj: uObj,\n-              ));\n-              getList();\n-            },\n-          );\n-        },\n-        \n-        \n-        itemCount: listArr.length,\n-      ),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void getList() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-}*/\n"
                },
                {
                    "date": 1725468987489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:taxi_driver/common_widget/support_user_row.dart';\n+import 'package:taxi_driver/view/home/support/support_message_view.dart';\n+\n+class SupportListView extends StatefulWidget {\n+  const SupportListView({super.key});\n+\n+  @override\n+  State<SupportListView> createState() => _SupportListViewState();\n+}\n+\n+class _SupportListViewState extends State<SupportListView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n+        Map? userObj;\n+        var senderId = mObj[0][\"sender_id\"];\n+        var userExits = false;\n+        for (var uObj in listArr) {\n+          if (senderId == uObj[\"user_id\"]) {\n+            uObj[\"message\"] = mObj[0][\"message\"];\n+            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n+            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n+            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n+            userExits = true;\n+            userObj = uObj;\n+            break;\n+          }\n+        }\n+\n+        if (!userExits) {\n+          senderUserObj[\"message\"] = mObj[0][\"message\"];\n+          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n+          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n+          senderUserObj[\"base_count\"] = 1;\n+          listArr.insert(0, senderUserObj);\n+        }else{\n+          listArr.remove(userObj);\n+          listArr.insert(0, userObj);\n+        }\n+\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Supports\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var uObj = listArr[index] as Map? ?? {};\n+\n+          return SupportUserRow(\n+            uObj: uObj,\n+            onPressed: () async {\n+              await context.push(SupportMessageView(\n+                uObj: uObj,\n+              ));\n+              getList();\n+            },\n+          );\n+        },\n+        \n+        \n+        itemCount: listArr.length,\n+      ),\n+    );\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1725806120485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,140 +133,4 @@\n       mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n     });\n   }\n }\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-import 'package:taxi_driver/common_widget/support_user_row.dart';\n-import 'package:taxi_driver/view/home/support/support_message_view.dart';\n-\n-class SupportListView extends StatefulWidget {\n-  const SupportListView({super.key});\n-\n-  @override\n-  State<SupportListView> createState() => _SupportListViewState();\n-}\n-\n-class _SupportListViewState extends State<SupportListView> {\n-  List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getList();\n-\n-    // Received Message In Socket On Event\n-    SocketManager.shared.socket?.on(\"support_message\", (data) {\n-      print(\"support_message socket get :${data.toString()} \");\n-      if (data[KKey.status] == \"1\") {\n-        var mObj = data[KKey.payload] as List? ?? [];\n-        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n-        Map? userObj;\n-        var senderId = mObj[0][\"sender_id\"];\n-        var userExits = false;\n-        for (var uObj in listArr) {\n-          if (senderId == uObj[\"user_id\"]) {\n-            uObj[\"message\"] = mObj[0][\"message\"];\n-            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n-            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n-            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n-            userExits = true;\n-            userObj = uObj;\n-            break;\n-          }\n-        }\n-\n-        if (!userExits) {\n-          senderUserObj[\"message\"] = mObj[0][\"message\"];\n-          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n-          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n-          senderUserObj[\"base_count\"] = 1;\n-          listArr.insert(0, senderUserObj);\n-        }else{\n-          listArr.remove(userObj);\n-          listArr.insert(0, userObj);\n-        }\n-\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      }\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: TColor.lightWhite,\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Supports\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: ListView.builder(\n-        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n-        itemBuilder: (context, index) {\n-          var uObj = listArr[index] as Map? ?? {};\n-\n-          return SupportUserRow(\n-            uObj: uObj,\n-            onPressed: () async {\n-              await context.push(SupportMessageView(\n-                uObj: uObj,\n-              ));\n-              getList();\n-            },\n-          );\n-        },\n-        \n-        \n-        itemCount: listArr.length,\n-      ),\n-    );\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void getList() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-}\n"
                }
            ],
            "date": 1722774388520,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/common/socket_manager.dart';\nimport 'package:taxi_driver/common_widget/support_user_row.dart';\nimport 'package:taxi_driver/view/home/support/support_message_view.dart';\n\nclass SupportListView extends StatefulWidget {\n  const SupportListView({super.key});\n\n  @override\n  State<SupportListView> createState() => _SupportListViewState();\n}\n\nclass _SupportListViewState extends State<SupportListView> {\n  List listArr = [];\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n    getList();\n\n    // Received Message In Socket On Event\n    SocketManager.shared.socket?.on(\"support_message\", (data) {\n      print(\"support_message socket get :${data.toString()} \");\n      if (data[KKey.status] == \"1\") {\n        var mObj = data[KKey.payload] as List? ?? [];\n        var senderUserObj = data[\"user_info\"] as Map? ?? {};\n        Map? userObj;\n        var senderId = mObj[0][\"sender_id\"];\n        var userExits = false;\n        for (var uObj in listArr) {\n          if (senderId == uObj[\"user_id\"]) {\n            uObj[\"message\"] = mObj[0][\"message\"];\n            uObj[\"message_type\"] = mObj[0][\"message_type\"];\n            uObj[\"created_date\"] = mObj[0][\"created_date\"];\n            uObj[\"base_count\"] = (uObj[\"base_count\"] as int? ?? 0) + 1;\n            userExits = true;\n            userObj = uObj;\n            break;\n          }\n        }\n\n        if (!userExits) {\n          senderUserObj[\"message\"] = mObj[0][\"message\"];\n          senderUserObj[\"message_type\"] = mObj[0][\"message_type\"];\n          senderUserObj[\"created_date\"] = mObj[0][\"created_date\"];\n          senderUserObj[\"base_count\"] = 1;\n          listArr.insert(0, senderUserObj);\n        }else{\n          listArr.remove(userObj);\n          listArr.insert(0, userObj);\n        }\n\n        if (mounted) {\n          setState(() {});\n        }\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: TColor.lightWhite,\n      appBar: AppBar(\n        elevation: 0.5,\n        backgroundColor: Colors.white,\n        leading: IconButton(\n          onPressed: () {\n            context.pop();\n          },\n          icon: Image.asset(\n            \"assets/img/back.png\",\n            width: 25,\n            height: 25,\n          ),\n        ),\n        centerTitle: true,\n        title: Text(\n          \"Supports\",\n          style: TextStyle(\n            color: TColor.primaryText,\n            fontSize: 18,\n            fontWeight: FontWeight.w800,\n          ),\n        ),\n      ),\n      body: ListView.builder(\n        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),\n        itemBuilder: (context, index) {\n          var uObj = listArr[index] as Map? ?? {};\n\n          return SupportUserRow(\n            uObj: uObj,\n            onPressed: () async {\n              await context.push(SupportMessageView(\n                uObj: uObj,\n              ));\n              getList();\n            },\n          );\n        },\n        \n        \n        itemCount: listArr.length,\n      ),\n    );\n  }\n\n  //TODO: ApiCalling\n\n  void getList() {\n    Globs.showHUD();\n    ServiceCall.post({\n      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n    }, SVKey.svSupportList, isTokenApi: true, withSuccess: (responseObj) async {\n      Globs.hideHUD();\n      if (responseObj[KKey.status] == \"1\") {\n        listArr = responseObj[KKey.payload] as List? ?? [];\n        if (mounted) {\n          setState(() {});\n        }\n      } else {\n        mdShowAlert(Globs.appName,\n            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n      }\n    }, failure: (error) async {\n      Globs.hideHUD();\n      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n    });\n  }\n}\n"
        }
    ]
}