{
    "sourceFile": "lib/view/home/support/support_message_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1722774391353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722862436869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,310 +0,0 @@\n-import 'package:bubble/bubble.dart';\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-\n-class SupportMessageView extends StatefulWidget {\n-  final Map uObj;\n-  const SupportMessageView({super.key, required this.uObj});\n-\n-  @override\n-  State<SupportMessageView> createState() => _SupportMessageViewState();\n-}\n-\n-class _SupportMessageViewState extends State<SupportMessageView> {\n-  TextEditingController txtMessage = TextEditingController();\n-  List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getMessageList();\n-\n-    // Received Message In Socket On Event\n-    SocketManager.shared.socket?.on(\"support_message\", (data) {\n-      print(\"support_message socket get :${data.toString()} \");\n-      if (data[KKey.status] == \"1\") {\n-        var mObj = data[KKey.payload] as List? ?? [];\n-        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n-          listArr.add(mObj[0]);\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: TColor.lightWhite,\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        title: Row(\n-          children: [\n-            ClipRRect(\n-              borderRadius: BorderRadius.circular(25),\n-              child: CachedNetworkImage(\n-                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n-                width: 50,\n-                height: 50,\n-                fit: BoxFit.contain,\n-              ),\n-            ),\n-            const SizedBox(\n-              width: 15,\n-            ),\n-            Expanded(\n-              child: Text(\n-                widget.uObj[\"name\"] as String? ?? \"\",\n-                style: TextStyle(\n-                  color: TColor.primaryText,\n-                  fontWeight: FontWeight.w700,\n-                ),\n-              ),\n-            )\n-          ],\n-        ),\n-        actions: [\n-          TextButton(\n-            onPressed: () {\n-              clearMessageAction();\n-            },\n-            child: Text(\n-              \"Clear All\",\n-              style: TextStyle(\n-                color: TColor.primary,\n-                fontSize: 17,\n-                fontWeight: FontWeight.w700,\n-              ),\n-            ),\n-          )\n-        ],\n-      ),\n-      body: ListView.builder(\n-        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n-        itemBuilder: (context, index) {\n-          var mObj = listArr[index] as Map? ?? {};\n-\n-          var isSendMessage =\n-              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n-          return Column(\n-            children: [\n-              Bubble(\n-                margin: const BubbleEdges.only(top: 3),\n-                padding: const BubbleEdges.all(0),\n-                alignment:\n-                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n-                elevation: 0,\n-                color: Colors.transparent,\n-                child: Text(\n-                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n-                  style: TextStyle(\n-                    fontWeight: FontWeight.w300,\n-                    fontSize: 13,\n-                    color: TColor.secondaryText,\n-                  ),\n-                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n-                ),\n-              ),\n-              GestureDetector(\n-                onTap: () {},\n-                child: Bubble(\n-                  margin: const BubbleEdges.only(bottom: 5),\n-                  padding:\n-                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n-                  alignment:\n-                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n-                  elevation: 0.5,\n-                  radius: const Radius.circular(20.0),\n-                  color:\n-                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n-                  child: Text(\n-                    mObj[KKey.message] as String? ?? \"\",\n-                    style: TextStyle(\n-                      fontSize: 17,\n-                      color: isSendMessage\n-                          ? TColor.primaryTextW\n-                          : TColor.primaryText,\n-                      fontWeight: FontWeight.w500,\n-                    ),\n-                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n-                  ),\n-                ),\n-              )\n-            ],\n-          );\n-        },\n-        itemCount: listArr.length,\n-      ),\n-      bottomNavigationBar: Container(\n-        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n-          BoxShadow(\n-            blurRadius: 1.5,\n-            color: Colors.black26,\n-            offset: Offset(0, -1),\n-          ),\n-        ]),\n-        padding: EdgeInsets.only(\n-            left: 15,\n-            right: 15,\n-            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n-            top: 15),\n-        child: Row(\n-          mainAxisAlignment: MainAxisAlignment.start,\n-          crossAxisAlignment: CrossAxisAlignment.end,\n-          children: [\n-            const SizedBox(\n-              width: 8,\n-            ),\n-            Expanded(\n-              child: Container(\n-                padding:\n-                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n-                decoration: BoxDecoration(\n-                  color: const Color(0xfff0f0f0),\n-                  borderRadius: BorderRadius.circular(30),\n-                ),\n-                child: Row(\n-                  children: [\n-                    Expanded(\n-                      child: ConstrainedBox(\n-                        constraints: const BoxConstraints(\n-                          maxHeight: 100.0,\n-                        ),\n-                        child: TextField(\n-                          controller: txtMessage,\n-                          maxLines: null,\n-                          autocorrect: false,\n-                          decoration: InputDecoration(\n-                            contentPadding: const EdgeInsets.all(12),\n-                            enabledBorder: InputBorder.none,\n-                            focusedBorder: InputBorder.none,\n-                            hintText: \"Type Here\",\n-                            hintStyle: TextStyle(\n-                              color: TColor.secondaryText,\n-                              fontSize: 15,\n-                            ),\n-                          ),\n-                          style: TextStyle(\n-                            fontSize: 15,\n-                            color: TColor.primaryText,\n-                          ),\n-                        ),\n-                      ),\n-                    ),\n-                    TextButton(\n-                      onPressed: () {\n-                        sendMessageAction();\n-                      },\n-                      child: Icon(\n-                        Icons.send,\n-                        size: 25,\n-                        color: TColor.primary,\n-                      ),\n-                    )\n-                  ],\n-                ),\n-              ),\n-            )\n-          ],\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-  void sendMessageAction() {\n-    if (txtMessage.text.isEmpty) {\n-      return;\n-    }\n-\n-    sendMessageApi({\n-      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n-      \"message\": txtMessage.text,\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    });\n-  }\n-\n-  void clearMessageAction(){\n-    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void getMessageList() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"user_id\": widget.uObj[\"user_id\"].toString(),\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    }, SVKey.svSupportConnect, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-        listArr = payloadObj[\"messages\"] as List? ?? [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-\n-  void sendMessageApi(Map<String, String> parameter) {\n-    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n-        txtMessage.text = \"\";\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-\n-  void clearMessageApi(Map<String, String> parameter) {\n-    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862472233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n-\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722863280220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,310 @@\n+import 'package:bubble/bubble.dart';\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n \n+class SupportMessageView extends StatefulWidget {\n+  final Map uObj;\n+  const SupportMessageView({super.key, required this.uObj});\n+\n+  @override\n+  State<SupportMessageView> createState() => _SupportMessageViewState();\n+}\n+\n+class _SupportMessageViewState extends State<SupportMessageView> {\n+  TextEditingController txtMessage = TextEditingController();\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getMessageList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n+          listArr.add(mObj[0]);\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        title: Row(\n+          children: [\n+            ClipRRect(\n+              borderRadius: BorderRadius.circular(25),\n+              child: CachedNetworkImage(\n+                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n+                width: 50,\n+                height: 50,\n+                fit: BoxFit.contain,\n+              ),\n+            ),\n+            const SizedBox(\n+              width: 15,\n+            ),\n+            Expanded(\n+              child: Text(\n+                widget.uObj[\"name\"] as String? ?? \"\",\n+                style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontWeight: FontWeight.w700,\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () {\n+              clearMessageAction();\n+            },\n+            child: Text(\n+              \"Clear All\",\n+              style: TextStyle(\n+                color: TColor.primary,\n+                fontSize: 17,\n+                fontWeight: FontWeight.w700,\n+              ),\n+            ),\n+          )\n+        ],\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var mObj = listArr[index] as Map? ?? {};\n+\n+          var isSendMessage =\n+              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n+          return Column(\n+            children: [\n+              Bubble(\n+                margin: const BubbleEdges.only(top: 3),\n+                padding: const BubbleEdges.all(0),\n+                alignment:\n+                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                elevation: 0,\n+                color: Colors.transparent,\n+                child: Text(\n+                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n+                  style: TextStyle(\n+                    fontWeight: FontWeight.w300,\n+                    fontSize: 13,\n+                    color: TColor.secondaryText,\n+                  ),\n+                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                ),\n+              ),\n+              GestureDetector(\n+                onTap: () {},\n+                child: Bubble(\n+                  margin: const BubbleEdges.only(bottom: 5),\n+                  padding:\n+                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n+                  alignment:\n+                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                  elevation: 0.5,\n+                  radius: const Radius.circular(20.0),\n+                  color:\n+                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n+                  child: Text(\n+                    mObj[KKey.message] as String? ?? \"\",\n+                    style: TextStyle(\n+                      fontSize: 17,\n+                      color: isSendMessage\n+                          ? TColor.primaryTextW\n+                          : TColor.primaryText,\n+                      fontWeight: FontWeight.w500,\n+                    ),\n+                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                  ),\n+                ),\n+              )\n+            ],\n+          );\n+        },\n+        itemCount: listArr.length,\n+      ),\n+      bottomNavigationBar: Container(\n+        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n+          BoxShadow(\n+            blurRadius: 1.5,\n+            color: Colors.black26,\n+            offset: Offset(0, -1),\n+          ),\n+        ]),\n+        padding: EdgeInsets.only(\n+            left: 15,\n+            right: 15,\n+            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n+            top: 15),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.start,\n+          crossAxisAlignment: CrossAxisAlignment.end,\n+          children: [\n+            const SizedBox(\n+              width: 8,\n+            ),\n+            Expanded(\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n+                decoration: BoxDecoration(\n+                  color: const Color(0xfff0f0f0),\n+                  borderRadius: BorderRadius.circular(30),\n+                ),\n+                child: Row(\n+                  children: [\n+                    Expanded(\n+                      child: ConstrainedBox(\n+                        constraints: const BoxConstraints(\n+                          maxHeight: 100.0,\n+                        ),\n+                        child: TextField(\n+                          controller: txtMessage,\n+                          maxLines: null,\n+                          autocorrect: false,\n+                          decoration: InputDecoration(\n+                            contentPadding: const EdgeInsets.all(12),\n+                            enabledBorder: InputBorder.none,\n+                            focusedBorder: InputBorder.none,\n+                            hintText: \"Type Here\",\n+                            hintStyle: TextStyle(\n+                              color: TColor.secondaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                          style: TextStyle(\n+                            fontSize: 15,\n+                            color: TColor.primaryText,\n+                          ),\n+                        ),\n+                      ),\n+                    ),\n+                    TextButton(\n+                      onPressed: () {\n+                        sendMessageAction();\n+                      },\n+                      child: Icon(\n+                        Icons.send,\n+                        size: 25,\n+                        color: TColor.primary,\n+                      ),\n+                    )\n+                  ],\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+  void sendMessageAction() {\n+    if (txtMessage.text.isEmpty) {\n+      return;\n+    }\n+\n+    sendMessageApi({\n+      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n+      \"message\": txtMessage.text,\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    });\n+  }\n+\n+  void clearMessageAction(){\n+    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getMessageList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"user_id\": widget.uObj[\"user_id\"].toString(),\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportConnect, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        listArr = payloadObj[\"messages\"] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void sendMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n+        txtMessage.text = \"\";\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void clearMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1724056589692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,623 @@\n+import 'package:bubble/bubble.dart';\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class SupportMessageView extends StatefulWidget {\n+  final Map uObj;\n+  const SupportMessageView({super.key, required this.uObj});\n+\n+  @override\n+  State<SupportMessageView> createState() => _SupportMessageViewState();\n+}\n+\n+class _SupportMessageViewState extends State<SupportMessageView> {\n+  TextEditingController txtMessage = TextEditingController();\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getMessageList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n+          listArr.add(mObj[0]);\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        title: Row(\n+          children: [\n+            ClipRRect(\n+              borderRadius: BorderRadius.circular(25),\n+              child: CachedNetworkImage(\n+                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n+                width: 50,\n+                height: 50,\n+                fit: BoxFit.contain,\n+              ),\n+            ),\n+            const SizedBox(\n+              width: 15,\n+            ),\n+            Expanded(\n+              child: Text(\n+                widget.uObj[\"name\"] as String? ?? \"\",\n+                style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontWeight: FontWeight.w700,\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () {\n+              clearMessageAction();\n+            },\n+            child: Text(\n+              \"Clear All\",\n+              style: TextStyle(\n+                color: TColor.primary,\n+                fontSize: 17,\n+                fontWeight: FontWeight.w700,\n+              ),\n+            ),\n+          )\n+        ],\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var mObj = listArr[index] as Map? ?? {};\n+\n+          var isSendMessage =\n+              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n+          return Column(\n+            children: [\n+              Bubble(\n+                margin: const BubbleEdges.only(top: 3),\n+                padding: const BubbleEdges.all(0),\n+                alignment:\n+                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                elevation: 0,\n+                color: Colors.transparent,\n+                child: Text(\n+                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n+                  style: TextStyle(\n+                    fontWeight: FontWeight.w300,\n+                    fontSize: 13,\n+                    color: TColor.secondaryText,\n+                  ),\n+                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                ),\n+              ),\n+              GestureDetector(\n+                onTap: () {},\n+                child: Bubble(\n+                  margin: const BubbleEdges.only(bottom: 5),\n+                  padding:\n+                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n+                  alignment:\n+                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                  elevation: 0.5,\n+                  radius: const Radius.circular(20.0),\n+                  color:\n+                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n+                  child: Text(\n+                    mObj[KKey.message] as String? ?? \"\",\n+                    style: TextStyle(\n+                      fontSize: 17,\n+                      color: isSendMessage\n+                          ? TColor.primaryTextW\n+                          : TColor.primaryText,\n+                      fontWeight: FontWeight.w500,\n+                    ),\n+                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                  ),\n+                ),\n+              )\n+            ],\n+          );\n+        },\n+        itemCount: listArr.length,\n+      ),\n+      bottomNavigationBar: Container(\n+        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n+          BoxShadow(\n+            blurRadius: 1.5,\n+            color: Colors.black26,\n+            offset: Offset(0, -1),\n+          ),\n+        ]),\n+        padding: EdgeInsets.only(\n+            left: 15,\n+            right: 15,\n+            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n+            top: 15),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.start,\n+          crossAxisAlignment: CrossAxisAlignment.end,\n+          children: [\n+            const SizedBox(\n+              width: 8,\n+            ),\n+            Expanded(\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n+                decoration: BoxDecoration(\n+                  color: const Color(0xfff0f0f0),\n+                  borderRadius: BorderRadius.circular(30),\n+                ),\n+                child: Row(\n+                  children: [\n+                    Expanded(\n+                      child: ConstrainedBox(\n+                        constraints: const BoxConstraints(\n+                          maxHeight: 100.0,\n+                        ),\n+                        child: TextField(\n+                          controller: txtMessage,\n+                          maxLines: null,\n+                          autocorrect: false,\n+                          decoration: InputDecoration(\n+                            contentPadding: const EdgeInsets.all(12),\n+                            enabledBorder: InputBorder.none,\n+                            focusedBorder: InputBorder.none,\n+                            hintText: \"Type Here\",\n+                            hintStyle: TextStyle(\n+                              color: TColor.secondaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                          style: TextStyle(\n+                            fontSize: 15,\n+                            color: TColor.primaryText,\n+                          ),\n+                        ),\n+                      ),\n+                    ),\n+                    TextButton(\n+                      onPressed: () {\n+                        sendMessageAction();\n+                      },\n+                      child: Icon(\n+                        Icons.send,\n+                        size: 25,\n+                        color: TColor.primary,\n+                      ),\n+                    )\n+                  ],\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+  void sendMessageAction() {\n+    if (txtMessage.text.isEmpty) {\n+      return;\n+    }\n+\n+    sendMessageApi({\n+      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n+      \"message\": txtMessage.text,\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    });\n+  }\n+\n+  void clearMessageAction(){\n+    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getMessageList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"user_id\": widget.uObj[\"user_id\"].toString(),\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportConnect, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        listArr = payloadObj[\"messages\"] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void sendMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n+        txtMessage.text = \"\";\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void clearMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n+\n+\n+\n+/*import 'package:bubble/bubble.dart';\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class SupportMessageView extends StatefulWidget {\n+  final Map uObj;\n+  const SupportMessageView({super.key, required this.uObj});\n+\n+  @override\n+  State<SupportMessageView> createState() => _SupportMessageViewState();\n+}\n+\n+class _SupportMessageViewState extends State<SupportMessageView> {\n+  TextEditingController txtMessage = TextEditingController();\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getMessageList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n+          listArr.add(mObj[0]);\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        title: Row(\n+          children: [\n+            ClipRRect(\n+              borderRadius: BorderRadius.circular(25),\n+              child: CachedNetworkImage(\n+                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n+                width: 50,\n+                height: 50,\n+                fit: BoxFit.contain,\n+              ),\n+            ),\n+            const SizedBox(\n+              width: 15,\n+            ),\n+            Expanded(\n+              child: Text(\n+                widget.uObj[\"name\"] as String? ?? \"\",\n+                style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontWeight: FontWeight.w700,\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () {\n+              clearMessageAction();\n+            },\n+            child: Text(\n+              \"Clear All\",\n+              style: TextStyle(\n+                color: TColor.primary,\n+                fontSize: 17,\n+                fontWeight: FontWeight.w700,\n+              ),\n+            ),\n+          )\n+        ],\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var mObj = listArr[index] as Map? ?? {};\n+\n+          var isSendMessage =\n+              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n+          return Column(\n+            children: [\n+              Bubble(\n+                margin: const BubbleEdges.only(top: 3),\n+                padding: const BubbleEdges.all(0),\n+                alignment:\n+                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                elevation: 0,\n+                color: Colors.transparent,\n+                child: Text(\n+                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n+                  style: TextStyle(\n+                    fontWeight: FontWeight.w300,\n+                    fontSize: 13,\n+                    color: TColor.secondaryText,\n+                  ),\n+                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                ),\n+              ),\n+              GestureDetector(\n+                onTap: () {},\n+                child: Bubble(\n+                  margin: const BubbleEdges.only(bottom: 5),\n+                  padding:\n+                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n+                  alignment:\n+                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                  elevation: 0.5,\n+                  radius: const Radius.circular(20.0),\n+                  color:\n+                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n+                  child: Text(\n+                    mObj[KKey.message] as String? ?? \"\",\n+                    style: TextStyle(\n+                      fontSize: 17,\n+                      color: isSendMessage\n+                          ? TColor.primaryTextW\n+                          : TColor.primaryText,\n+                      fontWeight: FontWeight.w500,\n+                    ),\n+                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                  ),\n+                ),\n+              )\n+            ],\n+          );\n+        },\n+        itemCount: listArr.length,\n+      ),\n+      bottomNavigationBar: Container(\n+        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n+          BoxShadow(\n+            blurRadius: 1.5,\n+            color: Colors.black26,\n+            offset: Offset(0, -1),\n+          ),\n+        ]),\n+        padding: EdgeInsets.only(\n+            left: 15,\n+            right: 15,\n+            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n+            top: 15),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.start,\n+          crossAxisAlignment: CrossAxisAlignment.end,\n+          children: [\n+            const SizedBox(\n+              width: 8,\n+            ),\n+            Expanded(\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n+                decoration: BoxDecoration(\n+                  color: const Color(0xfff0f0f0),\n+                  borderRadius: BorderRadius.circular(30),\n+                ),\n+                child: Row(\n+                  children: [\n+                    Expanded(\n+                      child: ConstrainedBox(\n+                        constraints: const BoxConstraints(\n+                          maxHeight: 100.0,\n+                        ),\n+                        child: TextField(\n+                          controller: txtMessage,\n+                          maxLines: null,\n+                          autocorrect: false,\n+                          decoration: InputDecoration(\n+                            contentPadding: const EdgeInsets.all(12),\n+                            enabledBorder: InputBorder.none,\n+                            focusedBorder: InputBorder.none,\n+                            hintText: \"Type Here\",\n+                            hintStyle: TextStyle(\n+                              color: TColor.secondaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                          style: TextStyle(\n+                            fontSize: 15,\n+                            color: TColor.primaryText,\n+                          ),\n+                        ),\n+                      ),\n+                    ),\n+                    TextButton(\n+                      onPressed: () {\n+                        sendMessageAction();\n+                      },\n+                      child: Icon(\n+                        Icons.send,\n+                        size: 25,\n+                        color: TColor.primary,\n+                      ),\n+                    )\n+                  ],\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+  void sendMessageAction() {\n+    if (txtMessage.text.isEmpty) {\n+      return;\n+    }\n+\n+    sendMessageApi({\n+      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n+      \"message\": txtMessage.text,\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    });\n+  }\n+\n+  void clearMessageAction(){\n+    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getMessageList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"user_id\": widget.uObj[\"user_id\"].toString(),\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportConnect, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        listArr = payloadObj[\"messages\"] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void sendMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n+        txtMessage.text = \"\";\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void clearMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}*/\n"
                },
                {
                    "date": 1724063687015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -620,314 +620,4 @@\n       mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n     });\n   }\n }*/\n-import 'package:bubble/bubble.dart';\n-import 'package:cached_network_image/cached_network_image.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-\n-class SupportMessageView extends StatefulWidget {\n-  final Map uObj;\n-  const SupportMessageView({super.key, required this.uObj});\n-\n-  @override\n-  State<SupportMessageView> createState() => _SupportMessageViewState();\n-}\n-\n-class _SupportMessageViewState extends State<SupportMessageView> {\n-  TextEditingController txtMessage = TextEditingController();\n-  List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getMessageList();\n-\n-    // Received Message In Socket On Event\n-    SocketManager.shared.socket?.on(\"support_message\", (data) {\n-      print(\"support_message socket get :${data.toString()} \");\n-      if (data[KKey.status] == \"1\") {\n-        var mObj = data[KKey.payload] as List? ?? [];\n-        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n-          listArr.add(mObj[0]);\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        }\n-      }\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor: TColor.lightWhite,\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        title: Row(\n-          children: [\n-            ClipRRect(\n-              borderRadius: BorderRadius.circular(25),\n-              child: CachedNetworkImage(\n-                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n-                width: 50,\n-                height: 50,\n-                fit: BoxFit.contain,\n-              ),\n-            ),\n-            const SizedBox(\n-              width: 15,\n-            ),\n-            Expanded(\n-              child: Text(\n-                widget.uObj[\"name\"] as String? ?? \"\",\n-                style: TextStyle(\n-                  color: TColor.primaryText,\n-                  fontWeight: FontWeight.w700,\n-                ),\n-              ),\n-            )\n-          ],\n-        ),\n-        actions: [\n-          TextButton(\n-            onPressed: () {\n-              clearMessageAction();\n-            },\n-            child: Text(\n-              \"Clear All\",\n-              style: TextStyle(\n-                color: TColor.primary,\n-                fontSize: 17,\n-                fontWeight: FontWeight.w700,\n-              ),\n-            ),\n-          )\n-        ],\n-      ),\n-      body: ListView.builder(\n-        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n-        itemBuilder: (context, index) {\n-          var mObj = listArr[index] as Map? ?? {};\n-\n-          var isSendMessage =\n-              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n-          return Column(\n-            children: [\n-              Bubble(\n-                margin: const BubbleEdges.only(top: 3),\n-                padding: const BubbleEdges.all(0),\n-                alignment:\n-                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n-                elevation: 0,\n-                color: Colors.transparent,\n-                child: Text(\n-                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n-                  style: TextStyle(\n-                    fontWeight: FontWeight.w300,\n-                    fontSize: 13,\n-                    color: TColor.secondaryText,\n-                  ),\n-                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n-                ),\n-              ),\n-              GestureDetector(\n-                onTap: () {},\n-                child: Bubble(\n-                  margin: const BubbleEdges.only(bottom: 5),\n-                  padding:\n-                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n-                  alignment:\n-                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n-                  elevation: 0.5,\n-                  radius: const Radius.circular(20.0),\n-                  color:\n-                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n-                  child: Text(\n-                    mObj[KKey.message] as String? ?? \"\",\n-                    style: TextStyle(\n-                      fontSize: 17,\n-                      color: isSendMessage\n-                          ? TColor.primaryTextW\n-                          : TColor.primaryText,\n-                      fontWeight: FontWeight.w500,\n-                    ),\n-                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n-                  ),\n-                ),\n-              )\n-            ],\n-          );\n-        },\n-        itemCount: listArr.length,\n-      ),\n-      bottomNavigationBar: Container(\n-        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n-          BoxShadow(\n-            blurRadius: 1.5,\n-            color: Colors.black26,\n-            offset: Offset(0, -1),\n-          ),\n-        ]),\n-        padding: EdgeInsets.only(\n-            left: 15,\n-            right: 15,\n-            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n-            top: 15),\n-        child: Row(\n-          mainAxisAlignment: MainAxisAlignment.start,\n-          crossAxisAlignment: CrossAxisAlignment.end,\n-          children: [\n-            const SizedBox(\n-              width: 8,\n-            ),\n-            Expanded(\n-              child: Container(\n-                padding:\n-                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n-                decoration: BoxDecoration(\n-                  color: const Color(0xfff0f0f0),\n-                  borderRadius: BorderRadius.circular(30),\n-                ),\n-                child: Row(\n-                  children: [\n-                    Expanded(\n-                      child: ConstrainedBox(\n-                        constraints: const BoxConstraints(\n-                          maxHeight: 100.0,\n-                        ),\n-                        child: TextField(\n-                          controller: txtMessage,\n-                          maxLines: null,\n-                          autocorrect: false,\n-                          decoration: InputDecoration(\n-                            contentPadding: const EdgeInsets.all(12),\n-                            enabledBorder: InputBorder.none,\n-                            focusedBorder: InputBorder.none,\n-                            hintText: \"Type Here\",\n-                            hintStyle: TextStyle(\n-                              color: TColor.secondaryText,\n-                              fontSize: 15,\n-                            ),\n-                          ),\n-                          style: TextStyle(\n-                            fontSize: 15,\n-                            color: TColor.primaryText,\n-                          ),\n-                        ),\n-                      ),\n-                    ),\n-                    TextButton(\n-                      onPressed: () {\n-                        sendMessageAction();\n-                      },\n-                      child: Icon(\n-                        Icons.send,\n-                        size: 25,\n-                        color: TColor.primary,\n-                      ),\n-                    )\n-                  ],\n-                ),\n-              ),\n-            )\n-          ],\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-  void sendMessageAction() {\n-    if (txtMessage.text.isEmpty) {\n-      return;\n-    }\n-\n-    sendMessageApi({\n-      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n-      \"message\": txtMessage.text,\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    });\n-  }\n-\n-  void clearMessageAction(){\n-    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n-  }\n-\n-  //TODO: ApiCalling\n-\n-  void getMessageList() {\n-    Globs.showHUD();\n-    ServiceCall.post({\n-      \"user_id\": widget.uObj[\"user_id\"].toString(),\n-      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-    }, SVKey.svSupportConnect, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-      if (responseObj[KKey.status] == \"1\") {\n-        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-        listArr = payloadObj[\"messages\"] as List? ?? [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      Globs.hideHUD();\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-\n-  void sendMessageApi(Map<String, String> parameter) {\n-    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n-        txtMessage.text = \"\";\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-\n-  void clearMessageApi(Map<String, String> parameter) {\n-    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = [];\n-        if (mounted) {\n-          setState(() {});\n-        }\n-      } else {\n-        mdShowAlert(Globs.appName,\n-            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n-      }\n-    }, failure: (error) async {\n-      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n-    });\n-  }\n-}\n"
                },
                {
                    "date": 1724929103117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,310 @@\n+import 'package:bubble/bubble.dart';\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class SupportMessageView extends StatefulWidget {\n+  final Map uObj;\n+  const SupportMessageView({super.key, required this.uObj});\n+\n+  @override\n+  State<SupportMessageView> createState() => _SupportMessageViewState();\n+}\n+\n+class _SupportMessageViewState extends State<SupportMessageView> {\n+  TextEditingController txtMessage = TextEditingController();\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getMessageList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n+          listArr.add(mObj[0]);\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        title: Row(\n+          children: [\n+            ClipRRect(\n+              borderRadius: BorderRadius.circular(25),\n+              child: CachedNetworkImage(\n+                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n+                width: 50,\n+                height: 50,\n+                fit: BoxFit.contain,\n+              ),\n+            ),\n+            const SizedBox(\n+              width: 15,\n+            ),\n+            Expanded(\n+              child: Text(\n+                widget.uObj[\"name\"] as String? ?? \"\",\n+                style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontWeight: FontWeight.w700,\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () {\n+              clearMessageAction();\n+            },\n+            child: Text(\n+              \"Clear All\",\n+              style: TextStyle(\n+                color: TColor.primary,\n+                fontSize: 17,\n+                fontWeight: FontWeight.w700,\n+              ),\n+            ),\n+          )\n+        ],\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var mObj = listArr[index] as Map? ?? {};\n+\n+          var isSendMessage =\n+              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n+          return Column(\n+            children: [\n+              Bubble(\n+                margin: const BubbleEdges.only(top: 3),\n+                padding: const BubbleEdges.all(0),\n+                alignment:\n+                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                elevation: 0,\n+                color: Colors.transparent,\n+                child: Text(\n+                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n+                  style: TextStyle(\n+                    fontWeight: FontWeight.w300,\n+                    fontSize: 13,\n+                    color: TColor.secondaryText,\n+                  ),\n+                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                ),\n+              ),\n+              GestureDetector(\n+                onTap: () {},\n+                child: Bubble(\n+                  margin: const BubbleEdges.only(bottom: 5),\n+                  padding:\n+                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n+                  alignment:\n+                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                  elevation: 0.5,\n+                  radius: const Radius.circular(20.0),\n+                  color:\n+                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n+                  child: Text(\n+                    mObj[KKey.message] as String? ?? \"\",\n+                    style: TextStyle(\n+                      fontSize: 17,\n+                      color: isSendMessage\n+                          ? TColor.primaryTextW\n+                          : TColor.primaryText,\n+                      fontWeight: FontWeight.w500,\n+                    ),\n+                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                  ),\n+                ),\n+              )\n+            ],\n+          );\n+        },\n+        itemCount: listArr.length,\n+      ),\n+      bottomNavigationBar: Container(\n+        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n+          BoxShadow(\n+            blurRadius: 1.5,\n+            color: Colors.black26,\n+            offset: Offset(0, -1),\n+          ),\n+        ]),\n+        padding: EdgeInsets.only(\n+            left: 15,\n+            right: 15,\n+            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n+            top: 15),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.start,\n+          crossAxisAlignment: CrossAxisAlignment.end,\n+          children: [\n+            const SizedBox(\n+              width: 8,\n+            ),\n+            Expanded(\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n+                decoration: BoxDecoration(\n+                  color: const Color(0xfff0f0f0),\n+                  borderRadius: BorderRadius.circular(30),\n+                ),\n+                child: Row(\n+                  children: [\n+                    Expanded(\n+                      child: ConstrainedBox(\n+                        constraints: const BoxConstraints(\n+                          maxHeight: 100.0,\n+                        ),\n+                        child: TextField(\n+                          controller: txtMessage,\n+                          maxLines: null,\n+                          autocorrect: false,\n+                          decoration: InputDecoration(\n+                            contentPadding: const EdgeInsets.all(12),\n+                            enabledBorder: InputBorder.none,\n+                            focusedBorder: InputBorder.none,\n+                            hintText: \"Type Here\",\n+                            hintStyle: TextStyle(\n+                              color: TColor.secondaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                          style: TextStyle(\n+                            fontSize: 15,\n+                            color: TColor.primaryText,\n+                          ),\n+                        ),\n+                      ),\n+                    ),\n+                    TextButton(\n+                      onPressed: () {\n+                        sendMessageAction();\n+                      },\n+                      child: Icon(\n+                        Icons.send,\n+                        size: 25,\n+                        color: TColor.primary,\n+                      ),\n+                    )\n+                  ],\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+  void sendMessageAction() {\n+    if (txtMessage.text.isEmpty) {\n+      return;\n+    }\n+\n+    sendMessageApi({\n+      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n+      \"message\": txtMessage.text,\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    });\n+  }\n+\n+  void clearMessageAction(){\n+    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getMessageList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"user_id\": widget.uObj[\"user_id\"].toString(),\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportConnect, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        listArr = payloadObj[\"messages\"] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void sendMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n+        txtMessage.text = \"\";\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void clearMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1725469108222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,311 @@\n+import 'package:bubble/bubble.dart';\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class SupportMessageView extends StatefulWidget {\n+  final Map uObj;\n+  const SupportMessageView({super.key, required this.uObj});\n+\n+  @override\n+  State<SupportMessageView> createState() => _SupportMessageViewState();\n+}\n+\n+class _SupportMessageViewState extends State<SupportMessageView> {\n+  TextEditingController txtMessage = TextEditingController();\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getMessageList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n+          listArr.add(mObj[0]);\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        title: Row(\n+          children: [\n+            ClipRRect(\n+              borderRadius: BorderRadius.circular(25),\n+              child: CachedNetworkImage(\n+                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n+                width: 50,\n+                height: 50,\n+                fit: BoxFit.contain,\n+              ),\n+            ),\n+            const SizedBox(\n+              width: 15,\n+            ),\n+            Expanded(\n+              child: Text(\n+                widget.uObj[\"name\"] as String? ?? \"\",\n+                style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontWeight: FontWeight.w700,\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () {\n+              clearMessageAction();\n+            },\n+            child: Text(\n+              \"Clear All\",\n+              style: TextStyle(\n+                color: TColor.primary,\n+                fontSize: 17,\n+                fontWeight: FontWeight.w700,\n+              ),\n+            ),\n+          )\n+        ],\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var mObj = listArr[index] as Map? ?? {};\n+\n+          var isSendMessage =\n+              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n+          return Column(\n+            children: [\n+              Bubble(\n+                margin: const BubbleEdges.only(top: 3),\n+                padding: const BubbleEdges.all(0),\n+                alignment:\n+                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                elevation: 0,\n+                color: Colors.transparent,\n+                child: Text(\n+                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n+                  style: TextStyle(\n+                    fontWeight: FontWeight.w300,\n+                    fontSize: 13,\n+                    color: TColor.secondaryText,\n+                  ),\n+                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                ),\n+              ),\n+              GestureDetector(\n+                onTap: () {},\n+                child: Bubble(\n+                  margin: const BubbleEdges.only(bottom: 5),\n+                  padding:\n+                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n+                  alignment:\n+                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                  elevation: 0.5,\n+                  radius: const Radius.circular(20.0),\n+                  color:\n+                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n+                  child: Text(\n+                    mObj[KKey.message] as String? ?? \"\",\n+                    style: TextStyle(\n+                      fontSize: 17,\n+                      color: isSendMessage\n+                          ? TColor.primaryTextW\n+                          : TColor.primaryText,\n+                      fontWeight: FontWeight.w500,\n+                    ),\n+                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                  ),\n+                ),\n+              )\n+            ],\n+          );\n+        },\n+        itemCount: listArr.length,\n+      ),\n+      bottomNavigationBar: Container(\n+        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n+          BoxShadow(\n+            blurRadius: 1.5,\n+            color: Colors.black26,\n+            offset: Offset(0, -1),\n+          ),\n+        ]),\n+        padding: EdgeInsets.only(\n+            left: 15,\n+            right: 15,\n+            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n+            top: 15),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.start,\n+          crossAxisAlignment: CrossAxisAlignment.end,\n+          children: [\n+            const SizedBox(\n+              width: 8,\n+            ),\n+            Expanded(\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n+                decoration: BoxDecoration(\n+                  color: const Color(0xfff0f0f0),\n+                  borderRadius: BorderRadius.circular(30),\n+                ),\n+                child: Row(\n+                  children: [\n+                    Expanded(\n+                      child: ConstrainedBox(\n+                        constraints: const BoxConstraints(\n+                          maxHeight: 100.0,\n+                        ),\n+                        child: TextField(\n+                          controller: txtMessage,\n+                          maxLines: null,\n+                          autocorrect: false,\n+                          decoration: InputDecoration(\n+                            contentPadding: const EdgeInsets.all(12),\n+                            enabledBorder: InputBorder.none,\n+                            focusedBorder: InputBorder.none,\n+                            hintText: \"Type Here\",\n+                            hintStyle: TextStyle(\n+                              color: TColor.secondaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                          style: TextStyle(\n+                            fontSize: 15,\n+                            color: TColor.primaryText,\n+                          ),\n+                        ),\n+                      ),\n+                    ),\n+                    TextButton(\n+                      onPressed: () {\n+                        sendMessageAction();\n+                      },\n+                      child: Icon(\n+                        Icons.send,\n+                        size: 25,\n+                        color: TColor.primary,\n+                      ),\n+                    )\n+                  ],\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+  void sendMessageAction() {\n+    if (txtMessage.text.isEmpty) {\n+      return;\n+    }\n+\n+    sendMessageApi({\n+      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n+      \"message\": txtMessage.text,\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    });\n+  }\n+\n+  void clearMessageAction(){\n+    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getMessageList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"user_id\": widget.uObj[\"user_id\"].toString(),\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportConnect, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        listArr = payloadObj[\"messages\"] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void sendMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n+        txtMessage.text = \"\";\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void clearMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n+\n"
                },
                {
                    "date": 1725806140001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,310 @@\n+import 'package:bubble/bubble.dart';\n+import 'package:cached_network_image/cached_network_image.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class SupportMessageView extends StatefulWidget {\n+  final Map uObj;\n+  const SupportMessageView({super.key, required this.uObj});\n+\n+  @override\n+  State<SupportMessageView> createState() => _SupportMessageViewState();\n+}\n+\n+class _SupportMessageViewState extends State<SupportMessageView> {\n+  TextEditingController txtMessage = TextEditingController();\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getMessageList();\n+\n+    // Received Message In Socket On Event\n+    SocketManager.shared.socket?.on(\"support_message\", (data) {\n+      print(\"support_message socket get :${data.toString()} \");\n+      if (data[KKey.status] == \"1\") {\n+        var mObj = data[KKey.payload] as List? ?? [];\n+        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n+          listArr.add(mObj[0]);\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        }\n+      }\n+    });\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor: TColor.lightWhite,\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        title: Row(\n+          children: [\n+            ClipRRect(\n+              borderRadius: BorderRadius.circular(25),\n+              child: CachedNetworkImage(\n+                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n+                width: 50,\n+                height: 50,\n+                fit: BoxFit.contain,\n+              ),\n+            ),\n+            const SizedBox(\n+              width: 15,\n+            ),\n+            Expanded(\n+              child: Text(\n+                widget.uObj[\"name\"] as String? ?? \"\",\n+                style: TextStyle(\n+                  color: TColor.primaryText,\n+                  fontWeight: FontWeight.w700,\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () {\n+              clearMessageAction();\n+            },\n+            child: Text(\n+              \"Clear All\",\n+              style: TextStyle(\n+                color: TColor.primary,\n+                fontSize: 17,\n+                fontWeight: FontWeight.w700,\n+              ),\n+            ),\n+          )\n+        ],\n+      ),\n+      body: ListView.builder(\n+        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n+        itemBuilder: (context, index) {\n+          var mObj = listArr[index] as Map? ?? {};\n+\n+          var isSendMessage =\n+              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n+          return Column(\n+            children: [\n+              Bubble(\n+                margin: const BubbleEdges.only(top: 3),\n+                padding: const BubbleEdges.all(0),\n+                alignment:\n+                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                elevation: 0,\n+                color: Colors.transparent,\n+                child: Text(\n+                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n+                  style: TextStyle(\n+                    fontWeight: FontWeight.w300,\n+                    fontSize: 13,\n+                    color: TColor.secondaryText,\n+                  ),\n+                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                ),\n+              ),\n+              GestureDetector(\n+                onTap: () {},\n+                child: Bubble(\n+                  margin: const BubbleEdges.only(bottom: 5),\n+                  padding:\n+                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n+                  alignment:\n+                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n+                  elevation: 0.5,\n+                  radius: const Radius.circular(20.0),\n+                  color:\n+                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n+                  child: Text(\n+                    mObj[KKey.message] as String? ?? \"\",\n+                    style: TextStyle(\n+                      fontSize: 17,\n+                      color: isSendMessage\n+                          ? TColor.primaryTextW\n+                          : TColor.primaryText,\n+                      fontWeight: FontWeight.w500,\n+                    ),\n+                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n+                  ),\n+                ),\n+              )\n+            ],\n+          );\n+        },\n+        itemCount: listArr.length,\n+      ),\n+      bottomNavigationBar: Container(\n+        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n+          BoxShadow(\n+            blurRadius: 1.5,\n+            color: Colors.black26,\n+            offset: Offset(0, -1),\n+          ),\n+        ]),\n+        padding: EdgeInsets.only(\n+            left: 15,\n+            right: 15,\n+            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n+            top: 15),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.start,\n+          crossAxisAlignment: CrossAxisAlignment.end,\n+          children: [\n+            const SizedBox(\n+              width: 8,\n+            ),\n+            Expanded(\n+              child: Container(\n+                padding:\n+                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n+                decoration: BoxDecoration(\n+                  color: const Color(0xfff0f0f0),\n+                  borderRadius: BorderRadius.circular(30),\n+                ),\n+                child: Row(\n+                  children: [\n+                    Expanded(\n+                      child: ConstrainedBox(\n+                        constraints: const BoxConstraints(\n+                          maxHeight: 100.0,\n+                        ),\n+                        child: TextField(\n+                          controller: txtMessage,\n+                          maxLines: null,\n+                          autocorrect: false,\n+                          decoration: InputDecoration(\n+                            contentPadding: const EdgeInsets.all(12),\n+                            enabledBorder: InputBorder.none,\n+                            focusedBorder: InputBorder.none,\n+                            hintText: \"Type Here\",\n+                            hintStyle: TextStyle(\n+                              color: TColor.secondaryText,\n+                              fontSize: 15,\n+                            ),\n+                          ),\n+                          style: TextStyle(\n+                            fontSize: 15,\n+                            color: TColor.primaryText,\n+                          ),\n+                        ),\n+                      ),\n+                    ),\n+                    TextButton(\n+                      onPressed: () {\n+                        sendMessageAction();\n+                      },\n+                      child: Icon(\n+                        Icons.send,\n+                        size: 25,\n+                        color: TColor.primary,\n+                      ),\n+                    )\n+                  ],\n+                ),\n+              ),\n+            )\n+          ],\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+  void sendMessageAction() {\n+    if (txtMessage.text.isEmpty) {\n+      return;\n+    }\n+\n+    sendMessageApi({\n+      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n+      \"message\": txtMessage.text,\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    });\n+  }\n+\n+  void clearMessageAction(){\n+    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n+  }\n+\n+  //TODO: ApiCalling\n+\n+  void getMessageList() {\n+    Globs.showHUD();\n+    ServiceCall.post({\n+      \"user_id\": widget.uObj[\"user_id\"].toString(),\n+      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+    }, SVKey.svSupportConnect, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+      if (responseObj[KKey.status] == \"1\") {\n+        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+        listArr = payloadObj[\"messages\"] as List? ?? [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      Globs.hideHUD();\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void sendMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n+        txtMessage.text = \"\";\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+\n+  void clearMessageApi(Map<String, String> parameter) {\n+    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = [];\n+        if (mounted) {\n+          setState(() {});\n+        }\n+      } else {\n+        mdShowAlert(Globs.appName,\n+            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n+      }\n+    }, failure: (error) async {\n+      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n+    });\n+  }\n+}\n"
                }
            ],
            "date": 1722774391353,
            "name": "Commit-0",
            "content": "import 'package:bubble/bubble.dart';\nimport 'package:cached_network_image/cached_network_image.dart';\nimport 'package:flutter/material.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/common/socket_manager.dart';\n\nclass SupportMessageView extends StatefulWidget {\n  final Map uObj;\n  const SupportMessageView({super.key, required this.uObj});\n\n  @override\n  State<SupportMessageView> createState() => _SupportMessageViewState();\n}\n\nclass _SupportMessageViewState extends State<SupportMessageView> {\n  TextEditingController txtMessage = TextEditingController();\n  List listArr = [];\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n    getMessageList();\n\n    // Received Message In Socket On Event\n    SocketManager.shared.socket?.on(\"support_message\", (data) {\n      print(\"support_message socket get :${data.toString()} \");\n      if (data[KKey.status] == \"1\") {\n        var mObj = data[KKey.payload] as List? ?? [];\n        if (mObj[0][\"sender_id\"] == widget.uObj[\"user_id\"]) {\n          listArr.add(mObj[0]);\n          if (mounted) {\n            setState(() {});\n          }\n        }\n      }\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: TColor.lightWhite,\n      appBar: AppBar(\n        elevation: 0.5,\n        backgroundColor: Colors.white,\n        leading: IconButton(\n          onPressed: () {\n            context.pop();\n          },\n          icon: Image.asset(\n            \"assets/img/back.png\",\n            width: 25,\n            height: 25,\n          ),\n        ),\n        title: Row(\n          children: [\n            ClipRRect(\n              borderRadius: BorderRadius.circular(25),\n              child: CachedNetworkImage(\n                imageUrl: widget.uObj[\"image\"] as String? ?? \"\",\n                width: 50,\n                height: 50,\n                fit: BoxFit.contain,\n              ),\n            ),\n            const SizedBox(\n              width: 15,\n            ),\n            Expanded(\n              child: Text(\n                widget.uObj[\"name\"] as String? ?? \"\",\n                style: TextStyle(\n                  color: TColor.primaryText,\n                  fontWeight: FontWeight.w700,\n                ),\n              ),\n            )\n          ],\n        ),\n        actions: [\n          TextButton(\n            onPressed: () {\n              clearMessageAction();\n            },\n            child: Text(\n              \"Clear All\",\n              style: TextStyle(\n                color: TColor.primary,\n                fontSize: 17,\n                fontWeight: FontWeight.w700,\n              ),\n            ),\n          )\n        ],\n      ),\n      body: ListView.builder(\n        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),\n        itemBuilder: (context, index) {\n          var mObj = listArr[index] as Map? ?? {};\n\n          var isSendMessage =\n              ServiceCall.userObj[\"user_id\"] == mObj[\"sender_id\"];\n          return Column(\n            children: [\n              Bubble(\n                margin: const BubbleEdges.only(top: 3),\n                padding: const BubbleEdges.all(0),\n                alignment:\n                    isSendMessage ? Alignment.topRight : Alignment.topLeft,\n                elevation: 0,\n                color: Colors.transparent,\n                child: Text(\n                  (mObj[\"created_date\"] as String? ?? \"\").timeAgo(),\n                  style: TextStyle(\n                    fontWeight: FontWeight.w300,\n                    fontSize: 13,\n                    color: TColor.secondaryText,\n                  ),\n                  textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n                ),\n              ),\n              GestureDetector(\n                onTap: () {},\n                child: Bubble(\n                  margin: const BubbleEdges.only(bottom: 5),\n                  padding:\n                      const BubbleEdges.symmetric(horizontal: 15, vertical: 10),\n                  alignment:\n                      isSendMessage ? Alignment.topRight : Alignment.topLeft,\n                  elevation: 0.5,\n                  radius: const Radius.circular(20.0),\n                  color:\n                      isSendMessage ? TColor.primary : const Color(0xffF6F6F6),\n                  child: Text(\n                    mObj[KKey.message] as String? ?? \"\",\n                    style: TextStyle(\n                      fontSize: 17,\n                      color: isSendMessage\n                          ? TColor.primaryTextW\n                          : TColor.primaryText,\n                      fontWeight: FontWeight.w500,\n                    ),\n                    textAlign: isSendMessage ? TextAlign.right : TextAlign.left,\n                  ),\n                ),\n              )\n            ],\n          );\n        },\n        itemCount: listArr.length,\n      ),\n      bottomNavigationBar: Container(\n        decoration: const BoxDecoration(color: Colors.white, boxShadow: [\n          BoxShadow(\n            blurRadius: 1.5,\n            color: Colors.black26,\n            offset: Offset(0, -1),\n          ),\n        ]),\n        padding: EdgeInsets.only(\n            left: 15,\n            right: 15,\n            bottom: 20 + MediaQuery.of(context).viewInsets.bottom,\n            top: 15),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.start,\n          crossAxisAlignment: CrossAxisAlignment.end,\n          children: [\n            const SizedBox(\n              width: 8,\n            ),\n            Expanded(\n              child: Container(\n                padding:\n                    const EdgeInsets.symmetric(horizontal: 15, vertical: 4),\n                decoration: BoxDecoration(\n                  color: const Color(0xfff0f0f0),\n                  borderRadius: BorderRadius.circular(30),\n                ),\n                child: Row(\n                  children: [\n                    Expanded(\n                      child: ConstrainedBox(\n                        constraints: const BoxConstraints(\n                          maxHeight: 100.0,\n                        ),\n                        child: TextField(\n                          controller: txtMessage,\n                          maxLines: null,\n                          autocorrect: false,\n                          decoration: InputDecoration(\n                            contentPadding: const EdgeInsets.all(12),\n                            enabledBorder: InputBorder.none,\n                            focusedBorder: InputBorder.none,\n                            hintText: \"Type Here\",\n                            hintStyle: TextStyle(\n                              color: TColor.secondaryText,\n                              fontSize: 15,\n                            ),\n                          ),\n                          style: TextStyle(\n                            fontSize: 15,\n                            color: TColor.primaryText,\n                          ),\n                        ),\n                      ),\n                    ),\n                    TextButton(\n                      onPressed: () {\n                        sendMessageAction();\n                      },\n                      child: Icon(\n                        Icons.send,\n                        size: 25,\n                        color: TColor.primary,\n                      ),\n                    )\n                  ],\n                ),\n              ),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n\n  //TODO: Action\n  void sendMessageAction() {\n    if (txtMessage.text.isEmpty) {\n      return;\n    }\n\n    sendMessageApi({\n      \"receiver_id\": widget.uObj[\"user_id\"].toString(),\n      \"message\": txtMessage.text,\n      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n    });\n  }\n\n  void clearMessageAction(){\n    clearMessageApi({\"receiver_id\" : widget.uObj[\"user_id\"].toString() });\n  }\n\n  //TODO: ApiCalling\n\n  void getMessageList() {\n    Globs.showHUD();\n    ServiceCall.post({\n      \"user_id\": widget.uObj[\"user_id\"].toString(),\n      \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n    }, SVKey.svSupportConnect, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      Globs.hideHUD();\n      if (responseObj[KKey.status] == \"1\") {\n        var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n        listArr = payloadObj[\"messages\"] as List? ?? [];\n        if (mounted) {\n          setState(() {});\n        }\n      } else {\n        mdShowAlert(Globs.appName,\n            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n      }\n    }, failure: (error) async {\n      Globs.hideHUD();\n      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n    });\n  }\n\n  void sendMessageApi(Map<String, String> parameter) {\n    ServiceCall.post(parameter, SVKey.svSupportSendMessage, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      if (responseObj[KKey.status] == \"1\") {\n        listArr.add(responseObj[KKey.payload] as Map? ?? {});\n        txtMessage.text = \"\";\n        if (mounted) {\n          setState(() {});\n        }\n      } else {\n        mdShowAlert(Globs.appName,\n            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n      }\n    }, failure: (error) async {\n      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n    });\n  }\n\n  void clearMessageApi(Map<String, String> parameter) {\n    ServiceCall.post(parameter, SVKey.svSupportClear, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      if (responseObj[KKey.status] == \"1\") {\n        listArr = [];\n        if (mounted) {\n          setState(() {});\n        }\n      } else {\n        mdShowAlert(Globs.appName,\n            responseObj[KKey.message] as String? ?? MSG.fail, () {});\n      }\n    }, failure: (error) async {\n      mdShowAlert(Globs.appName, error as String? ?? MSG.fail, () {});\n    });\n  }\n}\n"
        }
    ]
}