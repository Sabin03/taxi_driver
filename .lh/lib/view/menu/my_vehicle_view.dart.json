{
    "sourceFile": "lib/view/menu/my_vehicle_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1720955236479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720960236814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n                     child: MyCarRow(\n                       cObj: cObj,\n                       onPressed: () {\n                         context.push(VehicleDocumentUploadView(\n-                          obj: cObj,\n+                         // obj: cObj,\n                         ));\n                       },\n                     ),\n                   );\n"
                },
                {
                    "date": 1720968124706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n                     child: MyCarRow(\n                       cObj: cObj,\n                       onPressed: () {\n                         context.push(VehicleDocumentUploadView(\n-                         // obj: cObj,\n+                          obj: cObj,\n                         ));\n                       },\n                     ),\n                   );\n"
                },
                {
                    "date": 1720981023997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,200 @@\n+import 'package:flutter/material.dart';\n+import 'package:flutter_slidable/flutter_slidable.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/my_car_row.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/add_vehicle_view.dart';\n+import 'package:taxi_driver/view/login/vehicle_document_view.dart';\n+import 'package:taxi_driver/view/menu/my_car_details_view.dart';\n+\n+class MyVehicleView extends StatefulWidget {\n+  const MyVehicleView({super.key});\n+\n+  @override\n+State<MyVehicleView> createState() => _MyVehicleViewState();\n+}\n+\n+class  _MyVehicleViewState extends State<MyVehicleView>{\n+\n+    List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getCarsListApi();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Vehicle\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: Column(\n+        children: [\n+          Expanded(\n+            child: ListView.separated(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                itemBuilder: (context, index) {\n+                  var cObj = listArr[index] as Map? ?? {};\n+\n+                  return Slidable(\n+                    // Specify a key if the Slidable is dismissible.\n+                    key: ValueKey(\"${cObj[\"user_car_id\"]}\"),\n+\n+                    // The end action pane is the one at the right or the bottom side.\n+                    endActionPane: ActionPane(\n+                      motion: const ScrollMotion(),\n+                      children: [\n+                        SlidableAction(\n+                          onPressed: (context) {\n+                            setCarRunningApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"});\n+                          },\n+                          backgroundColor: Colors.blue,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.directions_car,\n+                          label: 'Set',\n+                        ),\n+                        SlidableAction(\n+                          // An action can be bigger than the others.\n+\n+                          onPressed: (context) {\n+                            carsDeleteApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"},\n+                                index);\n+                          },\n+                          backgroundColor: Colors.red,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.delete,\n+                          label: 'Delete',\n+                        ),\n+                      ],\n+                    ),\n+\n+                    // The child of the Slidable is what the user sees when the\n+                    // component is not dragged.\n+                    child: MyCarRow(\n+                      cObj: cObj,\n+                      onPressed: () {\n+                        context.push(VehicleDocumentUploadView(\n+                          //obj: cObj,\n+                        ));\n+                      },\n+                    ),\n+                  );\n+                },\n+                separatorBuilder: (context, index) => const Divider(\n+                      height: 0.5,\n+                    ),\n+                itemCount: listArr.length),\n+          ),\n+          Padding(\n+            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),\n+            child: RoundButton(\n+                title: \"ADD A VEHICLE\",\n+                onPressed: () async {\n+                  await context.push(const AddVehicleView());\n+                  getCarsListApi();\n+                }),\n+          ),\n+          const SizedBox(\n+            height: 15,\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  //TODO: ServiceCall\n+  void getCarsListApi() {\n+    Globs.showHUD();\n+\n+    ServiceCall.post({}, SVKey.svCarList, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        listArr = [];\n+      }\n+\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void carsDeleteApi(Map<String, dynamic> parameter, int deleteIndex) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svDeleteCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.removeAt(deleteIndex);\n+      } else {\n+        listArr = [];\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void setCarRunningApi(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svSetRunningCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message].toString(), () {});\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1722589333916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+import 'package:flutter/material.dart';\n+import 'package:flutter_slidable/flutter_slidable.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/my_car_row.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/add_vehicle_view.dart';\n+import 'package:taxi_driver/view/login/vehicle_document_view.dart';\n+import 'package:taxi_driver/view/menu/my_car_details_view.dart';\n+\n+class MyVehicleView extends StatefulWidget {\n+  const MyVehicleView({super.key});\n+\n+  @override\n+  State<MyVehicleView> createState() => _MyVehicleViewState();\n+}\n+\n+class _MyVehicleViewState extends State<MyVehicleView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getCarsListApi();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Vehicle\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: Column(\n+        children: [\n+          Expanded(\n+            child: ListView.separated(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                itemBuilder: (context, index) {\n+                  var cObj = listArr[index] as Map? ?? {};\n+\n+                  return Slidable(\n+                    // Specify a key if the Slidable is dismissible.\n+                    key: ValueKey(\"${cObj[\"user_car_id\"]}\"),\n+\n+                    // The end action pane is the one at the right or the bottom side.\n+                    endActionPane: ActionPane(\n+                      motion: const ScrollMotion(),\n+                      children: [\n+                        SlidableAction(\n+                          onPressed: (context) {\n+                            setCarRunningApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"});\n+                          },\n+                          backgroundColor: Colors.blue,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.directions_car,\n+                          label: 'Set',\n+                        ),\n+                        SlidableAction(\n+                          // An action can be bigger than the others.\n+\n+                          onPressed: (context) {\n+                            carsDeleteApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"},\n+                                index);\n+                          },\n+                          backgroundColor: Colors.red,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.delete,\n+                          label: 'Delete',\n+                        ),\n+                      ],\n+                    ),\n+\n+                    // The child of the Slidable is what the user sees when the\n+                    // component is not dragged.\n+                    child: MyCarRow(\n+                      cObj: cObj,\n+                      onPressed: () {\n+                        context.push(VehicleDocumentUploadView(\n+                          obj: cObj,\n+                        ));\n+                      },\n+                    ),\n+                  );\n+                },\n+                separatorBuilder: (context, index) => const Divider(\n+                      height: 0.5,\n+                    ),\n+                itemCount: listArr.length),\n+          ),\n+          Padding(\n+            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),\n+            child: RoundButton(\n+                title: \"ADD A VEHICLE\",\n+                onPressed: () async {\n+                  await context.push(const AddVehicleView());\n+                  getCarsListApi();\n+                }),\n+          ),\n+          const SizedBox(\n+            height: 15,\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  //TODO: ServiceCall\n+  void getCarsListApi() {\n+    Globs.showHUD();\n+\n+    ServiceCall.post({}, SVKey.svCarList, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        listArr = [];\n+      }\n+\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void carsDeleteApi(Map<String, dynamic> parameter, int deleteIndex) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svDeleteCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.removeAt(deleteIndex);\n+      } else {\n+        listArr = [];\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void setCarRunningApi(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svSetRunningCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message].toString(), () {});\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1722590100710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,404 +196,4 @@\n       mdShowAlert(\"Error\", err.toString(), () {});\n     });\n   }\n }\n-import 'package:flutter/material.dart';\n-import 'package:flutter_slidable/flutter_slidable.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/my_car_row.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/add_vehicle_view.dart';\n-import 'package:taxi_driver/view/login/vehicle_document_view.dart';\n-import 'package:taxi_driver/view/menu/my_car_details_view.dart';\n-\n-class MyVehicleView extends StatefulWidget {\n-  const MyVehicleView({super.key});\n-\n-  @override\n-State<MyVehicleView> createState() => _MyVehicleViewState();\n-}\n-\n-class  _MyVehicleViewState extends State<MyVehicleView>{\n-\n-    List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getCarsListApi();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"My Vehicle\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: Column(\n-        children: [\n-          Expanded(\n-            child: ListView.separated(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                itemBuilder: (context, index) {\n-                  var cObj = listArr[index] as Map? ?? {};\n-\n-                  return Slidable(\n-                    // Specify a key if the Slidable is dismissible.\n-                    key: ValueKey(\"${cObj[\"user_car_id\"]}\"),\n-\n-                    // The end action pane is the one at the right or the bottom side.\n-                    endActionPane: ActionPane(\n-                      motion: const ScrollMotion(),\n-                      children: [\n-                        SlidableAction(\n-                          onPressed: (context) {\n-                            setCarRunningApi(\n-                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"});\n-                          },\n-                          backgroundColor: Colors.blue,\n-                          foregroundColor: Colors.white,\n-                          icon: Icons.directions_car,\n-                          label: 'Set',\n-                        ),\n-                        SlidableAction(\n-                          // An action can be bigger than the others.\n-\n-                          onPressed: (context) {\n-                            carsDeleteApi(\n-                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"},\n-                                index);\n-                          },\n-                          backgroundColor: Colors.red,\n-                          foregroundColor: Colors.white,\n-                          icon: Icons.delete,\n-                          label: 'Delete',\n-                        ),\n-                      ],\n-                    ),\n-\n-                    // The child of the Slidable is what the user sees when the\n-                    // component is not dragged.\n-                    child: MyCarRow(\n-                      cObj: cObj,\n-                      onPressed: () {\n-                        context.push(VehicleDocumentUploadView(\n-                          //obj: cObj,\n-                        ));\n-                      },\n-                    ),\n-                  );\n-                },\n-                separatorBuilder: (context, index) => const Divider(\n-                      height: 0.5,\n-                    ),\n-                itemCount: listArr.length),\n-          ),\n-          Padding(\n-            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),\n-            child: RoundButton(\n-                title: \"ADD A VEHICLE\",\n-                onPressed: () async {\n-                  await context.push(const AddVehicleView());\n-                  getCarsListApi();\n-                }),\n-          ),\n-          const SizedBox(\n-            height: 15,\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  //TODO: ServiceCall\n-  void getCarsListApi() {\n-    Globs.showHUD();\n-\n-    ServiceCall.post({}, SVKey.svCarList, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-      } else {\n-        listArr = [];\n-      }\n-\n-      if (mounted) {\n-        setState(() {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err.toString(), () {});\n-    });\n-  }\n-\n-  void carsDeleteApi(Map<String, dynamic> parameter, int deleteIndex) {\n-    Globs.showHUD();\n-\n-    ServiceCall.post(parameter, SVKey.svDeleteCar, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr.removeAt(deleteIndex);\n-      } else {\n-        listArr = [];\n-      }\n-      if (mounted) {\n-        setState(() {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err.toString(), () {});\n-    });\n-  }\n-\n-  void setCarRunningApi(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-\n-    ServiceCall.post(parameter, SVKey.svSetRunningCar, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message].toString(), () {});\n-      }\n-      if (mounted) {\n-        setState(() {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err.toString(), () {});\n-    });\n-  }\n-}\n-import 'package:flutter/material.dart';\n-import 'package:flutter_slidable/flutter_slidable.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/my_car_row.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-import 'package:taxi_driver/view/login/add_vehicle_view.dart';\n-import 'package:taxi_driver/view/login/vehicle_document_view.dart';\n-import 'package:taxi_driver/view/menu/my_car_details_view.dart';\n-\n-class MyVehicleView extends StatefulWidget {\n-  const MyVehicleView({super.key});\n-\n-  @override\n-State<MyVehicleView> createState() => _MyVehicleViewState();\n-}\n-\n-class  _MyVehicleViewState extends State<MyVehicleView>{\n-\n-    List listArr = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-    getCarsListApi();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"My Vehicle\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: Column(\n-        children: [\n-          Expanded(\n-            child: ListView.separated(\n-                padding:\n-                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n-                itemBuilder: (context, index) {\n-                  var cObj = listArr[index] as Map? ?? {};\n-\n-                  return Slidable(\n-                    // Specify a key if the Slidable is dismissible.\n-                    key: ValueKey(\"${cObj[\"user_car_id\"]}\"),\n-\n-                    // The end action pane is the one at the right or the bottom side.\n-                    endActionPane: ActionPane(\n-                      motion: const ScrollMotion(),\n-                      children: [\n-                        SlidableAction(\n-                          onPressed: (context) {\n-                            setCarRunningApi(\n-                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"});\n-                          },\n-                          backgroundColor: Colors.blue,\n-                          foregroundColor: Colors.white,\n-                          icon: Icons.directions_car,\n-                          label: 'Set',\n-                        ),\n-                        SlidableAction(\n-                          // An action can be bigger than the others.\n-\n-                          onPressed: (context) {\n-                            carsDeleteApi(\n-                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"},\n-                                index);\n-                          },\n-                          backgroundColor: Colors.red,\n-                          foregroundColor: Colors.white,\n-                          icon: Icons.delete,\n-                          label: 'Delete',\n-                        ),\n-                      ],\n-                    ),\n-\n-                    // The child of the Slidable is what the user sees when the\n-                    // component is not dragged.\n-                    child: MyCarRow(\n-                      cObj: cObj,\n-                      onPressed: () {\n-                        context.push(VehicleDocumentUploadView(\n-                          obj: cObj,\n-                        ));\n-                      },\n-                    ),\n-                  );\n-                },\n-                separatorBuilder: (context, index) => const Divider(\n-                      height: 0.5,\n-                    ),\n-                itemCount: listArr.length),\n-          ),\n-          Padding(\n-            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),\n-            child: RoundButton(\n-                title: \"ADD A VEHICLE\",\n-                onPressed: () async {\n-                  await context.push(const AddVehicleView());\n-                  getCarsListApi();\n-                }),\n-          ),\n-          const SizedBox(\n-            height: 15,\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-\n-  //TODO: Action\n-\n-  //TODO: ServiceCall\n-  void getCarsListApi() {\n-    Globs.showHUD();\n-\n-    ServiceCall.post({}, SVKey.svCarList, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-      } else {\n-        listArr = [];\n-      }\n-\n-      if (mounted) {\n-        setState(() {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err.toString(), () {});\n-    });\n-  }\n-\n-  void carsDeleteApi(Map<String, dynamic> parameter, int deleteIndex) {\n-    Globs.showHUD();\n-\n-    ServiceCall.post(parameter, SVKey.svDeleteCar, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr.removeAt(deleteIndex);\n-      } else {\n-        listArr = [];\n-      }\n-      if (mounted) {\n-        setState(() {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err.toString(), () {});\n-    });\n-  }\n-\n-  void setCarRunningApi(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-\n-    ServiceCall.post(parameter, SVKey.svSetRunningCar, isTokenApi: true,\n-        withSuccess: (responseObj) async {\n-      Globs.hideHUD();\n-\n-      if (responseObj[KKey.status] == \"1\") {\n-        listArr = responseObj[KKey.payload] as List? ?? [];\n-      } else {\n-        mdShowAlert(\"Error\", responseObj[KKey.message].toString(), () {});\n-      }\n-      if (mounted) {\n-        setState(() {});\n-      }\n-    }, failure: (err) async {\n-      Globs.hideHUD();\n-      mdShowAlert(\"Error\", err.toString(), () {});\n-    });\n-  }\n-}\n"
                },
                {
                    "date": 1722774484276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+import 'package:flutter/material.dart';\n+import 'package:flutter_slidable/flutter_slidable.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/my_car_row.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/add_vehicle_view.dart';\n+import 'package:taxi_driver/view/login/vehicle_document_view.dart';\n+import 'package:taxi_driver/view/menu/my_car_details_view.dart';\n+\n+class MyVehicleView extends StatefulWidget {\n+  const MyVehicleView({super.key});\n+\n+  @override\n+  State<MyVehicleView> createState() => _MyVehicleViewState();\n+}\n+\n+class _MyVehicleViewState extends State<MyVehicleView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getCarsListApi();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Vehicle\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: Column(\n+        children: [\n+          Expanded(\n+            child: ListView.separated(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                itemBuilder: (context, index) {\n+                  var cObj = listArr[index] as Map? ?? {};\n+\n+                  return Slidable(\n+                    // Specify a key if the Slidable is dismissible.\n+                    key: ValueKey(\"${cObj[\"user_car_id\"]}\"),\n+\n+                    // The end action pane is the one at the right or the bottom side.\n+                    endActionPane: ActionPane(\n+                      motion: const ScrollMotion(),\n+                      children: [\n+                        SlidableAction(\n+                          onPressed: (context) {\n+                            setCarRunningApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"});\n+                          },\n+                          backgroundColor: Colors.blue,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.directions_car,\n+                          label: 'Set',\n+                        ),\n+                        SlidableAction(\n+                          // An action can be bigger than the others.\n+\n+                          onPressed: (context) {\n+                            carsDeleteApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"},\n+                                index);\n+                          },\n+                          backgroundColor: Colors.red,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.delete,\n+                          label: 'Delete',\n+                        ),\n+                      ],\n+                    ),\n+\n+                    // The child of the Slidable is what the user sees when the\n+                    // component is not dragged.\n+                    child: MyCarRow(\n+                      cObj: cObj,\n+                      onPressed: () {\n+                        context.push(VehicleDocumentUploadView(\n+                          obj: cObj,\n+                        ));\n+                      },\n+                    ),\n+                  );\n+                },\n+                separatorBuilder: (context, index) => const Divider(\n+                      height: 0.5,\n+                    ),\n+                itemCount: listArr.length),\n+          ),\n+          Padding(\n+            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),\n+            child: RoundButton(\n+                title: \"ADD A VEHICLE\",\n+                onPressed: () async {\n+                  await context.push(const AddVehicleView());\n+                  getCarsListApi();\n+                }),\n+          ),\n+          const SizedBox(\n+            height: 15,\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  //TODO: ServiceCall\n+  void getCarsListApi() {\n+    Globs.showHUD();\n+\n+    ServiceCall.post({}, SVKey.svCarList, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        listArr = [];\n+      }\n+\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void carsDeleteApi(Map<String, dynamic> parameter, int deleteIndex) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svDeleteCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.removeAt(deleteIndex);\n+      } else {\n+        listArr = [];\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void setCarRunningApi(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svSetRunningCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message].toString(), () {});\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1724060851371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n import 'package:taxi_driver/common_widget/my_car_row.dart';\n import 'package:taxi_driver/common_widget/round_button.dart';\n import 'package:taxi_driver/view/login/add_vehicle_view.dart';\n import 'package:taxi_driver/view/login/vehicle_document_view.dart';\n-import 'package:taxi_driver/view/menu/my_car_details_view.dart';\n \n class MyVehicleView extends StatefulWidget {\n   const MyVehicleView({super.key});\n \n@@ -196,9 +195,12 @@\n       mdShowAlert(\"Error\", err.toString(), () {});\n     });\n   }\n }\n-import 'package:flutter/material.dart';\n+\n+\n+\n+/*import 'package:flutter/material.dart';\n import 'package:flutter_slidable/flutter_slidable.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n import 'package:taxi_driver/common/common_extension.dart';\n import 'package:taxi_driver/common/globs.dart';\n@@ -394,5 +396,5 @@\n       Globs.hideHUD();\n       mdShowAlert(\"Error\", err.toString(), () {});\n     });\n   }\n-}\n+}*/\n"
                },
                {
                    "date": 1725473574639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,200 @@\n+import 'package:flutter/material.dart';\n+import 'package:flutter_slidable/flutter_slidable.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/my_car_row.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/add_vehicle_view.dart';\n+import 'package:taxi_driver/view/login/vehicle_document_view.dart';\n+import 'package:taxi_driver/view/menu/my_car_details_view.dart';\n+\n+class MyVehicleView extends StatefulWidget {\n+  const MyVehicleView({super.key});\n+\n+  @override\n+  State<MyVehicleView> createState() => _MyVehicleViewState();\n+}\n+\n+class _MyVehicleViewState extends State<MyVehicleView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getCarsListApi();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Vehicle\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: Column(\n+        children: [\n+          Expanded(\n+            child: ListView.separated(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                itemBuilder: (context, index) {\n+                  var cObj = listArr[index] as Map? ?? {};\n+\n+                  return Slidable(\n+                    // Specify a key if the Slidable is dismissible.\n+                    key: ValueKey(\"${cObj[\"user_car_id\"]}\"),\n+\n+                    // The end action pane is the one at the right or the bottom side.\n+                    endActionPane: ActionPane(\n+                      motion: const ScrollMotion(),\n+                      children: [\n+                        SlidableAction(\n+                          onPressed: (context) {\n+                            setCarRunningApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"});\n+                          },\n+                          backgroundColor: Colors.blue,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.directions_car,\n+                          label: 'Set',\n+                        ),\n+                        SlidableAction(\n+                          // An action can be bigger than the others.\n+\n+                          onPressed: (context) {\n+                            carsDeleteApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"},\n+                                index);\n+                          },\n+                          backgroundColor: Colors.red,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.delete,\n+                          label: 'Delete',\n+                        ),\n+                      ],\n+                    ),\n+\n+                    // The child of the Slidable is what the user sees when the\n+                    // component is not dragged.\n+                    child: MyCarRow(\n+                      cObj: cObj,\n+                      onPressed: () {\n+                        context.push(VehicleDocumentUploadView(\n+                          obj: cObj,\n+                        ));\n+                      },\n+                    ),\n+                  );\n+                },\n+                separatorBuilder: (context, index) => const Divider(\n+                      height: 0.5,\n+                    ),\n+                itemCount: listArr.length),\n+          ),\n+          Padding(\n+            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),\n+            child: RoundButton(\n+                title: \"ADD A VEHICLE\",\n+                onPressed: () async {\n+                  await context.push(const AddVehicleView());\n+                  getCarsListApi();\n+                }),\n+          ),\n+          const SizedBox(\n+            height: 15,\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  //TODO: ServiceCall\n+  void getCarsListApi() {\n+    Globs.showHUD();\n+\n+    ServiceCall.post({}, SVKey.svCarList, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        listArr = [];\n+      }\n+\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void carsDeleteApi(Map<String, dynamic> parameter, int deleteIndex) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svDeleteCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.removeAt(deleteIndex);\n+      } else {\n+        listArr = [];\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void setCarRunningApi(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svSetRunningCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message].toString(), () {});\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+}\n+\n"
                },
                {
                    "date": 1725860018794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+import 'package:flutter/material.dart';\n+import 'package:flutter_slidable/flutter_slidable.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/my_car_row.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/view/login/add_vehicle_view.dart';\n+import 'package:taxi_driver/view/login/vehicle_document_view.dart';\n+import 'package:taxi_driver/view/menu/my_car_details_view.dart';\n+\n+class MyVehicleView extends StatefulWidget {\n+  const MyVehicleView({super.key});\n+\n+  @override\n+  State<MyVehicleView> createState() => _MyVehicleViewState();\n+}\n+\n+class _MyVehicleViewState extends State<MyVehicleView> {\n+  List listArr = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+    getCarsListApi();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"My Vehicle\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: Column(\n+        children: [\n+          Expanded(\n+            child: ListView.separated(\n+                padding:\n+                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n+                itemBuilder: (context, index) {\n+                  var cObj = listArr[index] as Map? ?? {};\n+\n+                  return Slidable(\n+                    // Specify a key if the Slidable is dismissible.\n+                    key: ValueKey(\"${cObj[\"user_car_id\"]}\"),\n+\n+                    // The end action pane is the one at the right or the bottom side.\n+                    endActionPane: ActionPane(\n+                      motion: const ScrollMotion(),\n+                      children: [\n+                        SlidableAction(\n+                          onPressed: (context) {\n+                            setCarRunningApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"});\n+                          },\n+                          backgroundColor: Colors.blue,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.directions_car,\n+                          label: 'Set',\n+                        ),\n+                        SlidableAction(\n+                          // An action can be bigger than the others.\n+\n+                          onPressed: (context) {\n+                            carsDeleteApi(\n+                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"},\n+                                index);\n+                          },\n+                          backgroundColor: Colors.red,\n+                          foregroundColor: Colors.white,\n+                          icon: Icons.delete,\n+                          label: 'Delete',\n+                        ),\n+                      ],\n+                    ),\n+\n+                    // The child of the Slidable is what the user sees when the\n+                    // component is not dragged.\n+                    child: MyCarRow(\n+                      cObj: cObj,\n+                      onPressed: () {\n+                        context.push(VehicleDocumentUploadView(\n+                          obj: cObj,\n+                        ));\n+                      },\n+                    ),\n+                  );\n+                },\n+                separatorBuilder: (context, index) => const Divider(\n+                      height: 0.5,\n+                    ),\n+                itemCount: listArr.length),\n+          ),\n+          Padding(\n+            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),\n+            child: RoundButton(\n+                title: \"ADD A VEHICLE\",\n+                onPressed: () async {\n+                  await context.push(const AddVehicleView());\n+                  getCarsListApi();\n+                }),\n+          ),\n+          const SizedBox(\n+            height: 15,\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  //TODO: Action\n+\n+  //TODO: ServiceCall\n+  void getCarsListApi() {\n+    Globs.showHUD();\n+\n+    ServiceCall.post({}, SVKey.svCarList, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        listArr = [];\n+      }\n+\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void carsDeleteApi(Map<String, dynamic> parameter, int deleteIndex) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svDeleteCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr.removeAt(deleteIndex);\n+      } else {\n+        listArr = [];\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+\n+  void setCarRunningApi(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+\n+    ServiceCall.post(parameter, SVKey.svSetRunningCar, isTokenApi: true,\n+        withSuccess: (responseObj) async {\n+      Globs.hideHUD();\n+\n+      if (responseObj[KKey.status] == \"1\") {\n+        listArr = responseObj[KKey.payload] as List? ?? [];\n+      } else {\n+        mdShowAlert(\"Error\", responseObj[KKey.message].toString(), () {});\n+      }\n+      if (mounted) {\n+        setState(() {});\n+      }\n+    }, failure: (err) async {\n+      Globs.hideHUD();\n+      mdShowAlert(\"Error\", err.toString(), () {});\n+    });\n+  }\n+}\n"
                }
            ],
            "date": 1720955236479,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:flutter_slidable/flutter_slidable.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/common_widget/my_car_row.dart';\nimport 'package:taxi_driver/common_widget/round_button.dart';\nimport 'package:taxi_driver/view/login/add_vehicle_view.dart';\nimport 'package:taxi_driver/view/login/vehicle_document_view.dart';\nimport 'package:taxi_driver/view/menu/my_car_details_view.dart';\n\nclass MyVehicleView extends StatefulWidget {\n  const MyVehicleView({super.key});\n\n  @override\nState<MyVehicleView> createState() => _MyVehicleViewState();\n}\n\nclass  _MyVehicleViewState extends State<MyVehicleView>{\n\n    List listArr = [];\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n    getCarsListApi();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        elevation: 0.5,\n        backgroundColor: Colors.white,\n        leading: IconButton(\n          onPressed: () {\n            context.pop();\n          },\n          icon: Image.asset(\n            \"assets/img/back.png\",\n            width: 25,\n            height: 25,\n          ),\n        ),\n        centerTitle: true,\n        title: Text(\n          \"My Vehicle\",\n          style: TextStyle(\n            color: TColor.primaryText,\n            fontSize: 18,\n            fontWeight: FontWeight.w800,\n          ),\n        ),\n      ),\n      body: Column(\n        children: [\n          Expanded(\n            child: ListView.separated(\n                padding:\n                    const EdgeInsets.symmetric(vertical: 15, horizontal: 20),\n                itemBuilder: (context, index) {\n                  var cObj = listArr[index] as Map? ?? {};\n\n                  return Slidable(\n                    // Specify a key if the Slidable is dismissible.\n                    key: ValueKey(\"${cObj[\"user_car_id\"]}\"),\n\n                    // The end action pane is the one at the right or the bottom side.\n                    endActionPane: ActionPane(\n                      motion: const ScrollMotion(),\n                      children: [\n                        SlidableAction(\n                          onPressed: (context) {\n                            setCarRunningApi(\n                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"});\n                          },\n                          backgroundColor: Colors.blue,\n                          foregroundColor: Colors.white,\n                          icon: Icons.directions_car,\n                          label: 'Set',\n                        ),\n                        SlidableAction(\n                          // An action can be bigger than the others.\n\n                          onPressed: (context) {\n                            carsDeleteApi(\n                                {\"user_car_id\": \"${cObj[\"user_car_id\"]}\"},\n                                index);\n                          },\n                          backgroundColor: Colors.red,\n                          foregroundColor: Colors.white,\n                          icon: Icons.delete,\n                          label: 'Delete',\n                        ),\n                      ],\n                    ),\n\n                    // The child of the Slidable is what the user sees when the\n                    // component is not dragged.\n                    child: MyCarRow(\n                      cObj: cObj,\n                      onPressed: () {\n                        context.push(VehicleDocumentUploadView(\n                          obj: cObj,\n                        ));\n                      },\n                    ),\n                  );\n                },\n                separatorBuilder: (context, index) => const Divider(\n                      height: 0.5,\n                    ),\n                itemCount: listArr.length),\n          ),\n          Padding(\n            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),\n            child: RoundButton(\n                title: \"ADD A VEHICLE\",\n                onPressed: () async {\n                  await context.push(const AddVehicleView());\n                  getCarsListApi();\n                }),\n          ),\n          const SizedBox(\n            height: 15,\n          ),\n        ],\n      ),\n    );\n  }\n\n  //TODO: Action\n\n  //TODO: ServiceCall\n  void getCarsListApi() {\n    Globs.showHUD();\n\n    ServiceCall.post({}, SVKey.svCarList, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      Globs.hideHUD();\n\n      if (responseObj[KKey.status] == \"1\") {\n        listArr = responseObj[KKey.payload] as List? ?? [];\n      } else {\n        listArr = [];\n      }\n\n      if (mounted) {\n        setState(() {});\n      }\n    }, failure: (err) async {\n      Globs.hideHUD();\n      mdShowAlert(\"Error\", err.toString(), () {});\n    });\n  }\n\n  void carsDeleteApi(Map<String, dynamic> parameter, int deleteIndex) {\n    Globs.showHUD();\n\n    ServiceCall.post(parameter, SVKey.svDeleteCar, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      Globs.hideHUD();\n\n      if (responseObj[KKey.status] == \"1\") {\n        listArr.removeAt(deleteIndex);\n      } else {\n        listArr = [];\n      }\n      if (mounted) {\n        setState(() {});\n      }\n    }, failure: (err) async {\n      Globs.hideHUD();\n      mdShowAlert(\"Error\", err.toString(), () {});\n    });\n  }\n\n  void setCarRunningApi(Map<String, dynamic> parameter) {\n    Globs.showHUD();\n\n    ServiceCall.post(parameter, SVKey.svSetRunningCar, isTokenApi: true,\n        withSuccess: (responseObj) async {\n      Globs.hideHUD();\n\n      if (responseObj[KKey.status] == \"1\") {\n        listArr = responseObj[KKey.payload] as List? ?? [];\n      } else {\n        mdShowAlert(\"Error\", responseObj[KKey.message].toString(), () {});\n      }\n      if (mounted) {\n        setState(() {});\n      }\n    }, failure: (err) async {\n      Globs.hideHUD();\n      mdShowAlert(\"Error\", err.toString(), () {});\n    });\n  }\n}\n"
        }
    ]
}