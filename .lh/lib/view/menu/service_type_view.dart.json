{
    "sourceFile": "lib/view/menu/service_type_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1720096639358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722774489459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/switch_row.dart';\n+\n+class ServiceTypeView extends StatefulWidget {\n+  const ServiceTypeView({super.key});\n+\n+\n+  @override\n+  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n+\n+}\n+class _ServiceTypeViewState extends State<ServiceTypeView> {\n+  \n+List listArr = [\n+  \n+  {\"name\":\"Executive\", \"detail\":\"what is executive\", \"valu\": false},\n+  {\"name\":\"Limo\", \"detail\":\"what is limo\", \"valu\": true},\n+  {\"name\":\"Economy\", \"detail\":\"Describe short brief to understand\", \"valu\": false},\n+];\n+  \n+\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+        onPressed: (){\n+          context.pop();\n+        }, \n+        icon: Image.asset(\n+          \"assets/img/back.png\", \n+        width: 25, \n+        height: 25,\n+        ),\n+\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Switch service type\", \n+          style: TextStyle(\n+            color: TColor.primaryText, \n+            fontSize: 18, \n+            fontWeight: \n+            FontWeight.w800,\n+            ),\n+            ),\n+        ),\n+\n+        body: ListView.separated(\n+          padding: const EdgeInsets.all(20),\n+          itemBuilder: (context, index) {\n+          return SwitchRow(\n+            sObj: listArr[index] as Map? ?? {}, \n+            didChange: (isNew) {},\n+\n+          );\n+        }, \n+        separatorBuilder: (context, index) => Divider(\n+          color: TColor.lightGray,\n+          ), \n+          itemCount: listArr.length),\n+  );\n+}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723420258683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/switch_row.dart';\n+\n+class ServiceTypeView extends StatefulWidget {\n+  const ServiceTypeView({super.key});\n+\n+  @override\n+  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n+}\n+\n+class _ServiceTypeViewState extends State<ServiceTypeView> {\n+  List listArr = [\n+    {\"name\": \"Executive\", \"detail\": \"What is executive\", \"value\": false},\n+    {\"name\": \"Limo\", \"detail\": \"What is limo\", \"value\": true},\n+    {\n+      \"name\": \"Economy\",\n+      \"detail\": \"Describe short brief to undestand\",\n+      \"value\": false\n+    },\n+  ];\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Switch service type\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.all(20),\n+          itemBuilder: (context, index) {\n+            return SwitchRow(\n+              sObj: listArr[index] as Map? ?? {},\n+              didChange: (isNew) {},\n+            );\n+          },\n+          separatorBuilder: (context, index) => Divider(\n+                color: TColor.lightGray,\n+              ),\n+          itemCount: listArr.length),\n+    );\n+  }\n+}\n+\n+\n+/*import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/switch_row.dart';\n+\n+class ServiceTypeView extends StatefulWidget {\n+  const ServiceTypeView({super.key});\n+\n+\n+  @override\n+  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n+\n+}\n+class _ServiceTypeViewState extends State<ServiceTypeView> {\n+  \n+List listArr = [\n+  \n+  {\"name\":\"Executive\", \"detail\":\"what is executive\", \"valu\": false},\n+  {\"name\":\"Limo\", \"detail\":\"what is limo\", \"valu\": true},\n+  {\"name\":\"Economy\", \"detail\":\"Describe short brief to understand\", \"valu\": false},\n+];\n+  \n+\n+\n+  @override\n+Widget build(BuildContext context) {\n+\n+  return Scaffold(\n+    appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+        onPressed: (){\n+          context.pop();\n+        }, \n+        icon: Image.asset(\n+          \"assets/img/back.png\", \n+        width: 25, \n+        height: 25,\n+        ),\n+\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Switch service type\", \n+          style: TextStyle(\n+            color: TColor.primaryText, \n+            fontSize: 18, \n+            fontWeight: \n+            FontWeight.w800,\n+            ),\n+            ),\n+        ),\n+\n+        body: ListView.separated(\n+          padding: const EdgeInsets.all(20),\n+          itemBuilder: (context, index) {\n+          return SwitchRow(\n+            sObj: listArr[index] as Map? ?? {}, \n+            didChange: (isNew) {},\n+\n+          );\n+        }, \n+        separatorBuilder: (context, index) => Divider(\n+          color: TColor.lightGray,\n+          ), \n+          itemCount: listArr.length),\n+  );\n+}\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725473636468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/switch_row.dart';\n+\n+class ServiceTypeView extends StatefulWidget {\n+  const ServiceTypeView({super.key});\n+\n+  @override\n+  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n+}\n+\n+class _ServiceTypeViewState extends State<ServiceTypeView> {\n+  List listArr = [\n+    {\"name\": \"Executive\", \"detail\": \"What is executive\", \"value\": false},\n+    {\"name\": \"Limo\", \"detail\": \"What is limo\", \"value\": true},\n+    {\n+      \"name\": \"Economy\",\n+      \"detail\": \"Describe short brief to undestand\",\n+      \"value\": false\n+    },\n+  ];\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Switch service type\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.all(20),\n+          itemBuilder: (context, index) {\n+            return SwitchRow(\n+              sObj: listArr[index] as Map? ?? {},\n+              didChange: (isNew) {},\n+            );\n+          },\n+          separatorBuilder: (context, index) => Divider(\n+                color: TColor.lightGray,\n+              ),\n+          itemCount: listArr.length),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1725860059283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common_widget/switch_row.dart';\n+\n+class ServiceTypeView extends StatefulWidget {\n+  const ServiceTypeView({super.key});\n+\n+  @override\n+  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n+}\n+\n+class _ServiceTypeViewState extends State<ServiceTypeView> {\n+  List listArr = [\n+    {\"name\": \"Executive\", \"detail\": \"What is executive\", \"value\": false},\n+    {\"name\": \"Limo\", \"detail\": \"What is limo\", \"value\": true},\n+    {\n+      \"name\": \"Economy\",\n+      \"detail\": \"Describe short brief to undestand\",\n+      \"value\": false\n+    },\n+  ];\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+        centerTitle: true,\n+        title: Text(\n+          \"Switch service type\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n+          ),\n+        ),\n+      ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.all(20),\n+          itemBuilder: (context, index) {\n+            return SwitchRow(\n+              sObj: listArr[index] as Map? ?? {},\n+              didChange: (isNew) {},\n+            );\n+          },\n+          separatorBuilder: (context, index) => Divider(\n+                color: TColor.lightGray,\n+              ),\n+          itemCount: listArr.length),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1725959262387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,14 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/switch_row.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n \n class ServiceTypeView extends StatefulWidget {\n   const ServiceTypeView({super.key});\n \n@@ -9,87 +16,44 @@\n   State<ServiceTypeView> createState() => _ServiceTypeViewState();\n }\n \n class _ServiceTypeViewState extends State<ServiceTypeView> {\n-  List listArr = [\n-    {\"name\": \"Executive\", \"detail\": \"What is executive\", \"value\": false},\n-    {\"name\": \"Limo\", \"detail\": \"What is limo\", \"value\": true},\n-    {\n-      \"name\": \"Economy\",\n-      \"detail\": \"Describe short brief to undestand\",\n-      \"value\": false\n-    },\n-  ];\n+  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n+  TextEditingController txtName = TextEditingController();\n+  TextEditingController txtEmail = TextEditingController();\n+  TextEditingController txtMobile = TextEditingController();\n+  late CountryCode countryCode;\n \n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Switch service type\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n-      ),\n-      body: ListView.separated(\n-          padding: const EdgeInsets.all(20),\n-          itemBuilder: (context, index) {\n-            return SwitchRow(\n-              sObj: listArr[index] as Map? ?? {},\n-              didChange: (isNew) {},\n-            );\n-          },\n-          separatorBuilder: (context, index) => Divider(\n-                color: TColor.lightGray,\n-              ),\n-          itemCount: listArr.length),\n-    );\n-  }\n-}\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/switch_row.dart';\n+  bool isMale = true;\n \n-class ServiceTypeView extends StatefulWidget {\n-  const ServiceTypeView({super.key});\n+  List zoneList = [];\n+  List serviceList = [];\n \n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n   @override\n-  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n-}\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n \n-class _ServiceTypeViewState extends State<ServiceTypeView> {\n-  List listArr = [\n-    {\"name\": \"Executive\", \"detail\": \"What is executive\", \"value\": false},\n-    {\"name\": \"Limo\", \"detail\": \"What is limo\", \"value\": true},\n-    {\n-      \"name\": \"Economy\",\n-      \"detail\": \"Describe short brief to undestand\",\n-      \"value\": false\n-    },\n-  ];\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n \n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n         leading: IconButton(\n           onPressed: () {\n             context.pop();\n           },\n@@ -98,301 +62,337 @@\n             width: 25,\n             height: 25,\n           ),\n         ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Switch service type\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n       ),\n-      body: ListView.separated(\n-          padding: const EdgeInsets.all(20),\n-          itemBuilder: (context, index) {\n-            return SwitchRow(\n-              sObj: listArr[index] as Map? ?? {},\n-              didChange: (isNew) {},\n-            );\n-          },\n-          separatorBuilder: (context, index) => Divider(\n-                color: TColor.lightGray,\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n               ),\n-          itemCount: listArr.length),\n-    );\n-  }\n-}\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/switch_row.dart';\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage(),\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"9876543210\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n \n-class ServiceTypeView extends StatefulWidget {\n-  const ServiceTypeView({super.key});\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n \n-  @override\n-  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n-}\n-\n-class _ServiceTypeViewState extends State<ServiceTypeView> {\n-  List listArr = [\n-    {\"name\": \"Executive\", \"detail\": \"What is executive\", \"value\": false},\n-    {\"name\": \"Limo\", \"detail\": \"What is limo\", \"value\": true},\n-    {\n-      \"name\": \"Economy\",\n-      \"detail\": \"Describe short brief to undestand\",\n-      \"value\": false\n-    },\n-  ];\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n           ),\n         ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Switch service type\",\n-          style: TextStyle(\n-            color: TColor.primaryText,\n-            fontSize: 18,\n-            fontWeight: FontWeight.w800,\n-          ),\n-        ),\n\\ No newline at end of file\n       ),\n-      body: ListView.separated(\n-          padding: const EdgeInsets.all(20),\n-          itemBuilder: (context, index) {\n-            return SwitchRow(\n-              sObj: listArr[index] as Map? ?? {},\n-              didChange: (isNew) {},\n-            );\n-          },\n-          separatorBuilder: (context, index) => Divider(\n-                color: TColor.lightGray,\n-              ),\n-          itemCount: listArr.length),\n     );\n   }\n-}\n \n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n \n-/*import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/switch_row.dart';\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n \n-class ServiceTypeView extends StatefulWidget {\n-  const ServiceTypeView({super.key});\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n \n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n \n-  @override\n-  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n+    endEditing();\n \n-}\n-class _ServiceTypeViewState extends State<ServiceTypeView> {\n-  \n-List listArr = [\n-  \n-  {\"name\":\"Executive\", \"detail\":\"what is executive\", \"valu\": false},\n-  {\"name\":\"Limo\", \"detail\":\"what is limo\", \"valu\": true},\n-  {\"name\":\"Economy\", \"detail\":\"Describe short brief to understand\", \"valu\": false},\n-];\n-  \n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n \n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n \n-  @override\n-Widget build(BuildContext context) {\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n \n-  return Scaffold(\n-    appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-        onPressed: (){\n-          context.pop();\n-        }, \n-        icon: Image.asset(\n-          \"assets/img/back.png\", \n-        width: 25, \n-        height: 25,\n-        ),\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n \n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Switch service type\", \n-          style: TextStyle(\n-            color: TColor.primaryText, \n-            fontSize: 18, \n-            fontWeight: \n-            FontWeight.w800,\n-            ),\n-            ),\n-        ),\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n \n-        body: ListView.separated(\n-          padding: const EdgeInsets.all(20),\n-          itemBuilder: (context, index) {\n-          return SwitchRow(\n-            sObj: listArr[index] as Map? ?? {}, \n-            didChange: (isNew) {},\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n \n-          );\n-        }, \n-        separatorBuilder: (context, index) => Divider(\n-          color: TColor.lightGray,\n-          ), \n-          itemCount: listArr.length),\n-  );\n-}\n-}*/\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/switch_row.dart';\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n \n-class ServiceTypeView extends StatefulWidget {\n-  const ServiceTypeView({super.key});\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n \n-\n-  @override\n-  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n-\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n }\n-class _ServiceTypeViewState extends State<ServiceTypeView> {\n-  \n-List listArr = [\n-  \n-  {\"name\":\"Executive\", \"detail\":\"what is executive\", \"valu\": false},\n-  {\"name\":\"Limo\", \"detail\":\"what is limo\", \"valu\": true},\n-  {\"name\":\"Economy\", \"detail\":\"Describe short brief to understand\", \"valu\": false},\n-];\n-  \n-\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-        onPressed: (){\n-          context.pop();\n-        }, \n-        icon: Image.asset(\n-          \"assets/img/back.png\", \n-        width: 25, \n-        height: 25,\n-        ),\n-\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Switch service type\", \n-          style: TextStyle(\n-            color: TColor.primaryText, \n-            fontSize: 18, \n-            fontWeight: \n-            FontWeight.w800,\n-            ),\n-            ),\n-        ),\n-\n-        body: ListView.separated(\n-          padding: const EdgeInsets.all(20),\n-          itemBuilder: (context, index) {\n-          return SwitchRow(\n-            sObj: listArr[index] as Map? ?? {}, \n-            didChange: (isNew) {},\n-\n-          );\n-        }, \n-        separatorBuilder: (context, index) => Divider(\n-          color: TColor.lightGray,\n-          ), \n-          itemCount: listArr.length),\n-  );\n-}\n-}\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common_widget/switch_row.dart';\n-\n-class ServiceTypeView extends StatefulWidget {\n-  const ServiceTypeView({super.key});\n-\n-\n-  @override\n-  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n-\n-}\n-class _ServiceTypeViewState extends State<ServiceTypeView> {\n-  \n-List listArr = [\n-  \n-  {\"name\":\"Executive\", \"detail\":\"what is executive\", \"valu\": false},\n-  {\"name\":\"Limo\", \"detail\":\"what is limo\", \"valu\": true},\n-  {\"name\":\"Economy\", \"detail\":\"Describe short brief to understand\", \"valu\": false},\n-];\n-  \n-\n-\n-  @override\n-Widget build(BuildContext context) {\n-\n-  return Scaffold(\n-    appBar: AppBar(\n-        elevation: 0.5,\n-        backgroundColor: Colors.white,\n-        leading: IconButton(\n-        onPressed: (){\n-          context.pop();\n-        }, \n-        icon: Image.asset(\n-          \"assets/img/back.png\", \n-        width: 25, \n-        height: 25,\n-        ),\n-\n-        ),\n-        centerTitle: true,\n-        title: Text(\n-          \"Switch service type\", \n-          style: TextStyle(\n-            color: TColor.primaryText, \n-            fontSize: 18, \n-            fontWeight: \n-            FontWeight.w800,\n-            ),\n-            ),\n-        ),\n-\n-        body: ListView.separated(\n-          padding: const EdgeInsets.all(20),\n-          itemBuilder: (context, index) {\n-          return SwitchRow(\n-            sObj: listArr[index] as Map? ?? {}, \n-            didChange: (isNew) {},\n-\n-          );\n-        }, \n-        separatorBuilder: (context, index) => Divider(\n-          color: TColor.lightGray,\n-          ), \n-          itemCount: listArr.length),\n-  );\n-}\n-}\n"
                },
                {
                    "date": 1725959334506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,394 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class ServiceTypeView extends StatefulWidget {\n+  const ServiceTypeView({super.key});\n+\n+  @override\n+  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n+}\n+\n+class _ServiceTypeViewState extends State<ServiceTypeView> {\n+ \n+\n+\n+\n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n+    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n+    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n+    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n+    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n+        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Edit profile\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              LineTextField(\n+                title: \"Name\",\n+                hintText: \"Ex: Jon Amit\",\n+                controller: txtName,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = true;\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Male\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+                          isMale = false;\n+                        });\n+                      },\n+                      child: Row(\n+                        mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+                          Icon(\n+                            !isMale\n+                                ? Icons.radio_button_checked\n+                                : Icons.radio_button_off,\n+                            color: TColor.primary,\n+                          ),\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                          Expanded(\n+                            child: Text(\n+                              \"Female\",\n+                              style: TextStyle(\n+                                  color: TColor.placeholder, fontSize: 14),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  )\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineTextField(\n+                title: \"Email\",\n+                hintText: \"Ex: 123@mail.com\",\n+                keyboardType: TextInputType.emailAddress,\n+                controller: txtEmail,\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Text(\n+                \"Mobile Number\",\n+                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n+              ),\n+              Row(\n+                mainAxisAlignment: MainAxisAlignment.start,\n+                children: [\n+                  InkWell(\n+                    onTap: () async {\n+                      final code =\n+                          await countryCodePicker.showPicker(context: context);\n+                      if (code != null) {\n+                        countryCode = code;\n+                        setState(() {});\n+                      }\n+                    },\n+                    child: Row(\n+                      mainAxisSize: MainAxisSize.min,\n+                      children: [\n+                        SizedBox(\n+                          width: 30,\n+                          height: 20,\n+                          child: countryCode.flagImage(),\n+                        ),\n+                        Text(\n+                          \"  ${countryCode.dialCode}\",\n+                          style: TextStyle(\n+                              color: TColor.primaryText, fontSize: 16),\n+                        ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(\n+                    width: 15,\n+                  ),\n+                  Expanded(\n+                    child: TextField(\n+                      controller: txtMobile,\n+                      keyboardType: TextInputType.phone,\n+                      decoration: const InputDecoration(\n+                        contentPadding: EdgeInsets.zero,\n+                        focusedBorder: InputBorder.none,\n+                        enabledBorder: InputBorder.none,\n+                        hintText: \"9876543210\",\n+                      ),\n+                    ),\n+                  ),\n+                ],\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+    if (txtName.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter name\", () {});\n+      return;\n+    }\n+\n+    if (!txtEmail.text.isEmail) {\n+      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n+      return;\n+    }\n+\n+    if (txtMobile.text.isEmpty) {\n+      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n+      return;\n+    }\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+      \"name\": txtName.text,\n+      \"email\": txtEmail.text,\n+      \"mobile\": txtMobile.text,\n+      \"gender\": isMale ? \"m\" : \"f\",\n+      \"mobile_code\": countryCode.dialCode,\n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1725960153614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,8 @@\n }\n \n class _ServiceTypeViewState extends State<ServiceTypeView> {\n  \n-\n-\n-\n   List zoneList = [];\n   List serviceList = [];\n \n   Map? selectZone;\n@@ -32,15 +29,10 @@\n   void initState() {\n     // TODO: implement initState\n     super.initState();\n \n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n \n+\n     serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n     \n     getServiceZoneList();\n   }\n@@ -78,9 +70,9 @@\n               ),\n               LineTextField(\n                 title: \"Name\",\n                 hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n+\n               ),\n               const SizedBox(\n                 height: 8,\n               ),\n@@ -89,21 +81,16 @@\n                   Expanded(\n                     child: TextButton(\n                       onPressed: () {\n                         setState(() {\n-                          isMale = true;\n+\n                         });\n                       },\n                       child: Row(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                         mainAxisSize: MainAxisSize.min,\n                         children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n+\n                           const SizedBox(\n                             width: 10,\n                           ),\n                           Expanded(\n@@ -116,437 +103,9 @@\n                         ],\n                       ),\n                     ),\n                   ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage(),\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"9876543210\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n \n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n-\n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class ServiceTypeView extends StatefulWidget {\n-  const ServiceTypeView({super.key});\n-\n-  @override\n-  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n-}\n-\n-class _ServiceTypeViewState extends State<ServiceTypeView> {\n-  FlCountryCodePicker countryCodePicker = const FlCountryCodePicker();\n-  TextEditingController txtName = TextEditingController();\n-  TextEditingController txtEmail = TextEditingController();\n-  TextEditingController txtMobile = TextEditingController();\n-  late CountryCode countryCode;\n-\n-  bool isMale = true;\n-\n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-    txtName.text = \"${ServiceCall.userObj[\"name\"]}\";\n-    txtEmail.text = \"${ServiceCall.userObj[\"email\"]}\";\n-    txtMobile.text = \"${ServiceCall.userObj[\"mobile\"]}\";\n-    isMale = \"${ServiceCall.userObj[\"gender\"]}\" == \"f\";\n-    countryCode = countryCodePicker.countryCodes.firstWhere((element) =>\n-        element.dialCode == \"${ServiceCall.userObj[\"mobile_code\"]}\");\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Edit profile\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n-                controller: txtName,\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = true;\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-                          isMale = false;\n-                        });\n-                      },\n-                      child: Row(\n-                        mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-                          Icon(\n-                            !isMale\n-                                ? Icons.radio_button_checked\n-                                : Icons.radio_button_off,\n-                            color: TColor.primary,\n-                          ),\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Female\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                  )\n                 ],\n               ),\n               const SizedBox(\n                 height: 8,\n@@ -554,66 +113,17 @@\n               const Divider(),\n               const SizedBox(\n                 height: 8,\n               ),\n-              LineTextField(\n-                title: \"Email\",\n-                hintText: \"Ex: 123@mail.com\",\n-                keyboardType: TextInputType.emailAddress,\n-                controller: txtEmail,\n-              ),\n+             \n               const SizedBox(\n                 height: 8,\n               ),\n               Text(\n                 \"Mobile Number\",\n                 style: TextStyle(color: TColor.placeholder, fontSize: 14),\n               ),\n-              Row(\n-                mainAxisAlignment: MainAxisAlignment.start,\n-                children: [\n-                  InkWell(\n-                    onTap: () async {\n-                      final code =\n-                          await countryCodePicker.showPicker(context: context);\n-                      if (code != null) {\n-                        countryCode = code;\n-                        setState(() {});\n-                      }\n-                    },\n-                    child: Row(\n-                      mainAxisSize: MainAxisSize.min,\n-                      children: [\n-                        SizedBox(\n-                          width: 30,\n-                          height: 20,\n-                          child: countryCode.flagImage(),\n-                        ),\n-                        Text(\n-                          \"  ${countryCode.dialCode}\",\n-                          style: TextStyle(\n-                              color: TColor.primaryText, fontSize: 16),\n-                        ),\n-                      ],\n-                    ),\n-                  ),\n-                  const SizedBox(\n-                    width: 15,\n-                  ),\n-                  Expanded(\n-                    child: TextField(\n-                      controller: txtMobile,\n-                      keyboardType: TextInputType.phone,\n-                      decoration: const InputDecoration(\n-                        contentPadding: EdgeInsets.zero,\n-                        focusedBorder: InputBorder.none,\n-                        enabledBorder: InputBorder.none,\n-                        hintText: \"9876543210\",\n-                      ),\n-                    ),\n-                  ),\n-                ],\n-              ),\n+            \n               const Divider(),\n               const SizedBox(\n                 height: 8,\n               ),\n@@ -693,36 +203,18 @@\n   }\n \n   //TODO: Button Action\n   void btnUpdateAction() {\n-    if (txtName.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter name\", () {});\n-      return;\n-    }\n \n-    if (!txtEmail.text.isEmail) {\n-      mdShowAlert(\"Error\", \"Please enter email address\", () {});\n-      return;\n-    }\n-\n-    if (txtMobile.text.isEmpty) {\n-      mdShowAlert(\"Error\", \"Please enter mobile number\", () {});\n-      return;\n-    }\n-\n     if (selectZone == null) {\n       mdShowAlert(\"Error\", \"Please select zone\", () {});\n       return;\n     }\n \n     endEditing();\n \n     serviceUpdateProfile({\n-      \"name\": txtName.text,\n-      \"email\": txtEmail.text,\n-      \"mobile\": txtMobile.text,\n-      \"gender\": isMale ? \"m\" : \"f\",\n-      \"mobile_code\": countryCode.dialCode,\n+     \n       \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n       \"select_service_id\": serviceOnIndex.join(\",\"),\n     });\n   }\n"
                },
                {
                    "date": 1725960207056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n           child: Column(\n             crossAxisAlignment: CrossAxisAlignment.start,\n             children: [\n               Text(\n-                \"Edit profile\",\n+                \"Service type\",\n                 style: TextStyle(\n                     color: TColor.primaryText,\n                     fontSize: 25,\n                     fontWeight: FontWeight.w800),\n"
                },
                {
                    "date": 1725960218240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n           child: Column(\n             crossAxisAlignment: CrossAxisAlignment.start,\n             children: [\n               Text(\n-                \"Service type\",\n+                \"Service Type\",\n                 style: TextStyle(\n                     color: TColor.primaryText,\n                     fontSize: 25,\n                     fontWeight: FontWeight.w800),\n"
                },
                {
                    "date": 1725960231371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n           child: Column(\n             crossAxisAlignment: CrossAxisAlignment.start,\n             children: [\n               Text(\n-                \"Service Type\",\n+                \"Service List\",\n                 style: TextStyle(\n                     color: TColor.primaryText,\n                     fontSize: 25,\n                     fontWeight: FontWeight.w800),\n"
                },
                {
                    "date": 1725960259577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,13 +67,9 @@\n               ),\n               const SizedBox(\n                 height: 30,\n               ),\n-              LineTextField(\n-                title: \"Name\",\n-                hintText: \"Ex: Jon Amit\",\n \n-              ),\n               const SizedBox(\n                 height: 8,\n               ),\n               Row(\n"
                },
                {
                    "date": 1725960280486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,15 +88,9 @@\n \n                           const SizedBox(\n                             width: 10,\n                           ),\n-                          Expanded(\n-                            child: Text(\n-                              \"Male\",\n-                              style: TextStyle(\n-                                  color: TColor.placeholder, fontSize: 14),\n-                            ),\n-                          ),\n+                         \n                         ],\n                       ),\n                     ),\n                   ),\n"
                },
                {
                    "date": 1725960313673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,271 @@\n+import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n+import 'package:flutter/cupertino.dart';\n+import 'package:flutter/material.dart';\n+import 'package:taxi_driver/common/color_extension.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common_widget/drop_down_button.dart';\n+import 'package:taxi_driver/common_widget/line_text_field.dart';\n+import 'package:taxi_driver/common_widget/round_button.dart';\n+\n+class ServiceTypeView extends StatefulWidget {\n+  const ServiceTypeView({super.key});\n+\n+  @override\n+  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n+}\n+\n+class _ServiceTypeViewState extends State<ServiceTypeView> {\n+ \n+  List zoneList = [];\n+  List serviceList = [];\n+\n+  Map? selectZone;\n+\n+  List<int> serviceOnIndex = [];\n+\n+  @override\n+  void initState() {\n+    // TODO: implement initState\n+    super.initState();\n+\n+\n+\n+    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n+    \n+    getServiceZoneList();\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        leading: IconButton(\n+          onPressed: () {\n+            context.pop();\n+          },\n+          icon: Image.asset(\n+            \"assets/img/back.png\",\n+            width: 25,\n+            height: 25,\n+          ),\n+        ),\n+      ),\n+      body: SingleChildScrollView(\n+        child: Padding(\n+          padding: const EdgeInsets.symmetric(horizontal: 20),\n+          child: Column(\n+            crossAxisAlignment: CrossAxisAlignment.start,\n+            children: [\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              Row(\n+                children: [\n+                  Expanded(\n+                    child: TextButton(\n+                      onPressed: () {\n+                        setState(() {\n+\n+                        });\n+                      },\n+                      child: Row(\n+                         mainAxisAlignment: MainAxisAlignment.start,\n+                        mainAxisSize: MainAxisSize.min,\n+                        children: [\n+\n+                          const SizedBox(\n+                            width: 10,\n+                          ),\n+                         \n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+\n+                ],\n+              ),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+             \n+              const SizedBox(\n+                height: 8,\n+              ),\n+              \n+            \n+              const Divider(),\n+              const SizedBox(\n+                height: 8,\n+              ),\n+              LineDropDownButton(\n+                  title: \"Zone\",\n+                  hintText: \"Select Zone\",\n+                  itemsArr: zoneList,\n+                  selectVal: selectZone,\n+                  didChanged: (newObj) {\n+                    setState(() {\n+                      selectZone = newObj;\n+                    });\n+                  },\n+                  displayKey: \"zone_name\"),\n+              const SizedBox(\n+                height: 15,\n+              ),\n+              Text(\n+                \"Service List\",\n+                style: TextStyle(\n+                    color: TColor.primaryText,\n+                    fontSize: 25,\n+                    fontWeight: FontWeight.w800),\n+              ),\n+              ListView.separated(\n+                  padding:\n+                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n+                  physics: const NeverScrollableScrollPhysics(),\n+                  shrinkWrap: true,\n+                  itemBuilder: (context, index) {\n+                    var sObj = serviceList[index] as Map? ?? {};\n+\n+                    return Row(\n+                      children: [\n+                        const SizedBox(\n+                          width: 10,\n+                        ),\n+                        Expanded(\n+                          child: Text(\n+                            sObj[\"service_name\"] as String? ?? \"\",\n+                            style: TextStyle(\n+                              color: TColor.primaryText,\n+                              fontSize: 17,\n+                            ),\n+                          ),\n+                        ),\n+                        CupertinoSwitch(\n+                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n+                            onChanged: (isTrue) {\n+                              if (isTrue) {\n+                                serviceOnIndex.add(sObj[\"service_id\"]);\n+                              } else {\n+                                serviceOnIndex.remove(sObj[\"service_id\"]);\n+                              }\n+\n+                              setState(() {});\n+                            })\n+                      ],\n+                    );\n+                  },\n+                  separatorBuilder: (context, index) => const SizedBox(\n+                        height: 8,\n+                      ),\n+                  itemCount: serviceList.length),\n+              const SizedBox(\n+                height: 30,\n+              ),\n+              RoundButton(\n+                onPressed: btnUpdateAction,\n+                title: \"UPDATE\",\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n+\n+  //TODO: Button Action\n+  void btnUpdateAction() {\n+\n+    if (selectZone == null) {\n+      mdShowAlert(\"Error\", \"Please select zone\", () {});\n+      return;\n+    }\n+\n+    endEditing();\n+\n+    serviceUpdateProfile({\n+     \n+      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n+      \"select_service_id\": serviceOnIndex.join(\",\"),\n+    });\n+  }\n+\n+  //ServiceCall\n+  void getServiceZoneList() {\n+    ServiceCall.post(\n+      {},\n+      SVKey.svServiceAndZoneList,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n+\n+          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n+          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n+\n+          zoneList.forEach((zObj) {\n+            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n+              selectZone = zObj;\n+            }\n+          });\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+\n+  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n+    Globs.showHUD();\n+    ServiceCall.post(\n+      parameter,\n+      SVKey.svProfileUpdate,\n+      isTokenApi: true,\n+      withSuccess: (responseObj) async {\n+        Globs.hideHUD();\n+        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n+          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+          Globs.udBoolSet(true, Globs.userLogin);\n+\n+          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n+\n+          if (mounted) {\n+            setState(() {});\n+          }\n+        } else {\n+          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n+        }\n+      },\n+      failure: (err) async {\n+         Globs.hideHUD();\n+        mdShowAlert(\"Error\", err.toString(), () {});\n+      },\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1725960445749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,278 +268,4 @@\n       },\n     );\n   }\n }\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n-import 'package:flutter/material.dart';\n-import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n-\n-class ServiceTypeView extends StatefulWidget {\n-  const ServiceTypeView({super.key});\n-\n-  @override\n-  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n-}\n-\n-class _ServiceTypeViewState extends State<ServiceTypeView> {\n- \n-  List zoneList = [];\n-  List serviceList = [];\n-\n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n-  @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        leading: IconButton(\n-          onPressed: () {\n-            context.pop();\n-          },\n-          icon: Image.asset(\n-            \"assets/img/back.png\",\n-            width: 25,\n-            height: 25,\n-          ),\n-        ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n-\n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        children: [\n-\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n-                         \n-                        ],\n-                      ),\n-                    ),\n-                  ),\n-\n-                ],\n-              ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-             \n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Text(\n-                \"Mobile Number\",\n-                style: TextStyle(color: TColor.placeholder, fontSize: 14),\n-              ),\n-            \n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n-          ),\n-        ),\n-      ),\n-    );\n-  }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-     \n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1725960470719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,25 +96,9 @@\n                   ),\n \n                 ],\n               ),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n-             \n-              const SizedBox(\n-                height: 8,\n-              ),\n-              \n-            \n-              const Divider(),\n-              const SizedBox(\n-                height: 8,\n-              ),\n+           \n               LineDropDownButton(\n                   title: \"Zone\",\n                   hintText: \"Select Zone\",\n                   itemsArr: zoneList,\n"
                },
                {
                    "date": 1725960496533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,15 +83,11 @@\n                       },\n                       child: Row(\n                          mainAxisAlignment: MainAxisAlignment.start,\n                         mainAxisSize: MainAxisSize.min,\n-                        children: [\n-\n-                          const SizedBox(\n-                            width: 10,\n-                          ),\n+                        \n                          \n-                        ],\n+                        \n                       ),\n                     ),\n                   ),\n \n"
                },
                {
                    "date": 1725960575417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,24 +73,10 @@\n                 height: 8,\n               ),\n               Row(\n                 children: [\n-                  Expanded(\n-                    child: TextButton(\n-                      onPressed: () {\n-                        setState(() {\n \n-                        });\n-                      },\n-                      child: Row(\n-                         mainAxisAlignment: MainAxisAlignment.start,\n-                        mainAxisSize: MainAxisSize.min,\n-                        \n-                         \n-                        \n-                      ),\n-                    ),\n-                  ),\n+                  \n \n                 ],\n               ),\n            \n@@ -163,8 +149,9 @@\n                 title: \"UPDATE\",\n               ),\n             ],\n           ),\n+  \n         ),\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1725960786698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,7 @@\n-import 'package:fl_country_code_picker/fl_country_code_picker.dart';\n-import 'package:flutter/cupertino.dart';\n import 'package:flutter/material.dart';\n import 'package:taxi_driver/common/color_extension.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common_widget/drop_down_button.dart';\n-import 'package:taxi_driver/common_widget/line_text_field.dart';\n-import 'package:taxi_driver/common_widget/round_button.dart';\n+import 'package:taxi_driver/common_widget/switch_row.dart';\n \n class ServiceTypeView extends StatefulWidget {\n   const ServiceTypeView({super.key});\n \n@@ -16,32 +9,24 @@\n   State<ServiceTypeView> createState() => _ServiceTypeViewState();\n }\n \n class _ServiceTypeViewState extends State<ServiceTypeView> {\n- \n-  List zoneList = [];\n-  List serviceList = [];\n+  List listArr = [\n+    {\"name\": \"Executive\", \"detail\": \"What is executive\", \"value\": false},\n+    {\"name\": \"Limo\", \"detail\": \"What is limo\", \"value\": true},\n+    {\n+      \"name\": \"Economy\",\n+      \"detail\": \"Describe short brief to undestand\",\n+      \"value\": false\n+    },\n+  ];\n \n-  Map? selectZone;\n-\n-  List<int> serviceOnIndex = [];\n-\n   @override\n-  void initState() {\n-    // TODO: implement initState\n-    super.initState();\n-\n-\n-\n-    serviceOnIndex = \"${ServiceCall.userObj[\"select_service_id\"]}\".split(\",\").map((id) => int.tryParse(id) ??  0 ).toList();\n-    \n-    getServiceZoneList();\n-  }\n-\n-  @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n+        elevation: 0.5,\n+        backgroundColor: Colors.white,\n         leading: IconButton(\n           onPressed: () {\n             context.pop();\n           },\n@@ -50,189 +35,29 @@\n             width: 25,\n             height: 25,\n           ),\n         ),\n-      ),\n-      body: SingleChildScrollView(\n-        child: Padding(\n-          padding: const EdgeInsets.symmetric(horizontal: 20),\n-          child: Column(\n-            crossAxisAlignment: CrossAxisAlignment.start,\n-            children: [\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-\n-              const SizedBox(\n-                height: 8,\n-              ),\n-              Row(\n-                children: [\n-\n-                  \n-\n-                ],\n-              ),\n-           \n-              LineDropDownButton(\n-                  title: \"Zone\",\n-                  hintText: \"Select Zone\",\n-                  itemsArr: zoneList,\n-                  selectVal: selectZone,\n-                  didChanged: (newObj) {\n-                    setState(() {\n-                      selectZone = newObj;\n-                    });\n-                  },\n-                  displayKey: \"zone_name\"),\n-              const SizedBox(\n-                height: 15,\n-              ),\n-              Text(\n-                \"Service List\",\n-                style: TextStyle(\n-                    color: TColor.primaryText,\n-                    fontSize: 25,\n-                    fontWeight: FontWeight.w800),\n-              ),\n-              ListView.separated(\n-                  padding:\n-                      const EdgeInsets.symmetric(horizontal: 0, vertical: 20),\n-                  physics: const NeverScrollableScrollPhysics(),\n-                  shrinkWrap: true,\n-                  itemBuilder: (context, index) {\n-                    var sObj = serviceList[index] as Map? ?? {};\n-\n-                    return Row(\n-                      children: [\n-                        const SizedBox(\n-                          width: 10,\n-                        ),\n-                        Expanded(\n-                          child: Text(\n-                            sObj[\"service_name\"] as String? ?? \"\",\n-                            style: TextStyle(\n-                              color: TColor.primaryText,\n-                              fontSize: 17,\n-                            ),\n-                          ),\n-                        ),\n-                        CupertinoSwitch(\n-                            value: serviceOnIndex.contains(sObj[\"service_id\"]),\n-                            onChanged: (isTrue) {\n-                              if (isTrue) {\n-                                serviceOnIndex.add(sObj[\"service_id\"]);\n-                              } else {\n-                                serviceOnIndex.remove(sObj[\"service_id\"]);\n-                              }\n-\n-                              setState(() {});\n-                            })\n-                      ],\n-                    );\n-                  },\n-                  separatorBuilder: (context, index) => const SizedBox(\n-                        height: 8,\n-                      ),\n-                  itemCount: serviceList.length),\n-              const SizedBox(\n-                height: 30,\n-              ),\n-              RoundButton(\n-                onPressed: btnUpdateAction,\n-                title: \"UPDATE\",\n-              ),\n-            ],\n+        centerTitle: true,\n+        title: Text(\n+          \"Switch service type\",\n+          style: TextStyle(\n+            color: TColor.primaryText,\n+            fontSize: 18,\n+            fontWeight: FontWeight.w800,\n           ),\n-  \n         ),\n       ),\n+      body: ListView.separated(\n+          padding: const EdgeInsets.all(20),\n+          itemBuilder: (context, index) {\n+            return SwitchRow(\n+              sObj: listArr[index] as Map? ?? {},\n+              didChange: (isNew) {},\n+            );\n+          },\n+          separatorBuilder: (context, index) => Divider(\n+                color: TColor.lightGray,\n+              ),\n+          itemCount: listArr.length),\n     );\n   }\n-\n-  //TODO: Button Action\n-  void btnUpdateAction() {\n-\n-    if (selectZone == null) {\n-      mdShowAlert(\"Error\", \"Please select zone\", () {});\n-      return;\n-    }\n-\n-    endEditing();\n-\n-    serviceUpdateProfile({\n-     \n-      \"zone_id\": \"${ selectZone?[\"zone_id\"] }\",\n-      \"select_service_id\": serviceOnIndex.join(\",\"),\n-    });\n-  }\n-\n-  //ServiceCall\n-  void getServiceZoneList() {\n-    ServiceCall.post(\n-      {},\n-      SVKey.svServiceAndZoneList,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          var payloadObj = responseObj[KKey.payload] as Map? ?? {};\n-\n-          zoneList = payloadObj[\"zone_list\"] as List? ?? [];\n-          serviceList = payloadObj[\"service_list\"] as List? ?? [];\n-\n-          zoneList.forEach((zObj) {\n-            if(zObj[\"zone_id\"] ==  ServiceCall.userObj[\"zone_id\"] ) {\n-              selectZone = zObj;\n-            }\n-          });\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n-\n-  void serviceUpdateProfile(Map<String, dynamic> parameter) {\n-    Globs.showHUD();\n-    ServiceCall.post(\n-      parameter,\n-      SVKey.svProfileUpdate,\n-      isTokenApi: true,\n-      withSuccess: (responseObj) async {\n-        Globs.hideHUD();\n-        if ((responseObj[KKey.status] as String? ?? \"\") == \"1\") {\n-          ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-          ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-          Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-          Globs.udBoolSet(true, Globs.userLogin);\n-\n-          mdShowAlert(\"\", responseObj[KKey.message] ?? MSG.success, () {});\n-\n-          if (mounted) {\n-            setState(() {});\n-          }\n-        } else {\n-          mdShowAlert(\"Error\", responseObj[KKey.message] ?? MSG.fail, () {});\n-        }\n-      },\n-      failure: (err) async {\n-         Globs.hideHUD();\n-        mdShowAlert(\"Error\", err.toString(), () {});\n-      },\n-    );\n-  }\n }\n"
                }
            ],
            "date": 1720096639358,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:taxi_driver/common/color_extension.dart';\nimport 'package:taxi_driver/common_widget/switch_row.dart';\n\nclass ServiceTypeView extends StatefulWidget {\n  const ServiceTypeView({super.key});\n\n\n  @override\n  State<ServiceTypeView> createState() => _ServiceTypeViewState();\n\n}\nclass _ServiceTypeViewState extends State<ServiceTypeView> {\n  \nList listArr = [\n  \n  {\"name\":\"Executive\", \"detail\":\"what is executive\", \"valu\": false},\n  {\"name\":\"Limo\", \"detail\":\"what is limo\", \"valu\": true},\n  {\"name\":\"Economy\", \"detail\":\"Describe short brief to understand\", \"valu\": false},\n];\n  \n\n\n  @override\nWidget build(BuildContext context) {\n\n  return Scaffold(\n    appBar: AppBar(\n        elevation: 0.5,\n        backgroundColor: Colors.white,\n        leading: IconButton(\n        onPressed: (){\n          context.pop();\n        }, \n        icon: Image.asset(\n          \"assets/img/back.png\", \n        width: 25, \n        height: 25,\n        ),\n\n        ),\n        centerTitle: true,\n        title: Text(\n          \"Switch service type\", \n          style: TextStyle(\n            color: TColor.primaryText, \n            fontSize: 18, \n            fontWeight: \n            FontWeight.w800,\n            ),\n            ),\n        ),\n\n        body: ListView.separated(\n          padding: const EdgeInsets.all(20),\n          itemBuilder: (context, index) {\n          return SwitchRow(\n            sObj: listArr[index] as Map? ?? {}, \n            didChange: (isNew) {},\n\n          );\n        }, \n        separatorBuilder: (context, index) => Divider(\n          color: TColor.lightGray,\n          ), \n          itemCount: listArr.length),\n  );\n}\n}"
        }
    ]
}