{
    "sourceFile": "lib/cubit/login_cubit.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1720714376125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722744180807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,11 @@\n import 'package:taxi_driver/common/service_call.dart';\n \n part 'login_state.dart';\n \n+\n+\n+\n class LoginCubit extends Cubit<LoginState> {\n   LoginCubit() : super(LoginInitialState());\n \n   void submitLogin( String mobileCode, String mobile, String userType ) {\n@@ -28,9 +31,9 @@\n             ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n \n \n             Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-           \n+            Globs.udBoolSet(false,\"is_online\");\n             Globs.udBoolSet(true, Globs.userLogin);\n             emit(LoginApiResultState());\n             emit(LoginInitialState());\n         }else{\n@@ -46,4 +49,45 @@\n     }\n   }\n }\n \n+\n+/*class LoginCubit extends Cubit<LoginState> {\n+  LoginCubit() : super(LoginInitialState());\n+\n+  void submitLogin( String mobileCode, String mobile, String userType ) {\n+    try {\n+\n+      emit(LoginHUDState());\n+      ServiceCall.post({\n+        \"user_type\": userType,\n+        \"mobile_code\": mobileCode,\n+        \"mobile\": mobile,\n+        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n+        \"push_token\":\"\",\n+        \"socket_id\":\"\", \n+      }, SVKey.svLogin, withSuccess: (responseObj) async {\n+\n+        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n+            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+\n+            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+           \n+            Globs.udBoolSet(true, Globs.userLogin);\n+            emit(LoginApiResultState());\n+            emit(LoginInitialState());\n+        }else{\n+          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n+        }\n+        \n+      }, failure: (err) async {\n+          emit(LoginErrorState(err));\n+      }, );\n+      \n+    } catch (e) {\n+      emit(LoginErrorState(e.toString()));\n+    }\n+  }\n+}*/\n+\n"
                },
                {
                    "date": 1722774368148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,93 @@\n+import 'dart:io';\n+\n+import 'package:bloc/bloc.dart';\n+import 'package:equatable/equatable.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+part 'login_state.dart';\n+\n+\n+\n+\n+class LoginCubit extends Cubit<LoginState> {\n+  LoginCubit() : super(LoginInitialState());\n+\n+  void submitLogin( String mobileCode, String mobile, String userType ) {\n+    try {\n+\n+      emit(LoginHUDState());\n+      ServiceCall.post({\n+        \"user_type\": userType,\n+        \"mobile_code\": mobileCode,\n+        \"mobile\": mobile,\n+        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n+        \"push_token\":\"\",\n+        \"socket_id\":\"\", \n+      }, SVKey.svLogin, withSuccess: (responseObj) async {\n+\n+        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n+            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+\n+            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+            Globs.udBoolSet(false,\"is_online\");\n+            Globs.udBoolSet(true, Globs.userLogin);\n+            emit(LoginApiResultState());\n+            emit(LoginInitialState());\n+        }else{\n+          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n+        }\n+        \n+      }, failure: (err) async {\n+          emit(LoginErrorState(err));\n+      }, );\n+      \n+    } catch (e) {\n+      emit(LoginErrorState(e.toString()));\n+    }\n+  }\n+}\n+\n+\n+/*class LoginCubit extends Cubit<LoginState> {\n+  LoginCubit() : super(LoginInitialState());\n+\n+  void submitLogin( String mobileCode, String mobile, String userType ) {\n+    try {\n+\n+      emit(LoginHUDState());\n+      ServiceCall.post({\n+        \"user_type\": userType,\n+        \"mobile_code\": mobileCode,\n+        \"mobile\": mobile,\n+        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n+        \"push_token\":\"\",\n+        \"socket_id\":\"\", \n+      }, SVKey.svLogin, withSuccess: (responseObj) async {\n+\n+        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n+            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+\n+            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+           \n+            Globs.udBoolSet(true, Globs.userLogin);\n+            emit(LoginApiResultState());\n+            emit(LoginInitialState());\n+        }else{\n+          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n+        }\n+        \n+      }, failure: (err) async {\n+          emit(LoginErrorState(err));\n+      }, );\n+      \n+    } catch (e) {\n+      emit(LoginErrorState(e.toString()));\n+    }\n+  }\n+}*/\n+\n"
                },
                {
                    "date": 1722855002015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n \n-class LoginCubit extends Cubit<LoginState> {\n+/*class LoginCubit extends Cubit<LoginState> {\n   LoginCubit() : super(LoginInitialState());\n \n   void submitLogin( String mobileCode, String mobile, String userType ) {\n     try {\n@@ -47,63 +47,11 @@\n     } catch (e) {\n       emit(LoginErrorState(e.toString()));\n     }\n   }\n-}\n-\n-\n-/*class LoginCubit extends Cubit<LoginState> {\n-  LoginCubit() : super(LoginInitialState());\n-\n-  void submitLogin( String mobileCode, String mobile, String userType ) {\n-    try {\n-\n-      emit(LoginHUDState());\n-      ServiceCall.post({\n-        \"user_type\": userType,\n-        \"mobile_code\": mobileCode,\n-        \"mobile\": mobile,\n-        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n-        \"push_token\":\"\",\n-        \"socket_id\":\"\", \n-      }, SVKey.svLogin, withSuccess: (responseObj) async {\n-\n-        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n-            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-\n-            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-           \n-            Globs.udBoolSet(true, Globs.userLogin);\n-            emit(LoginApiResultState());\n-            emit(LoginInitialState());\n-        }else{\n-          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n-        }\n-        \n-      }, failure: (err) async {\n-          emit(LoginErrorState(err));\n-      }, );\n-      \n-    } catch (e) {\n-      emit(LoginErrorState(e.toString()));\n-    }\n-  }\n }*/\n \n-import 'dart:io';\n \n-import 'package:bloc/bloc.dart';\n-import 'package:equatable/equatable.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-part 'login_state.dart';\n-\n-\n-\n-\n class LoginCubit extends Cubit<LoginState> {\n   LoginCubit() : super(LoginInitialState());\n \n   void submitLogin( String mobileCode, String mobile, String userType ) {\n@@ -124,9 +72,9 @@\n             ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n \n \n             Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-            Globs.udBoolSet(false,\"is_online\");\n+           \n             Globs.udBoolSet(true, Globs.userLogin);\n             emit(LoginApiResultState());\n             emit(LoginInitialState());\n         }else{\n@@ -142,45 +90,4 @@\n     }\n   }\n }\n \n-\n-/*class LoginCubit extends Cubit<LoginState> {\n-  LoginCubit() : super(LoginInitialState());\n-\n-  void submitLogin( String mobileCode, String mobile, String userType ) {\n-    try {\n-\n-      emit(LoginHUDState());\n-      ServiceCall.post({\n-        \"user_type\": userType,\n-        \"mobile_code\": mobileCode,\n-        \"mobile\": mobile,\n-        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n-        \"push_token\":\"\",\n-        \"socket_id\":\"\", \n-      }, SVKey.svLogin, withSuccess: (responseObj) async {\n-\n-        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n-            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-\n-            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-           \n-            Globs.udBoolSet(true, Globs.userLogin);\n-            emit(LoginApiResultState());\n-            emit(LoginInitialState());\n-        }else{\n-          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n-        }\n-        \n-      }, failure: (err) async {\n-          emit(LoginErrorState(err));\n-      }, );\n-      \n-    } catch (e) {\n-      emit(LoginErrorState(e.toString()));\n-    }\n-  }\n-}*/\n-\n"
                },
                {
                    "date": 1724144689301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n \n-/*class LoginCubit extends Cubit<LoginState> {\n+class LoginCubit extends Cubit<LoginState> {\n   LoginCubit() : super(LoginInitialState());\n \n   void submitLogin( String mobileCode, String mobile, String userType ) {\n     try {\n@@ -47,12 +47,12 @@\n     } catch (e) {\n       emit(LoginErrorState(e.toString()));\n     }\n   }\n-}*/\n+}\n \n \n-class LoginCubit extends Cubit<LoginState> {\n+/*class LoginCubit extends Cubit<LoginState> {\n   LoginCubit() : super(LoginInitialState());\n \n   void submitLogin( String mobileCode, String mobile, String userType ) {\n     try {\n@@ -88,6 +88,6 @@\n     } catch (e) {\n       emit(LoginErrorState(e.toString()));\n     }\n   }\n-}\n+}*/\n \n"
                },
                {
                    "date": 1725468462958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+import 'dart:io';\n+\n+import 'package:bloc/bloc.dart';\n+import 'package:equatable/equatable.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+part 'login_state.dart';\n+\n+class LoginCubit extends Cubit<LoginState> {\n+  LoginCubit() : super(LoginInitialState());\n+\n+  void submitLogin( String mobileCode, String mobile, String userType ) {\n+    try {\n+\n+      emit(LoginHUDState());\n+      ServiceCall.post({\n+        \"user_type\": userType,\n+        \"mobile_code\": mobileCode,\n+        \"mobile\": mobile,\n+        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n+        \"push_token\":\"\",\n+        \"socket_id\":\"\", \n+      }, SVKey.svLogin, withSuccess: (responseObj) async {\n+\n+        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n+            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n+            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n+\n+\n+            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n+            Globs.udBoolSet(false,\"is_online\");\n+            Globs.udBoolSet(true, Globs.userLogin);\n+            emit(LoginApiResultState());\n+            emit(LoginInitialState());\n+        }else{\n+          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n+        }\n+        \n+      }, failure: (err) async {\n+          emit(LoginErrorState(err));\n+      }, );\n+      \n+    } catch (e) {\n+      emit(LoginErrorState(e.toString()));\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1725805476605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,97 +45,4 @@\n       emit(LoginErrorState(e.toString()));\n     }\n   }\n }\n-import 'dart:io';\n-\n-import 'package:bloc/bloc.dart';\n-import 'package:equatable/equatable.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-part 'login_state.dart';\n-\n-\n-\n-\n-class LoginCubit extends Cubit<LoginState> {\n-  LoginCubit() : super(LoginInitialState());\n-\n-  void submitLogin( String mobileCode, String mobile, String userType ) {\n-    try {\n-\n-      emit(LoginHUDState());\n-      ServiceCall.post({\n-        \"user_type\": userType,\n-        \"mobile_code\": mobileCode,\n-        \"mobile\": mobile,\n-        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n-        \"push_token\":\"\",\n-        \"socket_id\":\"\", \n-      }, SVKey.svLogin, withSuccess: (responseObj) async {\n-\n-        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n-            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-\n-            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-            Globs.udBoolSet(false,\"is_online\");\n-            Globs.udBoolSet(true, Globs.userLogin);\n-            emit(LoginApiResultState());\n-            emit(LoginInitialState());\n-        }else{\n-          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n-        }\n-        \n-      }, failure: (err) async {\n-          emit(LoginErrorState(err));\n-      }, );\n-      \n-    } catch (e) {\n-      emit(LoginErrorState(e.toString()));\n-    }\n-  }\n-}\n-\n-\n-/*class LoginCubit extends Cubit<LoginState> {\n-  LoginCubit() : super(LoginInitialState());\n-\n-  void submitLogin( String mobileCode, String mobile, String userType ) {\n-    try {\n-\n-      emit(LoginHUDState());\n-      ServiceCall.post({\n-        \"user_type\": userType,\n-        \"mobile_code\": mobileCode,\n-        \"mobile\": mobile,\n-        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n-        \"push_token\":\"\",\n-        \"socket_id\":\"\", \n-      }, SVKey.svLogin, withSuccess: (responseObj) async {\n-\n-        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n-            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n-            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n-\n-\n-            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n-           \n-            Globs.udBoolSet(true, Globs.userLogin);\n-            emit(LoginApiResultState());\n-            emit(LoginInitialState());\n-        }else{\n-          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n-        }\n-        \n-      }, failure: (err) async {\n-          emit(LoginErrorState(err));\n-      }, );\n-      \n-    } catch (e) {\n-      emit(LoginErrorState(e.toString()));\n-    }\n-  }\n-}*/\n-\n"
                }
            ],
            "date": 1720714376125,
            "name": "Commit-0",
            "content": "import 'dart:io';\n\nimport 'package:bloc/bloc.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\n\npart 'login_state.dart';\n\nclass LoginCubit extends Cubit<LoginState> {\n  LoginCubit() : super(LoginInitialState());\n\n  void submitLogin( String mobileCode, String mobile, String userType ) {\n    try {\n\n      emit(LoginHUDState());\n      ServiceCall.post({\n        \"user_type\": userType,\n        \"mobile_code\": mobileCode,\n        \"mobile\": mobile,\n        \"os_type\": Platform.isIOS ? \"i\" : Platform.isAndroid ? \"a\" : \"w\",\n        \"push_token\":\"\",\n        \"socket_id\":\"\", \n      }, SVKey.svLogin, withSuccess: (responseObj) async {\n\n        if( ( responseObj[KKey.status]  as String? ?? \"\" ) == \"1\" ) {\n            ServiceCall.userObj = responseObj[KKey.payload] as Map? ?? {};\n            ServiceCall.userType = ServiceCall.userObj[\"user_type\"] as int? ?? 1;\n\n\n            Globs.udSet(ServiceCall.userObj, Globs.userPayload);\n           \n            Globs.udBoolSet(true, Globs.userLogin);\n            emit(LoginApiResultState());\n            emit(LoginInitialState());\n        }else{\n          emit(LoginErrorState(responseObj[KKey.message] ?? MSG.fail ),);\n        }\n        \n      }, failure: (err) async {\n          emit(LoginErrorState(err));\n      }, );\n      \n    } catch (e) {\n      emit(LoginErrorState(e.toString()));\n    }\n  }\n}\n\n"
        }
    ]
}