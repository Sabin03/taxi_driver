{
    "sourceFile": "lib/common/socket_manager.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1720957265337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720960247964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import 'dart:convert';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:socket_io_client/socket_io_client.dart' as IO;\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+class SocketManager {\n+  static final SocketManager sigleton = SocketManager._internal();\n+  SocketManager._internal();\n+  IO.Socket? socket;\n+  static SocketManager get shared => sigleton;\n+\n+  void initSocket() {\n+    socket = IO.io(SVKey.mainUrl, {\n+      \"transports\": ['websocket'],\n+      \"autoConnect\": true\n+    });\n+\n+    socket?.on(\"connect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Done\");\n+      }\n+\n+      //Emit Method\n+\n+      if(Globs.udValueBool(Globs.userLogin)) {\n+          updateSocketIdApi();\n+      }\n+    });\n+\n+    socket?.on(\"connect_error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"disconnect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket disconnect\");\n+        print(data);\n+      }\n+    });\n+\n+    // Out Socket Emit Listener\n+\n+    socket?.on(\"UpdateSocket\", (data) {\n+      print(\" UpdateSocket : ---------------- \");\n+      print(data);\n+    });\n+  }\n+\n+  Future updateSocketIdApi() async {\n+    try {\n+      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n+    } catch (e) {\n+        if(kDebugMode) {\n+          print(e.toString());\n+        }\n+    }\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720967635374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,75 +66,5 @@\n           print(e.toString());\n         }\n     }\n   }\n-}\n-import 'dart:convert';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:socket_io_client/socket_io_client.dart' as IO;\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-class SocketManager {\n-  static final SocketManager sigleton = SocketManager._internal();\n-  SocketManager._internal();\n-  IO.Socket? socket;\n-  static SocketManager get shared => sigleton;\n-\n-  void initSocket() {\n-    socket = IO.io(SVKey.mainUrl, {\n-      \"transports\": ['websocket'],\n-      \"autoConnect\": true\n-    });\n-\n-    socket?.on(\"connect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Done\");\n-      }\n-\n-      //Emit Method\n-\n-      if(Globs.udValueBool(Globs.userLogin)) {\n-          updateSocketIdApi();\n-      }\n-    });\n-\n-    socket?.on(\"connect_error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"disconnect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket disconnect\");\n-        print(data);\n-      }\n-    });\n-\n-    // Out Socket Emit Listener\n-\n-    socket?.on(\"UpdateSocket\", (data) {\n-      print(\" UpdateSocket : ---------------- \");\n-      print(data);\n-    });\n-  }\n-\n-  Future updateSocketIdApi() async {\n-    try {\n-      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n-    } catch (e) {\n-        if(kDebugMode) {\n-          print(e.toString());\n-        }\n-    }\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722774265601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import 'dart:convert';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:socket_io_client/socket_io_client.dart' as IO;\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+class SocketManager {\n+  static final SocketManager sigleton = SocketManager._internal();\n+  SocketManager._internal();\n+  IO.Socket? socket;\n+  static SocketManager get shared => sigleton;\n+\n+  void initSocket() {\n+    socket = IO.io(SVKey.mainUrl, {\n+      \"transports\": ['websocket'],\n+      \"autoConnect\": true\n+    });\n+\n+    socket?.on(\"connect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Done\");\n+      }\n+\n+      //Emit Method\n+\n+      if(Globs.udValueBool(Globs.userLogin)) {\n+          updateSocketIdApi();\n+      }\n+    });\n+\n+    socket?.on(\"connect_error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"disconnect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket disconnect\");\n+        print(data);\n+      }\n+    });\n+\n+    // Out Socket Emit Listener\n+\n+    socket?.on(\"UpdateSocket\", (data) {\n+      print(\" UpdateSocket : ---------------- \");\n+      print(data);\n+    });\n+  }\n+\n+  Future updateSocketIdApi() async {\n+    try {\n+      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n+    } catch (e) {\n+        if(kDebugMode) {\n+          print(e.toString());\n+        }\n+    }\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862437098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +0,0 @@\n-import 'dart:convert';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:socket_io_client/socket_io_client.dart' as IO;\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-class SocketManager {\n-  static final SocketManager sigleton = SocketManager._internal();\n-  SocketManager._internal();\n-  IO.Socket? socket;\n-  static SocketManager get shared => sigleton;\n-\n-  void initSocket() {\n-    socket = IO.io(SVKey.mainUrl, {\n-      \"transports\": ['websocket'],\n-      \"autoConnect\": true\n-    });\n-\n-    socket?.on(\"connect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Done\");\n-      }\n-\n-      //Emit Method\n-\n-      if(Globs.udValueBool(Globs.userLogin)) {\n-          updateSocketIdApi();\n-      }\n-    });\n-\n-    socket?.on(\"connect_error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"disconnect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket disconnect\");\n-        print(data);\n-      }\n-    });\n-\n-    // Out Socket Emit Listener\n-\n-    socket?.on(\"UpdateSocket\", (data) {\n-      print(\" UpdateSocket : ---------------- \");\n-      print(data);\n-    });\n-  }\n-\n-  Future updateSocketIdApi() async {\n-    try {\n-      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n-    } catch (e) {\n-        if(kDebugMode) {\n-          print(e.toString());\n-        }\n-    }\n-  }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722862457895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +0,0 @@\n-import 'dart:convert';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:socket_io_client/socket_io_client.dart' as IO;\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-class SocketManager {\n-  static final SocketManager sigleton = SocketManager._internal();\n-  SocketManager._internal();\n-  IO.Socket? socket;\n-  static SocketManager get shared => sigleton;\n-\n-  void initSocket() {\n-    socket = IO.io(SVKey.mainUrl, {\n-      \"transports\": ['websocket'],\n-      \"autoConnect\": true\n-    });\n-\n-    socket?.on(\"connect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Done\");\n-      }\n-\n-      //Emit Method\n-\n-      if(Globs.udValueBool(Globs.userLogin)) {\n-          updateSocketIdApi();\n-      }\n-    });\n-\n-    socket?.on(\"connect_error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"disconnect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket disconnect\");\n-        print(data);\n-      }\n-    });\n-\n-    // Out Socket Emit Listener\n-\n-    socket?.on(\"UpdateSocket\", (data) {\n-      print(\" UpdateSocket : ---------------- \");\n-      print(data);\n-    });\n-  }\n-\n-  Future updateSocketIdApi() async {\n-    try {\n-      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n-    } catch (e) {\n-        if(kDebugMode) {\n-          print(e.toString());\n-        }\n-    }\n-  }\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722863101727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,70 @@\n+import 'dart:convert';\n \n+import 'package:flutter/foundation.dart';\n+import 'package:socket_io_client/socket_io_client.dart' as IO;\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+class SocketManager {\n+  static final SocketManager sigleton = SocketManager._internal();\n+  SocketManager._internal();\n+  IO.Socket? socket;\n+  static SocketManager get shared => sigleton;\n+\n+  void initSocket() {\n+    socket = IO.io(SVKey.mainUrl, {\n+      \"transports\": ['websocket'],\n+      \"autoConnect\": true\n+    });\n+\n+    socket?.on(\"connect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Done\");\n+      }\n+\n+      //Emit Method\n+\n+      if(Globs.udValueBool(Globs.userLogin)) {\n+          updateSocketIdApi();\n+      }\n+    });\n+\n+    socket?.on(\"connect_error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"disconnect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket disconnect\");\n+        print(data);\n+      }\n+    });\n+\n+    // Out Socket Emit Listener\n+\n+    socket?.on(\"UpdateSocket\", (data) {\n+      print(\" UpdateSocket : ---------------- \");\n+      print(data);\n+    });\n+  }\n+\n+  Future updateSocketIdApi() async {\n+    try {\n+      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n+    } catch (e) {\n+        if(kDebugMode) {\n+          print(e.toString());\n+        }\n+    }\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722863302316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import 'dart:convert';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:socket_io_client/socket_io_client.dart' as IO;\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+class SocketManager {\n+  static final SocketManager sigleton = SocketManager._internal();\n+  SocketManager._internal();\n+  IO.Socket? socket;\n+  static SocketManager get shared => sigleton;\n+\n+  void initSocket() {\n+    socket = IO.io(SVKey.mainUrl, {\n+      \"transports\": ['websocket'],\n+      \"autoConnect\": true\n+    });\n+\n+    socket?.on(\"connect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Done\");\n+      }\n+\n+      //Emit Method\n+\n+      if(Globs.udValueBool(Globs.userLogin)) {\n+          updateSocketIdApi();\n+      }\n+    });\n+\n+    socket?.on(\"connect_error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"disconnect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket disconnect\");\n+        print(data);\n+      }\n+    });\n+\n+    // Out Socket Emit Listener\n+\n+    socket?.on(\"UpdateSocket\", (data) {\n+      print(\" UpdateSocket : ---------------- \");\n+      print(data);\n+    });\n+  }\n+\n+  Future updateSocketIdApi() async {\n+    try {\n+      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n+    } catch (e) {\n+        if(kDebugMode) {\n+          print(e.toString());\n+        }\n+    }\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723409261169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import 'dart:convert';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:socket_io_client/socket_io_client.dart' as IO;\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+class SocketManager {\n+  static final SocketManager sigleton = SocketManager._internal();\n+  SocketManager._internal();\n+  IO.Socket? socket;\n+  static SocketManager get shared => sigleton;\n+\n+  void initSocket() {\n+    socket = IO.io(SVKey.mainUrl, {\n+      \"transports\": ['websocket'],\n+      \"autoConnect\": true\n+    });\n+\n+    socket?.on(\"connect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Done\");\n+      }\n+\n+      //Emit Method\n+\n+      if(Globs.udValueBool(Globs.userLogin)) {\n+          updateSocketIdApi();\n+      }\n+    });\n+\n+    socket?.on(\"connect_error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"disconnect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket disconnect\");\n+        print(data);\n+      }\n+    });\n+\n+    // Out Socket Emit Listener\n+\n+    socket?.on(\"UpdateSocket\", (data) {\n+      print(\" UpdateSocket : ---------------- \");\n+      print(data);\n+    });\n+  }\n+\n+  Future updateSocketIdApi() async {\n+    try {\n+      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n+    } catch (e) {\n+        if(kDebugMode) {\n+          print(e.toString());\n+        }\n+    }\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723424647822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n import 'dart:convert';\n \n+\n import 'package:flutter/foundation.dart';\n import 'package:socket_io_client/socket_io_client.dart' as IO;\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n \n+\n class SocketManager {\n   static final SocketManager sigleton = SocketManager._internal();\n   SocketManager._internal();\n   IO.Socket? socket;\n@@ -67,80 +69,13 @@\n         }\n     }\n   }\n }\n-import 'dart:convert';\n \n-import 'package:flutter/foundation.dart';\n-import 'package:socket_io_client/socket_io_client.dart' as IO;\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n \n-class SocketManager {\n-  static final SocketManager sigleton = SocketManager._internal();\n-  SocketManager._internal();\n-  IO.Socket? socket;\n-  static SocketManager get shared => sigleton;\n \n-  void initSocket() {\n-    socket = IO.io(SVKey.mainUrl, {\n-      \"transports\": ['websocket'],\n-      \"autoConnect\": true\n-    });\n+/*import 'dart:convert';\n \n-    socket?.on(\"connect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Done\");\n-      }\n-\n-      //Emit Method\n-\n-      if(Globs.udValueBool(Globs.userLogin)) {\n-          updateSocketIdApi();\n-      }\n-    });\n-\n-    socket?.on(\"connect_error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"disconnect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket disconnect\");\n-        print(data);\n-      }\n-    });\n-\n-    // Out Socket Emit Listener\n-\n-    socket?.on(\"UpdateSocket\", (data) {\n-      print(\" UpdateSocket : ---------------- \");\n-      print(data);\n-    });\n-  }\n-\n-  Future updateSocketIdApi() async {\n-    try {\n-      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n-    } catch (e) {\n-        if(kDebugMode) {\n-          print(e.toString());\n-        }\n-    }\n-  }\n-}\n-import 'dart:convert';\n-\n import 'package:flutter/foundation.dart';\n import 'package:socket_io_client/socket_io_client.dart' as IO;\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/common/service_call.dart';\n@@ -206,5 +141,5 @@\n           print(e.toString());\n         }\n     }\n   }\n-}\n\\ No newline at end of file\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724579856507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,145 @@\n+import 'dart:convert';\n+\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:socket_io_client/socket_io_client.dart' as IO;\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+\n+class SocketManager {\n+  static final SocketManager sigleton = SocketManager._internal();\n+  SocketManager._internal();\n+  IO.Socket? socket;\n+  static SocketManager get shared => sigleton;\n+\n+  void initSocket() {\n+    socket = IO.io(SVKey.mainUrl, {\n+      \"transports\": ['websocket'],\n+      \"autoConnect\": true\n+    });\n+\n+    socket?.on(\"connect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Done\");\n+      }\n+\n+      //Emit Method\n+\n+      if(Globs.udValueBool(Globs.userLogin)) {\n+          updateSocketIdApi();\n+      }\n+    });\n+\n+    socket?.on(\"connect_error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"disconnect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket disconnect\");\n+        print(data);\n+      }\n+    });\n+\n+    // Out Socket Emit Listener\n+\n+    socket?.on(\"UpdateSocket\", (data) {\n+      print(\" UpdateSocket : ---------------- \");\n+      print(data);\n+    });\n+  }\n+\n+  Future updateSocketIdApi() async {\n+    try {\n+      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n+    } catch (e) {\n+        if(kDebugMode) {\n+          print(e.toString());\n+        }\n+    }\n+  }\n+}\n+\n+\n+\n+/*import 'dart:convert';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:socket_io_client/socket_io_client.dart' as IO;\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+class SocketManager {\n+  static final SocketManager sigleton = SocketManager._internal();\n+  SocketManager._internal();\n+  IO.Socket? socket;\n+  static SocketManager get shared => sigleton;\n+\n+  void initSocket() {\n+    socket = IO.io(SVKey.mainUrl, {\n+      \"transports\": ['websocket'],\n+      \"autoConnect\": true\n+    });\n+\n+    socket?.on(\"connect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Done\");\n+      }\n+\n+      //Emit Method\n+\n+      if(Globs.udValueBool(Globs.userLogin)) {\n+          updateSocketIdApi();\n+      }\n+    });\n+\n+    socket?.on(\"connect_error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"disconnect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket disconnect\");\n+        print(data);\n+      }\n+    });\n+\n+    // Out Socket Emit Listener\n+\n+    socket?.on(\"UpdateSocket\", (data) {\n+      print(\" UpdateSocket : ---------------- \");\n+      print(data);\n+    });\n+  }\n+\n+  Future updateSocketIdApi() async {\n+    try {\n+      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n+    } catch (e) {\n+        if(kDebugMode) {\n+          print(e.toString());\n+        }\n+    }\n+  }\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725464864787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,70 @@\n+import 'dart:convert';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:socket_io_client/socket_io_client.dart' as IO;\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+\n+class SocketManager {\n+  static final SocketManager sigleton = SocketManager._internal();\n+  SocketManager._internal();\n+  IO.Socket? socket;\n+  static SocketManager get shared => sigleton;\n+\n+  void initSocket() {\n+    socket = IO.io(SVKey.mainUrl, {\n+      \"transports\": ['websocket'],\n+      \"autoConnect\": true\n+    });\n+\n+    socket?.on(\"connect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Done\");\n+      }\n+\n+      //Emit Method\n+\n+      if(Globs.udValueBool(Globs.userLogin)) {\n+          updateSocketIdApi();\n+      }\n+    });\n+\n+    socket?.on(\"connect_error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Connect Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"error\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket Error\");\n+        print(data);\n+      }\n+    });\n+\n+    socket?.on(\"disconnect\", (data) {\n+      if (kDebugMode) {\n+        print(\"Socket disconnect\");\n+        print(data);\n+      }\n+    });\n+\n+    // Out Socket Emit Listener\n+\n+    socket?.on(\"UpdateSocket\", (data) {\n+      print(\" UpdateSocket : ---------------- \");\n+      print(data);\n+    });\n+  }\n+\n+  Future updateSocketIdApi() async {\n+    try {\n+      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n+    } catch (e) {\n+        if(kDebugMode) {\n+          print(e.toString());\n+        }\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1725804493215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,294 +67,4 @@\n         }\n     }\n   }\n }\n-import 'dart:convert';\n-\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:socket_io_client/socket_io_client.dart' as IO;\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-\n-class SocketManager {\n-  static final SocketManager sigleton = SocketManager._internal();\n-  SocketManager._internal();\n-  IO.Socket? socket;\n-  static SocketManager get shared => sigleton;\n-\n-  void initSocket() {\n-    socket = IO.io(SVKey.mainUrl, {\n-      \"transports\": ['websocket'],\n-      \"autoConnect\": true\n-    });\n-\n-    socket?.on(\"connect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Done\");\n-      }\n-\n-      //Emit Method\n-\n-      if(Globs.udValueBool(Globs.userLogin)) {\n-          updateSocketIdApi();\n-      }\n-    });\n-\n-    socket?.on(\"connect_error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"disconnect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket disconnect\");\n-        print(data);\n-      }\n-    });\n-\n-    // Out Socket Emit Listener\n-\n-    socket?.on(\"UpdateSocket\", (data) {\n-      print(\" UpdateSocket : ---------------- \");\n-      print(data);\n-    });\n-  }\n-\n-  Future updateSocketIdApi() async {\n-    try {\n-      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n-    } catch (e) {\n-        if(kDebugMode) {\n-          print(e.toString());\n-        }\n-    }\n-  }\n-}\n-\n-\n-\n-/*import 'dart:convert';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:socket_io_client/socket_io_client.dart' as IO;\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-class SocketManager {\n-  static final SocketManager sigleton = SocketManager._internal();\n-  SocketManager._internal();\n-  IO.Socket? socket;\n-  static SocketManager get shared => sigleton;\n-\n-  void initSocket() {\n-    socket = IO.io(SVKey.mainUrl, {\n-      \"transports\": ['websocket'],\n-      \"autoConnect\": true\n-    });\n-\n-    socket?.on(\"connect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Done\");\n-      }\n-\n-      //Emit Method\n-\n-      if(Globs.udValueBool(Globs.userLogin)) {\n-          updateSocketIdApi();\n-      }\n-    });\n-\n-    socket?.on(\"connect_error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"disconnect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket disconnect\");\n-        print(data);\n-      }\n-    });\n-\n-    // Out Socket Emit Listener\n-\n-    socket?.on(\"UpdateSocket\", (data) {\n-      print(\" UpdateSocket : ---------------- \");\n-      print(data);\n-    });\n-  }\n-\n-  Future updateSocketIdApi() async {\n-    try {\n-      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n-    } catch (e) {\n-        if(kDebugMode) {\n-          print(e.toString());\n-        }\n-    }\n-  }\n-}*/\n-import 'dart:convert';\n-\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:socket_io_client/socket_io_client.dart' as IO;\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-\n-class SocketManager {\n-  static final SocketManager sigleton = SocketManager._internal();\n-  SocketManager._internal();\n-  IO.Socket? socket;\n-  static SocketManager get shared => sigleton;\n-\n-  void initSocket() {\n-    socket = IO.io(SVKey.mainUrl, {\n-      \"transports\": ['websocket'],\n-      \"autoConnect\": true\n-    });\n-\n-    socket?.on(\"connect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Done\");\n-      }\n-\n-      //Emit Method\n-\n-      if(Globs.udValueBool(Globs.userLogin)) {\n-          updateSocketIdApi();\n-      }\n-    });\n-\n-    socket?.on(\"connect_error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"disconnect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket disconnect\");\n-        print(data);\n-      }\n-    });\n-\n-    // Out Socket Emit Listener\n-\n-    socket?.on(\"UpdateSocket\", (data) {\n-      print(\" UpdateSocket : ---------------- \");\n-      print(data);\n-    });\n-  }\n-\n-  Future updateSocketIdApi() async {\n-    try {\n-      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n-    } catch (e) {\n-        if(kDebugMode) {\n-          print(e.toString());\n-        }\n-    }\n-  }\n-}\n-\n-\n-\n-/*import 'dart:convert';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:socket_io_client/socket_io_client.dart' as IO;\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-\n-class SocketManager {\n-  static final SocketManager sigleton = SocketManager._internal();\n-  SocketManager._internal();\n-  IO.Socket? socket;\n-  static SocketManager get shared => sigleton;\n-\n-  void initSocket() {\n-    socket = IO.io(SVKey.mainUrl, {\n-      \"transports\": ['websocket'],\n-      \"autoConnect\": true\n-    });\n-\n-    socket?.on(\"connect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Done\");\n-      }\n-\n-      //Emit Method\n-\n-      if(Globs.udValueBool(Globs.userLogin)) {\n-          updateSocketIdApi();\n-      }\n-    });\n-\n-    socket?.on(\"connect_error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Connect Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"error\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket Error\");\n-        print(data);\n-      }\n-    });\n-\n-    socket?.on(\"disconnect\", (data) {\n-      if (kDebugMode) {\n-        print(\"Socket disconnect\");\n-        print(data);\n-      }\n-    });\n-\n-    // Out Socket Emit Listener\n-\n-    socket?.on(\"UpdateSocket\", (data) {\n-      print(\" UpdateSocket : ---------------- \");\n-      print(data);\n-    });\n-  }\n-\n-  Future updateSocketIdApi() async {\n-    try {\n-      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n-    } catch (e) {\n-        if(kDebugMode) {\n-          print(e.toString());\n-        }\n-    }\n-  }\n-}*/\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720957265337,
            "name": "Commit-0",
            "content": "import 'dart:convert';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:socket_io_client/socket_io_client.dart' as IO;\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\n\nclass SocketManager {\n  static final SocketManager sigleton = SocketManager._internal();\n  SocketManager._internal();\n  IO.Socket? socket;\n  static SocketManager get shared => sigleton;\n\n  void initSocket() {\n    socket = IO.io(SVKey.mainUrl, {\n      \"transports\": ['websocket'],\n      \"autoConnect\": true\n    });\n\n    socket?.on(\"connect\", (data) {\n      if (kDebugMode) {\n        print(\"Socket Connect Done\");\n      }\n\n      //Emit Method\n\n      if(Globs.udValueBool(Globs.userLogin)) {\n          updateSocketIdApi();\n      }\n    });\n\n    socket?.on(\"connect_error\", (data) {\n      if (kDebugMode) {\n        print(\"Socket Connect Error\");\n        print(data);\n      }\n    });\n\n    socket?.on(\"error\", (data) {\n      if (kDebugMode) {\n        print(\"Socket Error\");\n        print(data);\n      }\n    });\n\n    socket?.on(\"disconnect\", (data) {\n      if (kDebugMode) {\n        print(\"Socket disconnect\");\n        print(data);\n      }\n    });\n\n    // Out Socket Emit Listener\n\n    socket?.on(\"UpdateSocket\", (data) {\n      print(\" UpdateSocket : ---------------- \");\n      print(data);\n    });\n  }\n\n  Future updateSocketIdApi() async {\n    try {\n      socket?.emit(\"UpdateSocket\", jsonEncode( {'access_token' : ServiceCall.userObj[\"auth_token\"].toString()} ));\n    } catch (e) {\n        if(kDebugMode) {\n          print(e.toString());\n        }\n    }\n  }\n}"
        }
    ]
}