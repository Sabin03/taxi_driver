{
    "sourceFile": "lib/common/color_extension.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1719736932200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719736940886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'package:flutter/material.dart';\n \n class TColor {\n-  static  Color get primary => const Color(0xff00A676);\n+  static  Color get primary => const Color(0xff3DB24B);\n   static  Color get secondary => const Color(0xff3369FF);\n \n   static  Color get primaryText => const Color(0xff282F39);\n   static  Color get primaryTextW => const Color(0xffFFFFFF);\n"
                },
                {
                    "date": 1720347569571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+import 'package:flutter/material.dart';\n+\n+class TColor {\n+ \n+\n+  static  Color get primary => const Color(0xff3DB24B);\n+  static  Color get secondary => const Color(0xff3369FF);\n+\n+  static  Color get primaryText => const Color(0xff282F39);\n+  static  Color get primaryTextW => const Color(0xffFFFFFF);\n+  static  Color get secondaryText => const Color(0xff7F7F7F);\n+  static  Color get placeholder => const Color(0xffBBBBBB);\n+  static  Color get lightGray => const Color(0xffDADEE3);\n+  static Color get lightWhite => const Color(0xffF2F5F7);\n+\n+  static Color get red => const Color(0xffF4586C);\n+\n+\n+  static Color get bg => Colors.white;\n+}\n+\n+extension HexColor on Color {\n+  static Color fromHex(String hexString) {\n+    final buffer = StringBuffer();\n+    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n+    buffer.write(hexString.replaceFirst('#', ''));\n+    return Color(int.parse(buffer.toString(), radix: 16));\n+  }\n+\n+  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n+  '${alpha.toRadixString(16).padLeft(2, '0')}'\n+  '${red.toRadixString(16).padLeft(2, '0')}'\n+  '${green.toRadixString(16).padLeft(2, '0')}'\n+  '${blue.toRadixString(16).padLeft(2, '0')}';\n+}\n+\n+extension AppContext on BuildContext {\n+  Size get size => MediaQuery.sizeOf(this);\n+  double get width => size.width;\n+  double get height => size.height;\n+  \n+  Future push ( Widget widget) async {\n+    return Navigator.push(\n+      this, \n+      MaterialPageRoute(builder: (context) => widget, ),);\n+  }\n+\n+  void pop() async {\n+    return Navigator.pop(this);\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722710516976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,48 +47,5 @@\n \n   void pop() async {\n     return Navigator.pop(this);\n   }\n-}\n-import 'package:flutter/material.dart';\n-\n-class TColor {\n-  static  Color get primary => const Color(0xff3DB24B);\n-  static  Color get secondary => const Color(0xff3369FF);\n-\n-  static  Color get primaryText => const Color(0xff282F39);\n-  static  Color get primaryTextW => const Color(0xffFFFFFF);\n-  static  Color get secondaryText => const Color(0xff7F7F7F);\n-  static  Color get placeholder => const Color(0xffBBBBBB);\n-  static  Color get lightGray => const Color(0xffDADEE3);\n-\n-  static Color get bg => Colors.white;\n-}\n-\n-extension HexColor on Color {\n-  static Color fromHex(String hexString) {\n-    final buffer = StringBuffer();\n-    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n-    buffer.write(hexString.replaceFirst('#', ''));\n-    return Color(int.parse(buffer.toString(), radix: 16));\n-  }\n-\n-  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n-  '${alpha.toRadixString(16).padLeft(2, '0')}'\n-  '${red.toRadixString(16).padLeft(2, '0')}'\n-  '${green.toRadixString(16).padLeft(2, '0')}'\n-  '${blue.toRadixString(16).padLeft(2, '0')}';\n-}\n-\n-extension AppContext on BuildContext {\n-  Size get size => MediaQuery.sizeOf(this);\n-  double get width => size.width;\n-  double get height => size.height;\n-  \n-  Future push ( Widget widget) async {\n-    return Navigator.push(this, MaterialPageRoute(builder: (context) => widget, ),);\n-  }\n-\n-  void pop() async {\n-    return Navigator.pop(this);\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722853239593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,106 @@\n+import 'package:flutter/material.dart';\n+\n+\n+\n+class TColor {\n+  static Color get primary => const Color(0xff3DB24B);\n+  static Color get secondary => const Color(0xff3369FF);\n+\n+  static Color get primaryText => const Color(0xff282F39);\n+  static Color get primaryTextW => const Color(0xffFFFFFF);\n+  static Color get secondaryText => const Color(0xff7F7F7F);\n+  static Color get placeholder => const Color(0xffBBBBBB);\n+  static Color get lightGray => const Color(0xffDADEE3);\n+  static Color get lightWhite => const Color(0xffF2F5F7);\n+\n+  static Color get red => const Color(0xffF4586C);\n+\n+  static Color get bg => Colors.white;\n+}\n+\n+extension HexColor on Color {\n+  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n+  static Color fromHex(String hexString) {\n+    final buffer = StringBuffer();\n+    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n+    buffer.write(hexString.replaceFirst('#', ''));\n+    return Color(int.parse(buffer.toString(), radix: 16));\n+  }\n+\n+  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n+  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n+      '${alpha.toRadixString(16).padLeft(2, '0')}'\n+      '${red.toRadixString(16).padLeft(2, '0')}'\n+      '${green.toRadixString(16).padLeft(2, '0')}'\n+      '${blue.toRadixString(16).padLeft(2, '0')}';\n+}\n+\n+extension AppContext on BuildContext {\n+  Size get size => MediaQuery.sizeOf(this);\n+  double get width => size.width;\n+  double get height => size.height;\n+\n+  Future push(Widget widget) async {\n+    return Navigator.push(\n+      this,\n+      MaterialPageRoute(\n+        builder: (context) => widget,\n+      ),\n+    );\n+  }\n+\n+  void pop() async {\n+    return Navigator.pop(this);\n+  }\n+}\n+\n+\n+/*class TColor {\n+ \n+\n+  static  Color get primary => const Color(0xff3DB24B);\n+  static  Color get secondary => const Color(0xff3369FF);\n+\n+  static  Color get primaryText => const Color(0xff282F39);\n+  static  Color get primaryTextW => const Color(0xffFFFFFF);\n+  static  Color get secondaryText => const Color(0xff7F7F7F);\n+  static  Color get placeholder => const Color(0xffBBBBBB);\n+  static  Color get lightGray => const Color(0xffDADEE3);\n+  static Color get lightWhite => const Color(0xffF2F5F7);\n+\n+  static Color get red => const Color(0xffF4586C);\n+\n+\n+  static Color get bg => Colors.white;\n+}\n+\n+extension HexColor on Color {\n+  static Color fromHex(String hexString) {\n+    final buffer = StringBuffer();\n+    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n+    buffer.write(hexString.replaceFirst('#', ''));\n+    return Color(int.parse(buffer.toString(), radix: 16));\n+  }\n+\n+  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n+  '${alpha.toRadixString(16).padLeft(2, '0')}'\n+  '${red.toRadixString(16).padLeft(2, '0')}'\n+  '${green.toRadixString(16).padLeft(2, '0')}'\n+  '${blue.toRadixString(16).padLeft(2, '0')}';\n+}\n+\n+extension AppContext on BuildContext {\n+  Size get size => MediaQuery.sizeOf(this);\n+  double get width => size.width;\n+  double get height => size.height;\n+  \n+  Future push ( Widget widget) async {\n+    return Navigator.push(\n+      this, \n+      MaterialPageRoute(builder: (context) => widget, ),);\n+  }\n+\n+  void pop() async {\n+    return Navigator.pop(this);\n+  }\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723551401475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n \n \n class TColor {\n-  static Color get primary => const Color(0xff3DB24B);\n-  static Color get secondary => const Color(0xff3369FF);\n+  static Color get primary => Color.fromARGB(255, 17, 17, 17);\n+  static Color get secondary => Color.fromARGB(255, 6, 173, 48);\n \n   static Color get primaryText => const Color(0xff282F39);\n   static Color get primaryTextW => const Color(0xffFFFFFF);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n@@ -102,56 +102,5 @@\n \n   void pop() async {\n     return Navigator.pop(this);\n   }\n-}*/\n-import 'package:flutter/material.dart';\n-\n-class TColor {\n- \n-\n-  static  Color get primary => const Color(0xff3DB24B);\n-  static  Color get secondary => const Color(0xff3369FF);\n-\n-  static  Color get primaryText => const Color(0xff282F39);\n-  static  Color get primaryTextW => const Color(0xffFFFFFF);\n-  static  Color get secondaryText => const Color(0xff7F7F7F);\n-  static  Color get placeholder => const Color(0xffBBBBBB);\n-  static  Color get lightGray => const Color(0xffDADEE3);\n-  static Color get lightWhite => const Color(0xffF2F5F7);\n-\n-  static Color get red => const Color(0xffF4586C);\n-\n-\n-  static Color get bg => Colors.white;\n-}\n-\n-extension HexColor on Color {\n-  static Color fromHex(String hexString) {\n-    final buffer = StringBuffer();\n-    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n-    buffer.write(hexString.replaceFirst('#', ''));\n-    return Color(int.parse(buffer.toString(), radix: 16));\n-  }\n-\n-  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n-  '${alpha.toRadixString(16).padLeft(2, '0')}'\n-  '${red.toRadixString(16).padLeft(2, '0')}'\n-  '${green.toRadixString(16).padLeft(2, '0')}'\n-  '${blue.toRadixString(16).padLeft(2, '0')}';\n-}\n-\n-extension AppContext on BuildContext {\n-  Size get size => MediaQuery.sizeOf(this);\n-  double get width => size.width;\n-  double get height => size.height;\n-  \n-  Future push ( Widget widget) async {\n-    return Navigator.push(\n-      this, \n-      MaterialPageRoute(builder: (context) => widget, ),);\n-  }\n-\n-  void pop() async {\n-    return Navigator.pop(this);\n-  }\n-}\n\\ No newline at end of file\n+}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723551435452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n \n \n \n class TColor {\n-  static Color get primary => Color.fromARGB(255, 17, 17, 17);\n-  static Color get secondary => Color.fromARGB(255, 6, 173, 48);\n+  static Color get primary => const Color(0xff3DB24B);\n+  static Color get secondary => Color.fromARGB(255, 7, 51, 171);\n \n   static Color get primaryText => const Color(0xff282F39);\n   static Color get primaryTextW => const Color(0xffFFFFFF);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n"
                },
                {
                    "date": 1723551471439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n \n class TColor {\n   static Color get primary => const Color(0xff3DB24B);\n-  static Color get secondary => Color.fromARGB(255, 7, 51, 171);\n+  static Color get secondary => const Color(0xff3369FF);\n \n   static Color get primaryText => const Color(0xff282F39);\n   static Color get primaryTextW => const Color(0xffFFFFFF);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n"
                },
                {
                    "date": 1723551480599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class TColor {\n   static Color get primary => const Color(0xff3DB24B);\n   static Color get secondary => const Color(0xff3369FF);\n \n-  static Color get primaryText => const Color(0xff282F39);\n+  static Color get primaryText => Color.fromARGB(255, 4, 99, 233);\n   static Color get primaryTextW => const Color(0xffFFFFFF);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n   static Color get placeholder => const Color(0xffBBBBBB);\n   static Color get lightGray => const Color(0xffDADEE3);\n"
                },
                {
                    "date": 1723551488854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class TColor {\n   static Color get primary => const Color(0xff3DB24B);\n   static Color get secondary => const Color(0xff3369FF);\n \n-  static Color get primaryText => Color.fromARGB(255, 4, 99, 233);\n+  static Color get primaryText => const Color(0xff282F39);\n   static Color get primaryTextW => const Color(0xffFFFFFF);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n   static Color get placeholder => const Color(0xffBBBBBB);\n   static Color get lightGray => const Color(0xffDADEE3);\n"
                },
                {
                    "date": 1723551495920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   static Color get primary => const Color(0xff3DB24B);\n   static Color get secondary => const Color(0xff3369FF);\n \n   static Color get primaryText => const Color(0xff282F39);\n-  static Color get primaryTextW => const Color(0xffFFFFFF);\n+  static Color get primaryTextW => Color.fromARGB(255, 230, 12, 12);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n   static Color get placeholder => const Color(0xffBBBBBB);\n   static Color get lightGray => const Color(0xffDADEE3);\n   static Color get lightWhite => const Color(0xffF2F5F7);\n"
                },
                {
                    "date": 1723551534423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   static Color get primary => const Color(0xff3DB24B);\n   static Color get secondary => const Color(0xff3369FF);\n \n   static Color get primaryText => const Color(0xff282F39);\n-  static Color get primaryTextW => Color.fromARGB(255, 230, 12, 12);\n+  static Color get primaryTextW => const Color(0xffFFFFFF);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n   static Color get placeholder => const Color(0xffBBBBBB);\n   static Color get lightGray => const Color(0xffDADEE3);\n   static Color get lightWhite => const Color(0xffF2F5F7);\n"
                },
                {
                    "date": 1725462230916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,53 +54,4 @@\n   }\n }\n \n \n-/*class TColor {\n- \n-\n-  static  Color get primary => const Color(0xff3DB24B);\n-  static  Color get secondary => const Color(0xff3369FF);\n-\n-  static  Color get primaryText => const Color(0xff282F39);\n-  static  Color get primaryTextW => const Color(0xffFFFFFF);\n-  static  Color get secondaryText => const Color(0xff7F7F7F);\n-  static  Color get placeholder => const Color(0xffBBBBBB);\n-  static  Color get lightGray => const Color(0xffDADEE3);\n-  static Color get lightWhite => const Color(0xffF2F5F7);\n-\n-  static Color get red => const Color(0xffF4586C);\n-\n-\n-  static Color get bg => Colors.white;\n-}\n-\n-extension HexColor on Color {\n-  static Color fromHex(String hexString) {\n-    final buffer = StringBuffer();\n-    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n-    buffer.write(hexString.replaceFirst('#', ''));\n-    return Color(int.parse(buffer.toString(), radix: 16));\n-  }\n-\n-  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n-  '${alpha.toRadixString(16).padLeft(2, '0')}'\n-  '${red.toRadixString(16).padLeft(2, '0')}'\n-  '${green.toRadixString(16).padLeft(2, '0')}'\n-  '${blue.toRadixString(16).padLeft(2, '0')}';\n-}\n-\n-extension AppContext on BuildContext {\n-  Size get size => MediaQuery.sizeOf(this);\n-  double get width => size.width;\n-  double get height => size.height;\n-  \n-  Future push ( Widget widget) async {\n-    return Navigator.push(\n-      this, \n-      MaterialPageRoute(builder: (context) => widget, ),);\n-  }\n-\n-  void pop() async {\n-    return Navigator.pop(this);\n-  }\n-}*/\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725804050015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import 'package:flutter/material.dart';\n+\n+class TColor {\n+  static Color get primary => const Color(0xff3DB24B);\n+  static Color get secondary => const Color(0xff3369FF);\n+\n+  static Color get primaryText => const Color(0xff282F39);\n+  static Color get primaryTextW => const Color(0xffFFFFFF);\n+  static Color get secondaryText => const Color(0xff7F7F7F);\n+  static Color get placeholder => const Color(0xffBBBBBB);\n+  static Color get lightGray => const Color(0xffDADEE3);\n+  static Color get lightWhite => const Color(0xffF2F5F7);\n+\n+  static Color get red => const Color(0xffF4586C);\n+\n+  static Color get bg => Colors.white;\n+}\n+\n+extension HexColor on Color {\n+  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n+  static Color fromHex(String hexString) {\n+    final buffer = StringBuffer();\n+    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n+    buffer.write(hexString.replaceFirst('#', ''));\n+    return Color(int.parse(buffer.toString(), radix: 16));\n+  }\n+\n+  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n+  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n+      '${alpha.toRadixString(16).padLeft(2, '0')}'\n+      '${red.toRadixString(16).padLeft(2, '0')}'\n+      '${green.toRadixString(16).padLeft(2, '0')}'\n+      '${blue.toRadixString(16).padLeft(2, '0')}';\n+}\n+\n+extension AppContext on BuildContext {\n+  Size get size => MediaQuery.sizeOf(this);\n+  double get width => size.width;\n+  double get height => size.height;\n+\n+  Future push(Widget widget) async {\n+    return Navigator.push(\n+      this,\n+      MaterialPageRoute(\n+        builder: (context) => widget,\n+      ),\n+    );\n+  }\n+\n+  void pop() async {\n+    return Navigator.pop(this);\n+  }\n+}\n"
                },
                {
                    "date": 1725958843609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n   static Color get primaryText => const Color(0xff282F39);\n   static Color get primaryTextW => const Color(0xffFFFFFF);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n   static Color get placeholder => const Color(0xffBBBBBB);\n-  static Color get lightGray => const Color(0xffDADEE3);\n+  static Color get lightGray => const Color.fromARGB(255, 2, 15, 32);\n   static Color get lightWhite => const Color(0xffF2F5F7);\n \n   static Color get red => const Color(0xffF4586C);\n \n@@ -50,61 +50,4 @@\n   void pop() async {\n     return Navigator.pop(this);\n   }\n }\n-import 'package:flutter/material.dart';\n-\n-\n-\n-class TColor {\n-  static Color get primary => const Color(0xff3DB24B);\n-  static Color get secondary => const Color(0xff3369FF);\n-\n-  static Color get primaryText => const Color(0xff282F39);\n-  static Color get primaryTextW => const Color(0xffFFFFFF);\n-  static Color get secondaryText => const Color(0xff7F7F7F);\n-  static Color get placeholder => const Color(0xffBBBBBB);\n-  static Color get lightGray => const Color(0xffDADEE3);\n-  static Color get lightWhite => const Color(0xffF2F5F7);\n-\n-  static Color get red => const Color(0xffF4586C);\n-\n-  static Color get bg => Colors.white;\n-}\n-\n-extension HexColor on Color {\n-  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n-  static Color fromHex(String hexString) {\n-    final buffer = StringBuffer();\n-    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n-    buffer.write(hexString.replaceFirst('#', ''));\n-    return Color(int.parse(buffer.toString(), radix: 16));\n-  }\n-\n-  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n-  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n-      '${alpha.toRadixString(16).padLeft(2, '0')}'\n-      '${red.toRadixString(16).padLeft(2, '0')}'\n-      '${green.toRadixString(16).padLeft(2, '0')}'\n-      '${blue.toRadixString(16).padLeft(2, '0')}';\n-}\n-\n-extension AppContext on BuildContext {\n-  Size get size => MediaQuery.sizeOf(this);\n-  double get width => size.width;\n-  double get height => size.height;\n-\n-  Future push(Widget widget) async {\n-    return Navigator.push(\n-      this,\n-      MaterialPageRoute(\n-        builder: (context) => widget,\n-      ),\n-    );\n-  }\n-\n-  void pop() async {\n-    return Navigator.pop(this);\n-  }\n-}\n-\n-\n"
                },
                {
                    "date": 1725958884449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import 'package:flutter/material.dart';\n+\n+class TColor {\n+  static Color get primary => const Color(0xff3DB24B);\n+  static Color get secondary => const Color(0xff3369FF);\n+\n+  static Color get primaryText => const Color(0xff282F39);\n+  static Color get primaryTextW => const Color(0xffFFFFFF);\n+  static Color get secondaryText => const Color(0xff7F7F7F);\n+  static Color get placeholder => const Color(0xffBBBBBB);\n+  static Color get lightGray => const Color(0xffDADEE3);\n+  static Color get lightWhite => const Color(0xffF2F5F7);\n+\n+  static Color get red => const Color(0xffF4586C);\n+\n+  static Color get bg => Colors.white;\n+}\n+\n+extension HexColor on Color {\n+  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n+  static Color fromHex(String hexString) {\n+    final buffer = StringBuffer();\n+    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n+    buffer.write(hexString.replaceFirst('#', ''));\n+    return Color(int.parse(buffer.toString(), radix: 16));\n+  }\n+\n+  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n+  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n+      '${alpha.toRadixString(16).padLeft(2, '0')}'\n+      '${red.toRadixString(16).padLeft(2, '0')}'\n+      '${green.toRadixString(16).padLeft(2, '0')}'\n+      '${blue.toRadixString(16).padLeft(2, '0')}';\n+}\n+\n+extension AppContext on BuildContext {\n+  Size get size => MediaQuery.sizeOf(this);\n+  double get width => size.width;\n+  double get height => size.height;\n+\n+  Future push(Widget widget) async {\n+    return Navigator.push(\n+      this,\n+      MaterialPageRoute(\n+        builder: (context) => widget,\n+      ),\n+    );\n+  }\n+\n+  void pop() async {\n+    return Navigator.pop(this);\n+  }\n+}\n"
                },
                {
                    "date": 1725958902060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n   static Color get lightWhite => const Color(0xffF2F5F7);\n \n   static Color get red => const Color(0xffF4586C);\n \n-  static Color get bg => Colors.white;\n+  static Color get bg => const Color.fromARGB(255, 19, 5, 5);\n }\n \n extension HexColor on Color {\n   /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n@@ -50,57 +50,4 @@\n   void pop() async {\n     return Navigator.pop(this);\n   }\n }\n-import 'package:flutter/material.dart';\n-\n-class TColor {\n-  static Color get primary => const Color(0xff3DB24B);\n-  static Color get secondary => const Color(0xff3369FF);\n-\n-  static Color get primaryText => const Color(0xff282F39);\n-  static Color get primaryTextW => const Color(0xffFFFFFF);\n-  static Color get secondaryText => const Color(0xff7F7F7F);\n-  static Color get placeholder => const Color(0xffBBBBBB);\n-  static Color get lightGray => const Color.fromARGB(255, 2, 15, 32);\n-  static Color get lightWhite => const Color(0xffF2F5F7);\n-\n-  static Color get red => const Color(0xffF4586C);\n-\n-  static Color get bg => Colors.white;\n-}\n-\n-extension HexColor on Color {\n-  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n-  static Color fromHex(String hexString) {\n-    final buffer = StringBuffer();\n-    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n-    buffer.write(hexString.replaceFirst('#', ''));\n-    return Color(int.parse(buffer.toString(), radix: 16));\n-  }\n-\n-  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n-  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n-      '${alpha.toRadixString(16).padLeft(2, '0')}'\n-      '${red.toRadixString(16).padLeft(2, '0')}'\n-      '${green.toRadixString(16).padLeft(2, '0')}'\n-      '${blue.toRadixString(16).padLeft(2, '0')}';\n-}\n-\n-extension AppContext on BuildContext {\n-  Size get size => MediaQuery.sizeOf(this);\n-  double get width => size.width;\n-  double get height => size.height;\n-\n-  Future push(Widget widget) async {\n-    return Navigator.push(\n-      this,\n-      MaterialPageRoute(\n-        builder: (context) => widget,\n-      ),\n-    );\n-  }\n-\n-  void pop() async {\n-    return Navigator.pop(this);\n-  }\n-}\n"
                },
                {
                    "date": 1725958951684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import 'package:flutter/material.dart';\n+\n+class TColor {\n+  static Color get primary => const Color(0xff3DB24B);\n+  static Color get secondary => const Color(0xff3369FF);\n+\n+  static Color get primaryText => const Color.fromARGB(255, 238, 240, 242);\n+  static Color get primaryTextW => const Color(0xffFFFFFF);\n+  static Color get secondaryText => const Color.fromARGB(255, 248, 244, 244);\n+  static Color get placeholder => const Color(0xffBBBBBB);\n+  static Color get lightGray => const Color(0xffDADEE3);\n+  static Color get lightWhite => const Color(0xffF2F5F7);\n+\n+  static Color get red => const Color(0xffF4586C);\n+\n+  static Color get bg => const Color.fromARGB(255, 19, 5, 5);\n+}\n+\n+extension HexColor on Color {\n+  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n+  static Color fromHex(String hexString) {\n+    final buffer = StringBuffer();\n+    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n+    buffer.write(hexString.replaceFirst('#', ''));\n+    return Color(int.parse(buffer.toString(), radix: 16));\n+  }\n+\n+  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n+  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n+      '${alpha.toRadixString(16).padLeft(2, '0')}'\n+      '${red.toRadixString(16).padLeft(2, '0')}'\n+      '${green.toRadixString(16).padLeft(2, '0')}'\n+      '${blue.toRadixString(16).padLeft(2, '0')}';\n+}\n+\n+extension AppContext on BuildContext {\n+  Size get size => MediaQuery.sizeOf(this);\n+  double get width => size.width;\n+  double get height => size.height;\n+\n+  Future push(Widget widget) async {\n+    return Navigator.push(\n+      this,\n+      MaterialPageRoute(\n+        builder: (context) => widget,\n+      ),\n+    );\n+  }\n+\n+  void pop() async {\n+    return Navigator.pop(this);\n+  }\n+}\n"
                },
                {
                    "date": 1725958979984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,61 +3,8 @@\n class TColor {\n   static Color get primary => const Color(0xff3DB24B);\n   static Color get secondary => const Color(0xff3369FF);\n \n-  static Color get primaryText => const Color.fromARGB(255, 238, 240, 242);\n-  static Color get primaryTextW => const Color(0xffFFFFFF);\n-  static Color get secondaryText => const Color.fromARGB(255, 248, 244, 244);\n-  static Color get placeholder => const Color(0xffBBBBBB);\n-  static Color get lightGray => const Color(0xffDADEE3);\n-  static Color get lightWhite => const Color(0xffF2F5F7);\n-\n-  static Color get red => const Color(0xffF4586C);\n-\n-  static Color get bg => const Color.fromARGB(255, 19, 5, 5);\n-}\n-\n-extension HexColor on Color {\n-  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n-  static Color fromHex(String hexString) {\n-    final buffer = StringBuffer();\n-    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n-    buffer.write(hexString.replaceFirst('#', ''));\n-    return Color(int.parse(buffer.toString(), radix: 16));\n-  }\n-\n-  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n-  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n-      '${alpha.toRadixString(16).padLeft(2, '0')}'\n-      '${red.toRadixString(16).padLeft(2, '0')}'\n-      '${green.toRadixString(16).padLeft(2, '0')}'\n-      '${blue.toRadixString(16).padLeft(2, '0')}';\n-}\n-\n-extension AppContext on BuildContext {\n-  Size get size => MediaQuery.sizeOf(this);\n-  double get width => size.width;\n-  double get height => size.height;\n-\n-  Future push(Widget widget) async {\n-    return Navigator.push(\n-      this,\n-      MaterialPageRoute(\n-        builder: (context) => widget,\n-      ),\n-    );\n-  }\n-\n-  void pop() async {\n-    return Navigator.pop(this);\n-  }\n-}\n-import 'package:flutter/material.dart';\n-\n-class TColor {\n-  static Color get primary => const Color(0xff3DB24B);\n-  static Color get secondary => const Color(0xff3369FF);\n-\n   static Color get primaryText => const Color(0xff282F39);\n   static Color get primaryTextW => const Color(0xffFFFFFF);\n   static Color get secondaryText => const Color(0xff7F7F7F);\n   static Color get placeholder => const Color(0xffBBBBBB);\n@@ -65,9 +12,9 @@\n   static Color get lightWhite => const Color(0xffF2F5F7);\n \n   static Color get red => const Color(0xffF4586C);\n \n-  static Color get bg => const Color.fromARGB(255, 19, 5, 5);\n+  static Color get bg => Colors.white;\n }\n \n extension HexColor on Color {\n   /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n"
                },
                {
                    "date": 1725959000330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+import 'package:flutter/material.dart';\n+\n+class TColor {\n+  static Color get primary => const Color.fromARGB(255, 3, 247, 32);\n+  static Color get secondary => const Color(0xff3369FF);\n+\n+  static Color get primaryText => const Color(0xff282F39);\n+  static Color get primaryTextW => const Color(0xffFFFFFF);\n+  static Color get secondaryText => const Color(0xff7F7F7F);\n+  static Color get placeholder => const Color(0xffBBBBBB);\n+  static Color get lightGray => const Color(0xffDADEE3);\n+  static Color get lightWhite => const Color(0xffF2F5F7);\n+\n+  static Color get red => const Color(0xffF4586C);\n+\n+  static Color get bg => Colors.white;\n+}\n+\n+extension HexColor on Color {\n+  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n+  static Color fromHex(String hexString) {\n+    final buffer = StringBuffer();\n+    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n+    buffer.write(hexString.replaceFirst('#', ''));\n+    return Color(int.parse(buffer.toString(), radix: 16));\n+  }\n+\n+  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n+  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n+      '${alpha.toRadixString(16).padLeft(2, '0')}'\n+      '${red.toRadixString(16).padLeft(2, '0')}'\n+      '${green.toRadixString(16).padLeft(2, '0')}'\n+      '${blue.toRadixString(16).padLeft(2, '0')}';\n+}\n+\n+extension AppContext on BuildContext {\n+  Size get size => MediaQuery.sizeOf(this);\n+  double get width => size.width;\n+  double get height => size.height;\n+\n+  Future push(Widget widget) async {\n+    return Navigator.push(\n+      this,\n+      MaterialPageRoute(\n+        builder: (context) => widget,\n+      ),\n+    );\n+  }\n+\n+  void pop() async {\n+    return Navigator.pop(this);\n+  }\n+}\n"
                },
                {
                    "date": 1725959008788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,60 +1,7 @@\n import 'package:flutter/material.dart';\n \n class TColor {\n-  static Color get primary => const Color.fromARGB(255, 3, 247, 32);\n-  static Color get secondary => const Color(0xff3369FF);\n-\n-  static Color get primaryText => const Color(0xff282F39);\n-  static Color get primaryTextW => const Color(0xffFFFFFF);\n-  static Color get secondaryText => const Color(0xff7F7F7F);\n-  static Color get placeholder => const Color(0xffBBBBBB);\n-  static Color get lightGray => const Color(0xffDADEE3);\n-  static Color get lightWhite => const Color(0xffF2F5F7);\n-\n-  static Color get red => const Color(0xffF4586C);\n-\n-  static Color get bg => Colors.white;\n-}\n-\n-extension HexColor on Color {\n-  /// String is in the format \"aabbcc\" or \"ffaabbcc\" with an optional leading \"#\".\n-  static Color fromHex(String hexString) {\n-    final buffer = StringBuffer();\n-    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n-    buffer.write(hexString.replaceFirst('#', ''));\n-    return Color(int.parse(buffer.toString(), radix: 16));\n-  }\n-\n-  /// Prefixes a hash sign if [leadingHashSign] is set to `true` (default is `true`).\n-  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n-      '${alpha.toRadixString(16).padLeft(2, '0')}'\n-      '${red.toRadixString(16).padLeft(2, '0')}'\n-      '${green.toRadixString(16).padLeft(2, '0')}'\n-      '${blue.toRadixString(16).padLeft(2, '0')}';\n-}\n-\n-extension AppContext on BuildContext {\n-  Size get size => MediaQuery.sizeOf(this);\n-  double get width => size.width;\n-  double get height => size.height;\n-\n-  Future push(Widget widget) async {\n-    return Navigator.push(\n-      this,\n-      MaterialPageRoute(\n-        builder: (context) => widget,\n-      ),\n-    );\n-  }\n-\n-  void pop() async {\n-    return Navigator.pop(this);\n-  }\n-}\n-import 'package:flutter/material.dart';\n-\n-class TColor {\n   static Color get primary => const Color(0xff3DB24B);\n   static Color get secondary => const Color(0xff3369FF);\n \n   static Color get primaryText => const Color(0xff282F39);\n"
                }
            ],
            "date": 1719736932200,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\n\nclass TColor {\n  static  Color get primary => const Color(0xff00A676);\n  static  Color get secondary => const Color(0xff3369FF);\n\n  static  Color get primaryText => const Color(0xff282F39);\n  static  Color get primaryTextW => const Color(0xffFFFFFF);\n  static  Color get secondaryText => const Color(0xff7F7F7F);\n  static  Color get placeholder => const Color(0xffBBBBBB);\n  static  Color get lightGray => const Color(0xffDADEE3);\n\n  static Color get bg => Colors.white;\n}\n\nextension HexColor on Color {\n  static Color fromHex(String hexString) {\n    final buffer = StringBuffer();\n    if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');\n    buffer.write(hexString.replaceFirst('#', ''));\n    return Color(int.parse(buffer.toString(), radix: 16));\n  }\n\n  String toHex({bool leadingHashSign = true}) => '${leadingHashSign ? '#' : ''}'\n  '${alpha.toRadixString(16).padLeft(2, '0')}'\n  '${red.toRadixString(16).padLeft(2, '0')}'\n  '${green.toRadixString(16).padLeft(2, '0')}'\n  '${blue.toRadixString(16).padLeft(2, '0')}';\n}\n\nextension AppContext on BuildContext {\n  Size get size => MediaQuery.sizeOf(this);\n  double get width => size.width;\n  double get height => size.height;\n  \n  Future push ( Widget widget) async {\n    return Navigator.push(this, MaterialPageRoute(builder: (context) => widget, ),);\n  }\n\n  void pop() async {\n    return Navigator.pop(this);\n  }\n}"
        }
    ]
}