{
    "sourceFile": "lib/common/location_helper.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1722774243448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722862437100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n \n       ServiceCall.post( {\n         \"latitude\": pos.latitude.toString(),\n         \"longitude\": pos.longitude.toString(),\n-        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+        //\"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n       }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n \n           if(responseObj[KKey.status]  == \"1\" ) {\n             debugPrint(\" Location send success\");\n"
                },
                {
                    "date": 1722863106974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import 'dart:async';\n+import 'dart:io';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class LocationHelper {\n+  static final LocationHelper singleton = LocationHelper.internal();\n+  factory LocationHelper() => singleton;\n+  LocationHelper.internal();\n+  static LocationHelper shared() => singleton;\n+\n+  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n+\n+  StreamSubscription<Position>? positionStreamSub;\n+  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n+  bool positionSteamStarted = true;\n+\n+  Position? lastLocation;\n+  bool isSaveFileLocation = false;\n+  int bookingId = 0;\n+\n+  String saveFilePath = \"\";\n+\n+  void startInit() async {\n+    var isAccess = await handlePermission();\n+\n+    if(!isAccess) {\n+      return;\n+    }\n+\n+    saveFilePath =   (await getSavePath()).path;\n+\n+    if(serviceStatusStreamSub == null) {\n+      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n+      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n+\n+          serviceStatusStreamSub?.cancel();\n+          serviceStatusStreamSub = null;\n+\n+      } ).listen((serviceStatus) {\n+          String serviceStatusValue;\n+\n+          if(serviceStatus == ServiceStatus.enabled) {\n+            if(positionSteamStarted) { \n+              //Start Location Listen logic\n+              locationChangeListening();\n+            }\n+            serviceStatusValue = \"enabled\";\n+\n+          }else{\n+            if(positionStreamSub != null) {\n+              positionStreamSub?.cancel();\n+              positionStreamSub = null;\n+\n+              print(\"Position Stream han been canceled\");\n+            }\n+\n+            serviceStatusValue = \"disabled\";\n+\n+          }\n+          print(\"Location service has been $serviceStatusValue\");\n+      });\n+    }\n+  }\n+\n+  void locationSendPause() {\n+      if( positionStreamSub != null) {\n+        positionStreamSub?.cancel();\n+        positionStreamSub = null;\n+        positionSteamStarted = false;\n+      }\n+  }\n+\n+  void locationSendStart() {\n+    if(positionSteamStarted) {\n+      return;\n+    }\n+\n+    locationChangeListening();\n+  }\n+\n+  Future<bool> handlePermission() async {\n+    bool serviceEnable;\n+    LocationPermission permission;\n+\n+    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n+\n+    if (!serviceEnable) {\n+      return false;\n+    }\n+\n+    permission = await geolocatorPlatform.checkPermission();\n+    if (permission == LocationPermission.denied) {\n+      permission = await geolocatorPlatform.requestPermission();\n+      if (permission == LocationPermission.denied) {\n+        return false;\n+      }\n+    }\n+\n+    if(permission == LocationPermission.deniedForever) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  void locationChangeListening() {\n+      if( positionStreamSub == null ) {\n+        final positionStream = geolocatorPlatform.getPositionStream(\n+            locationSettings: const LocationSettings(\n+              accuracy: LocationAccuracy.bestForNavigation,\n+              distanceFilter: 15\n+            )\n+        );\n+\n+        positionStreamSub = positionStream.handleError( (error) {\n+\n+            positionStreamSub?.cancel();\n+            positionStreamSub = null;\n+\n+        } ).listen((position) {\n+            //Api Calling REST Api Calling\n+            lastLocation = position;\n+\n+            if(isSaveFileLocation && bookingId != 0) {\n+              try {\n+                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n+                 debugPrint(\"Save Location ---\");\n+              } catch (e) {\n+                debugPrint(e.toString());\n+              }\n+            }\n+            apiCallingLocationUpdate(position);\n+        });\n+      }\n+  }\n+\n+\n+  //TODO: ApiCall\n+\n+  void apiCallingLocationUpdate(Position pos) {\n+\n+      if(ServiceCall.userType != 2) {\n+        return;\n+      } \n+\n+      debugPrint(\" Driver Location sending api calling\");\n+\n+      ServiceCall.post( {\n+        \"latitude\": pos.latitude.toString(),\n+        \"longitude\": pos.longitude.toString(),\n+        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n+\n+          if(responseObj[KKey.status]  == \"1\" ) {\n+            debugPrint(\" Location send success\");\n+          }else{\n+            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n+          }\n+\n+      }, failure: (error) async {\n+            debugPrint(\" Location send fill : $error\");\n+      } );\n+  }\n+\n+  void startRideLocationSave(int bId, Position position) {\n+    bookingId = bId;\n+    \n+    try {\n+      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n+          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n+          mode: FileMode.append);\n+                \n+\n+          debugPrint(\"Save Location ---\");\n+          isSaveFileLocation = true;\n+    } catch (e) {\n+      debugPrint(e.toString());\n+    }\n+  }\n+\n+  void stopRideLocationSave(){\n+    isSaveFileLocation = false;\n+    bookingId = 0;\n+  }\n+\n+  Future<Directory> getSavePath() async {\n+    if (Platform.isAndroid) {\n+      return getTemporaryDirectory();\n+    }else{\n+      return getApplicationCacheDirectory();\n+    }\n+  }\n+\n+  String getRideSaveLocationJsonString(int bookingId) {\n+    try {\n+      \n+      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n+    } catch (e) {\n+      debugPrint(e.toString());\n+      return \"[]\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1722863298150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,214 +207,4 @@\n       return \"[]\";\n     }\n   }\n }\n-import 'dart:async';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:geolocator/geolocator.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-\n-class LocationHelper {\n-  static final LocationHelper singleton = LocationHelper.internal();\n-  factory LocationHelper() => singleton;\n-  LocationHelper.internal();\n-  static LocationHelper shared() => singleton;\n-\n-  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n-\n-  StreamSubscription<Position>? positionStreamSub;\n-  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n-  bool positionSteamStarted = true;\n-\n-  Position? lastLocation;\n-  bool isSaveFileLocation = false;\n-  int bookingId = 0;\n-\n-  String saveFilePath = \"\";\n-\n-  void startInit() async {\n-    var isAccess = await handlePermission();\n-\n-    if(!isAccess) {\n-      return;\n-    }\n-\n-    saveFilePath =   (await getSavePath()).path;\n-\n-    if(serviceStatusStreamSub == null) {\n-      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n-      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n-\n-          serviceStatusStreamSub?.cancel();\n-          serviceStatusStreamSub = null;\n-\n-      } ).listen((serviceStatus) {\n-          String serviceStatusValue;\n-\n-          if(serviceStatus == ServiceStatus.enabled) {\n-            if(positionSteamStarted) { \n-              //Start Location Listen logic\n-              locationChangeListening();\n-            }\n-            serviceStatusValue = \"enabled\";\n-\n-          }else{\n-            if(positionStreamSub != null) {\n-              positionStreamSub?.cancel();\n-              positionStreamSub = null;\n-\n-              print(\"Position Stream han been canceled\");\n-            }\n-\n-            serviceStatusValue = \"disabled\";\n-\n-          }\n-          print(\"Location service has been $serviceStatusValue\");\n-      });\n-    }\n-  }\n-\n-  void locationSendPause() {\n-      if( positionStreamSub != null) {\n-        positionStreamSub?.cancel();\n-        positionStreamSub = null;\n-        positionSteamStarted = false;\n-      }\n-  }\n-\n-  void locationSendStart() {\n-    if(positionSteamStarted) {\n-      return;\n-    }\n-\n-    locationChangeListening();\n-  }\n-\n-  Future<bool> handlePermission() async {\n-    bool serviceEnable;\n-    LocationPermission permission;\n-\n-    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n-\n-    if (!serviceEnable) {\n-      return false;\n-    }\n-\n-    permission = await geolocatorPlatform.checkPermission();\n-    if (permission == LocationPermission.denied) {\n-      permission = await geolocatorPlatform.requestPermission();\n-      if (permission == LocationPermission.denied) {\n-        return false;\n-      }\n-    }\n-\n-    if(permission == LocationPermission.deniedForever) {\n-      return false;\n-    }\n-\n-    return true;\n-  }\n-\n-  void locationChangeListening() {\n-      if( positionStreamSub == null ) {\n-        final positionStream = geolocatorPlatform.getPositionStream(\n-            locationSettings: const LocationSettings(\n-              accuracy: LocationAccuracy.bestForNavigation,\n-              distanceFilter: 15\n-            )\n-        );\n-\n-        positionStreamSub = positionStream.handleError( (error) {\n-\n-            positionStreamSub?.cancel();\n-            positionStreamSub = null;\n-\n-        } ).listen((position) {\n-            //Api Calling REST Api Calling\n-            lastLocation = position;\n-\n-            if(isSaveFileLocation && bookingId != 0) {\n-              try {\n-                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n-                 debugPrint(\"Save Location ---\");\n-              } catch (e) {\n-                debugPrint(e.toString());\n-              }\n-            }\n-            apiCallingLocationUpdate(position);\n-        });\n-      }\n-  }\n-\n-\n-  //TODO: ApiCall\n-\n-  void apiCallingLocationUpdate(Position pos) {\n-\n-      if(ServiceCall.userType != 2) {\n-        return;\n-      } \n-\n-      debugPrint(\" Driver Location sending api calling\");\n-\n-      ServiceCall.post( {\n-        \"latitude\": pos.latitude.toString(),\n-        \"longitude\": pos.longitude.toString(),\n-        //\"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n-\n-          if(responseObj[KKey.status]  == \"1\" ) {\n-            debugPrint(\" Location send success\");\n-          }else{\n-            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n-          }\n-\n-      }, failure: (error) async {\n-            debugPrint(\" Location send fill : $error\");\n-      } );\n-  }\n-\n-  void startRideLocationSave(int bId, Position position) {\n-    bookingId = bId;\n-    \n-    try {\n-      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n-          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n-          mode: FileMode.append);\n-                \n-\n-          debugPrint(\"Save Location ---\");\n-          isSaveFileLocation = true;\n-    } catch (e) {\n-      debugPrint(e.toString());\n-    }\n-  }\n-\n-  void stopRideLocationSave(){\n-    isSaveFileLocation = false;\n-    bookingId = 0;\n-  }\n-\n-  Future<Directory> getSavePath() async {\n-    if (Platform.isAndroid) {\n-      return getTemporaryDirectory();\n-    }else{\n-      return getApplicationCacheDirectory();\n-    }\n-  }\n-\n-  String getRideSaveLocationJsonString(int bookingId) {\n-    try {\n-      \n-      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n-    } catch (e) {\n-      debugPrint(e.toString());\n-      return \"[]\";\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1723423872780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,423 @@\n+import 'dart:async';\n+import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class LocationHelper {\n+  static final LocationHelper singleton = LocationHelper.internal();\n+  factory LocationHelper() => singleton;\n+  LocationHelper.internal();\n+  static LocationHelper shared() => singleton;\n+\n+  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n+\n+  StreamSubscription<Position>? positionStreamSub;\n+  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n+  bool positionSteamStarted = true;\n+\n+  Position? lastLocation;\n+  bool isSaveFileLocation = false;\n+  int bookingId = 0;\n+\n+  String saveFilePath = \"\";\n+\n+  void startInit() async {\n+    var isAccess = await handlePermission();\n+\n+    if(!isAccess) {\n+      return;\n+    }\n+\n+    saveFilePath =   (await getSavePath()).path;\n+\n+    if(serviceStatusStreamSub == null) {\n+      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n+      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n+\n+          serviceStatusStreamSub?.cancel();\n+          serviceStatusStreamSub = null;\n+\n+      } ).listen((serviceStatus) {\n+          String serviceStatusValue;\n+\n+          if(serviceStatus == ServiceStatus.enabled) {\n+            if(positionSteamStarted) { \n+              //Start Location Listen logic\n+              locationChangeListening();\n+            }\n+            serviceStatusValue = \"enabled\";\n+\n+          }else{\n+            if(positionStreamSub != null) {\n+              positionStreamSub?.cancel();\n+              positionStreamSub = null;\n+\n+              print(\"Position Stream han been canceled\");\n+            }\n+\n+            serviceStatusValue = \"disabled\";\n+\n+          }\n+          print(\"Location service has been $serviceStatusValue\");\n+      });\n+    }\n+  }\n+\n+  void locationSendPause() {\n+      if( positionStreamSub != null) {\n+        positionStreamSub?.cancel();\n+        positionStreamSub = null;\n+        positionSteamStarted = false;\n+      }\n+  }\n+\n+  void locationSendStart() {\n+    if(positionSteamStarted) {\n+      return;\n+    }\n+\n+    locationChangeListening();\n+  }\n+\n+  Future<bool> handlePermission() async {\n+    bool serviceEnable;\n+    LocationPermission permission;\n+\n+    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n+\n+    if (!serviceEnable) {\n+      return false;\n+    }\n+\n+    permission = await geolocatorPlatform.checkPermission();\n+    if (permission == LocationPermission.denied) {\n+      permission = await geolocatorPlatform.requestPermission();\n+      if (permission == LocationPermission.denied) {\n+        return false;\n+      }\n+    }\n+\n+    if(permission == LocationPermission.deniedForever) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  void locationChangeListening() {\n+      if( positionStreamSub == null ) {\n+        final positionStream = geolocatorPlatform.getPositionStream(\n+            locationSettings: const LocationSettings(\n+              accuracy: LocationAccuracy.bestForNavigation,\n+              distanceFilter: 15\n+            )\n+        );\n+\n+        positionStreamSub = positionStream.handleError( (error) {\n+\n+            positionStreamSub?.cancel();\n+            positionStreamSub = null;\n+\n+        } ).listen((position) {\n+            //Api Calling REST Api Calling\n+            lastLocation = position;\n+\n+            if(isSaveFileLocation && bookingId != 0) {\n+              try {\n+                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n+                 debugPrint(\"Save Location ---\");\n+              } catch (e) {\n+                debugPrint(e.toString());\n+              }\n+            }\n+            apiCallingLocationUpdate(position);\n+        });\n+      }\n+  }\n+\n+\n+  //TODO: ApiCall\n+\n+  void apiCallingLocationUpdate(Position pos) {\n+\n+      if(ServiceCall.userType != 2) {\n+        return;\n+      } \n+\n+      debugPrint(\" Driver Location sending api calling\");\n+\n+      ServiceCall.post( {\n+        \"latitude\": pos.latitude.toString(),\n+        \"longitude\": pos.longitude.toString(),\n+        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n+\n+          if(responseObj[KKey.status]  == \"1\" ) {\n+            debugPrint(\" Location send success\");\n+          }else{\n+            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n+          }\n+\n+      }, failure: (error) async {\n+            debugPrint(\" Location send fill : $error\");\n+      } );\n+  }\n+\n+  void startRideLocationSave(int bId, Position position) {\n+    bookingId = bId;\n+    \n+    try {\n+      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n+          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n+          mode: FileMode.append);\n+                \n+\n+          debugPrint(\"Save Location ---\");\n+          isSaveFileLocation = true;\n+    } catch (e) {\n+      debugPrint(e.toString());\n+    }\n+  }\n+\n+  void stopRideLocationSave(){\n+    isSaveFileLocation = false;\n+    bookingId = 0;\n+  }\n+\n+  Future<Directory> getSavePath() async {\n+    if (Platform.isAndroid) {\n+      return getTemporaryDirectory();\n+    }else{\n+      return getApplicationCacheDirectory();\n+    }\n+  }\n+\n+  String getRideSaveLocationJsonString(int bookingId) {\n+    try {\n+      \n+      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n+    } catch (e) {\n+      debugPrint(e.toString());\n+      return \"[]\";\n+    }\n+  }\n+}\n+\n+\n+\n+/*import 'dart:async';\n+import 'dart:io';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class LocationHelper {\n+  static final LocationHelper singleton = LocationHelper.internal();\n+  factory LocationHelper() => singleton;\n+  LocationHelper.internal();\n+  static LocationHelper shared() => singleton;\n+\n+  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n+\n+  StreamSubscription<Position>? positionStreamSub;\n+  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n+  bool positionSteamStarted = true;\n+\n+  Position? lastLocation;\n+  bool isSaveFileLocation = false;\n+  int bookingId = 0;\n+\n+  String saveFilePath = \"\";\n+\n+  void startInit() async {\n+    var isAccess = await handlePermission();\n+\n+    if(!isAccess) {\n+      return;\n+    }\n+\n+    saveFilePath =   (await getSavePath()).path;\n+\n+    if(serviceStatusStreamSub == null) {\n+      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n+      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n+\n+          serviceStatusStreamSub?.cancel();\n+          serviceStatusStreamSub = null;\n+\n+      } ).listen((serviceStatus) {\n+          String serviceStatusValue;\n+\n+          if(serviceStatus == ServiceStatus.enabled) {\n+            if(positionSteamStarted) { \n+              //Start Location Listen logic\n+              locationChangeListening();\n+            }\n+            serviceStatusValue = \"enabled\";\n+\n+          }else{\n+            if(positionStreamSub != null) {\n+              positionStreamSub?.cancel();\n+              positionStreamSub = null;\n+\n+              print(\"Position Stream han been canceled\");\n+            }\n+\n+            serviceStatusValue = \"disabled\";\n+\n+          }\n+          print(\"Location service has been $serviceStatusValue\");\n+      });\n+    }\n+  }\n+\n+  void locationSendPause() {\n+      if( positionStreamSub != null) {\n+        positionStreamSub?.cancel();\n+        positionStreamSub = null;\n+        positionSteamStarted = false;\n+      }\n+  }\n+\n+  void locationSendStart() {\n+    if(positionSteamStarted) {\n+      return;\n+    }\n+\n+    locationChangeListening();\n+  }\n+\n+  Future<bool> handlePermission() async {\n+    bool serviceEnable;\n+    LocationPermission permission;\n+\n+    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n+\n+    if (!serviceEnable) {\n+      return false;\n+    }\n+\n+    permission = await geolocatorPlatform.checkPermission();\n+    if (permission == LocationPermission.denied) {\n+      permission = await geolocatorPlatform.requestPermission();\n+      if (permission == LocationPermission.denied) {\n+        return false;\n+      }\n+    }\n+\n+    if(permission == LocationPermission.deniedForever) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  void locationChangeListening() {\n+      if( positionStreamSub == null ) {\n+        final positionStream = geolocatorPlatform.getPositionStream(\n+            locationSettings: const LocationSettings(\n+              accuracy: LocationAccuracy.bestForNavigation,\n+              distanceFilter: 15\n+            )\n+        );\n+\n+        positionStreamSub = positionStream.handleError( (error) {\n+\n+            positionStreamSub?.cancel();\n+            positionStreamSub = null;\n+\n+        } ).listen((position) {\n+            //Api Calling REST Api Calling\n+            lastLocation = position;\n+\n+            if(isSaveFileLocation && bookingId != 0) {\n+              try {\n+                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n+                 debugPrint(\"Save Location ---\");\n+              } catch (e) {\n+                debugPrint(e.toString());\n+              }\n+            }\n+            apiCallingLocationUpdate(position);\n+        });\n+      }\n+  }\n+\n+\n+  //TODO: ApiCall\n+\n+  void apiCallingLocationUpdate(Position pos) {\n+\n+      if(ServiceCall.userType != 2) {\n+        return;\n+      } \n+\n+      debugPrint(\" Driver Location sending api calling\");\n+\n+      ServiceCall.post( {\n+        \"latitude\": pos.latitude.toString(),\n+        \"longitude\": pos.longitude.toString(),\n+        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n+\n+          if(responseObj[KKey.status]  == \"1\" ) {\n+            debugPrint(\" Location send success\");\n+          }else{\n+            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n+          }\n+\n+      }, failure: (error) async {\n+            debugPrint(\" Location send fill : $error\");\n+      } );\n+  }\n+\n+  void startRideLocationSave(int bId, Position position) {\n+    bookingId = bId;\n+    \n+    try {\n+      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n+          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n+          mode: FileMode.append);\n+                \n+\n+          debugPrint(\"Save Location ---\");\n+          isSaveFileLocation = true;\n+    } catch (e) {\n+      debugPrint(e.toString());\n+    }\n+  }\n+\n+  void stopRideLocationSave(){\n+    isSaveFileLocation = false;\n+    bookingId = 0;\n+  }\n+\n+  Future<Directory> getSavePath() async {\n+    if (Platform.isAndroid) {\n+      return getTemporaryDirectory();\n+    }else{\n+      return getApplicationCacheDirectory();\n+    }\n+  }\n+\n+  String getRideSaveLocationJsonString(int bookingId) {\n+    try {\n+      \n+      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n+    } catch (e) {\n+      debugPrint(e.toString());\n+      return \"[]\";\n+    }\n+  }\n+}*/\n"
                },
                {
                    "date": 1725464913191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import 'dart:async';\n+import 'dart:io';\n+\n+import 'package:flutter/material.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class LocationHelper {\n+  static final LocationHelper singleton = LocationHelper.internal();\n+  factory LocationHelper() => singleton;\n+  LocationHelper.internal();\n+  static LocationHelper shared() => singleton;\n+\n+  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n+\n+  StreamSubscription<Position>? positionStreamSub;\n+  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n+  bool positionSteamStarted = true;\n+\n+  Position? lastLocation;\n+  bool isSaveFileLocation = false;\n+  int bookingId = 0;\n+\n+  String saveFilePath = \"\";\n+\n+  void startInit() async {\n+    var isAccess = await handlePermission();\n+\n+    if(!isAccess) {\n+      return;\n+    }\n+\n+    saveFilePath =   (await getSavePath()).path;\n+\n+    if(serviceStatusStreamSub == null) {\n+      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n+      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n+\n+          serviceStatusStreamSub?.cancel();\n+          serviceStatusStreamSub = null;\n+\n+      } ).listen((serviceStatus) {\n+          String serviceStatusValue;\n+\n+          if(serviceStatus == ServiceStatus.enabled) {\n+            if(positionSteamStarted) { \n+              //Start Location Listen logic\n+              locationChangeListening();\n+            }\n+            serviceStatusValue = \"enabled\";\n+\n+          }else{\n+            if(positionStreamSub != null) {\n+              positionStreamSub?.cancel();\n+              positionStreamSub = null;\n+\n+              print(\"Position Stream han been canceled\");\n+            }\n+\n+            serviceStatusValue = \"disabled\";\n+\n+          }\n+          print(\"Location service has been $serviceStatusValue\");\n+      });\n+    }\n+  }\n+\n+  void locationSendPause() {\n+      if( positionStreamSub != null) {\n+        positionStreamSub?.cancel();\n+        positionStreamSub = null;\n+        positionSteamStarted = false;\n+      }\n+  }\n+\n+  void locationSendStart() {\n+    if(positionSteamStarted) {\n+      return;\n+    }\n+\n+    locationChangeListening();\n+  }\n+\n+  Future<bool> handlePermission() async {\n+    bool serviceEnable;\n+    LocationPermission permission;\n+\n+    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n+\n+    if (!serviceEnable) {\n+      return false;\n+    }\n+\n+    permission = await geolocatorPlatform.checkPermission();\n+    if (permission == LocationPermission.denied) {\n+      permission = await geolocatorPlatform.requestPermission();\n+      if (permission == LocationPermission.denied) {\n+        return false;\n+      }\n+    }\n+\n+    if(permission == LocationPermission.deniedForever) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  void locationChangeListening() {\n+      if( positionStreamSub == null ) {\n+        final positionStream = geolocatorPlatform.getPositionStream(\n+            locationSettings: const LocationSettings(\n+              accuracy: LocationAccuracy.bestForNavigation,\n+              distanceFilter: 15\n+            )\n+        );\n+\n+        positionStreamSub = positionStream.handleError( (error) {\n+\n+            positionStreamSub?.cancel();\n+            positionStreamSub = null;\n+\n+        } ).listen((position) {\n+            //Api Calling REST Api Calling\n+            lastLocation = position;\n+\n+            if(isSaveFileLocation && bookingId != 0) {\n+              try {\n+                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n+                 debugPrint(\"Save Location ---\");\n+              } catch (e) {\n+                debugPrint(e.toString());\n+              }\n+            }\n+            apiCallingLocationUpdate(position);\n+        });\n+      }\n+  }\n+\n+\n+  //TODO: ApiCall\n+\n+  void apiCallingLocationUpdate(Position pos) {\n+\n+      if(ServiceCall.userType != 2) {\n+        return;\n+      } \n+\n+      debugPrint(\" Driver Location sending api calling\");\n+\n+      ServiceCall.post( {\n+        \"latitude\": pos.latitude.toString(),\n+        \"longitude\": pos.longitude.toString(),\n+        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n+\n+          if(responseObj[KKey.status]  == \"1\" ) {\n+            debugPrint(\" Location send success\");\n+          }else{\n+            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n+          }\n+\n+      }, failure: (error) async {\n+            debugPrint(\" Location send fill : $error\");\n+      } );\n+  }\n+\n+  void startRideLocationSave(int bId, Position position) {\n+    bookingId = bId;\n+    \n+    try {\n+      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n+          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n+          mode: FileMode.append);\n+                \n+\n+          debugPrint(\"Save Location ---\");\n+          isSaveFileLocation = true;\n+    } catch (e) {\n+      debugPrint(e.toString());\n+    }\n+  }\n+\n+  void stopRideLocationSave(){\n+    isSaveFileLocation = false;\n+    bookingId = 0;\n+  }\n+\n+  Future<Directory> getSavePath() async {\n+    if (Platform.isAndroid) {\n+      return getTemporaryDirectory();\n+    }else{\n+      return getApplicationCacheDirectory();\n+    }\n+  }\n+\n+  String getRideSaveLocationJsonString(int bookingId) {\n+    try {\n+      \n+      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n+    } catch (e) {\n+      debugPrint(e.toString());\n+      return \"[]\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1725804226299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import 'dart:async';\n+import 'dart:io';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class LocationHelper {\n+  static final LocationHelper singleton = LocationHelper.internal();\n+  factory LocationHelper() => singleton;\n+  LocationHelper.internal();\n+  static LocationHelper shared() => singleton;\n+\n+  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n+\n+  StreamSubscription<Position>? positionStreamSub;\n+  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n+  bool positionSteamStarted = true;\n+\n+  Position? lastLocation;\n+  bool isSaveFileLocation = false;\n+  int bookingId = 0;\n+\n+  String saveFilePath = \"\";\n+\n+  void startInit() async {\n+    var isAccess = await handlePermission();\n+\n+    if(!isAccess) {\n+      return;\n+    }\n+\n+    saveFilePath =   (await getSavePath()).path;\n+\n+    if(serviceStatusStreamSub == null) {\n+      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n+      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n+\n+          serviceStatusStreamSub?.cancel();\n+          serviceStatusStreamSub = null;\n+\n+      } ).listen((serviceStatus) {\n+          String serviceStatusValue;\n+\n+          if(serviceStatus == ServiceStatus.enabled) {\n+            if(positionSteamStarted) { \n+              //Start Location Listen logic\n+              locationChangeListening();\n+            }\n+            serviceStatusValue = \"enabled\";\n+\n+          }else{\n+            if(positionStreamSub != null) {\n+              positionStreamSub?.cancel();\n+              positionStreamSub = null;\n+\n+              print(\"Position Stream han been canceled\");\n+            }\n+\n+            serviceStatusValue = \"disabled\";\n+\n+          }\n+          print(\"Location service has been $serviceStatusValue\");\n+      });\n+    }\n+  }\n+\n+  void locationSendPause() {\n+      if( positionStreamSub != null) {\n+        positionStreamSub?.cancel();\n+        positionStreamSub = null;\n+        positionSteamStarted = false;\n+      }\n+  }\n+\n+  void locationSendStart() {\n+    if(positionSteamStarted) {\n+      return;\n+    }\n+\n+    locationChangeListening();\n+  }\n+\n+  Future<bool> handlePermission() async {\n+    bool serviceEnable;\n+    LocationPermission permission;\n+\n+    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n+\n+    if (!serviceEnable) {\n+      return false;\n+    }\n+\n+    permission = await geolocatorPlatform.checkPermission();\n+    if (permission == LocationPermission.denied) {\n+      permission = await geolocatorPlatform.requestPermission();\n+      if (permission == LocationPermission.denied) {\n+        return false;\n+      }\n+    }\n+\n+    if(permission == LocationPermission.deniedForever) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  void locationChangeListening() {\n+      if( positionStreamSub == null ) {\n+        final positionStream = geolocatorPlatform.getPositionStream(\n+            locationSettings: const LocationSettings(\n+              accuracy: LocationAccuracy.bestForNavigation,\n+              distanceFilter: 15\n+            )\n+        );\n+\n+        positionStreamSub = positionStream.handleError( (error) {\n+\n+            positionStreamSub?.cancel();\n+            positionStreamSub = null;\n+\n+        } ).listen((position) {\n+            //Api Calling REST Api Calling\n+            lastLocation = position;\n+\n+            if(isSaveFileLocation && bookingId != 0) {\n+              try {\n+                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n+                 debugPrint(\"Save Location ---\");\n+              } catch (e) {\n+                debugPrint(e.toString());\n+              }\n+            }\n+            apiCallingLocationUpdate(position);\n+        });\n+      }\n+  }\n+\n+\n+  //TODO: ApiCall\n+\n+  void apiCallingLocationUpdate(Position pos) {\n+\n+      if(ServiceCall.userType != 2) {\n+        return;\n+      } \n+\n+      debugPrint(\" Driver Location sending api calling\");\n+\n+      ServiceCall.post( {\n+        \"latitude\": pos.latitude.toString(),\n+        \"longitude\": pos.longitude.toString(),\n+        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n+\n+          if(responseObj[KKey.status]  == \"1\" ) {\n+            debugPrint(\" Location send success\");\n+          }else{\n+            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n+          }\n+\n+      }, failure: (error) async {\n+            debugPrint(\" Location send fill : $error\");\n+      } );\n+  }\n+\n+  void startRideLocationSave(int bId, Position position) {\n+    bookingId = bId;\n+    \n+    try {\n+      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n+          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n+          mode: FileMode.append);\n+                \n+\n+          debugPrint(\"Save Location ---\");\n+          isSaveFileLocation = true;\n+    } catch (e) {\n+      debugPrint(e.toString());\n+    }\n+  }\n+\n+  void stopRideLocationSave(){\n+    isSaveFileLocation = false;\n+    bookingId = 0;\n+  }\n+\n+  Future<Directory> getSavePath() async {\n+    if (Platform.isAndroid) {\n+      return getTemporaryDirectory();\n+    }else{\n+      return getApplicationCacheDirectory();\n+    }\n+  }\n+\n+  String getRideSaveLocationJsonString(int bookingId) {\n+    try {\n+      \n+      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n+    } catch (e) {\n+      debugPrint(e.toString());\n+      return \"[]\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1726038609331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1053 +1,32 @@\n-import 'dart:async';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:geolocator/geolocator.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-\n-class LocationHelper {\n-  static final LocationHelper singleton = LocationHelper.internal();\n-  factory LocationHelper() => singleton;\n-  LocationHelper.internal();\n-  static LocationHelper shared() => singleton;\n-\n-  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n-\n-  StreamSubscription<Position>? positionStreamSub;\n-  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n-  bool positionSteamStarted = true;\n-\n-  Position? lastLocation;\n-  bool isSaveFileLocation = false;\n-  int bookingId = 0;\n-\n-  String saveFilePath = \"\";\n-\n-  void startInit() async {\n-    var isAccess = await handlePermission();\n-\n-    if(!isAccess) {\n-      return;\n-    }\n-\n-    saveFilePath =   (await getSavePath()).path;\n-\n-    if(serviceStatusStreamSub == null) {\n-      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n-      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n-\n-          serviceStatusStreamSub?.cancel();\n-          serviceStatusStreamSub = null;\n-\n-      } ).listen((serviceStatus) {\n-          String serviceStatusValue;\n-\n-          if(serviceStatus == ServiceStatus.enabled) {\n-            if(positionSteamStarted) { \n-              //Start Location Listen logic\n-              locationChangeListening();\n-            }\n-            serviceStatusValue = \"enabled\";\n-\n-          }else{\n-            if(positionStreamSub != null) {\n-              positionStreamSub?.cancel();\n-              positionStreamSub = null;\n-\n-              print(\"Position Stream han been canceled\");\n-            }\n-\n-            serviceStatusValue = \"disabled\";\n-\n-          }\n-          print(\"Location service has been $serviceStatusValue\");\n-      });\n-    }\n-  }\n-\n-  void locationSendPause() {\n-      if( positionStreamSub != null) {\n-        positionStreamSub?.cancel();\n-        positionStreamSub = null;\n-        positionSteamStarted = false;\n-      }\n-  }\n-\n-  void locationSendStart() {\n-    if(positionSteamStarted) {\n-      return;\n-    }\n-\n-    locationChangeListening();\n-  }\n-\n-  Future<bool> handlePermission() async {\n-    bool serviceEnable;\n-    LocationPermission permission;\n-\n-    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n-\n-    if (!serviceEnable) {\n-      return false;\n-    }\n-\n-    permission = await geolocatorPlatform.checkPermission();\n-    if (permission == LocationPermission.denied) {\n-      permission = await geolocatorPlatform.requestPermission();\n-      if (permission == LocationPermission.denied) {\n-        return false;\n-      }\n-    }\n-\n-    if(permission == LocationPermission.deniedForever) {\n-      return false;\n-    }\n-\n-    return true;\n-  }\n-\n-  void locationChangeListening() {\n-      if( positionStreamSub == null ) {\n-        final positionStream = geolocatorPlatform.getPositionStream(\n-            locationSettings: const LocationSettings(\n-              accuracy: LocationAccuracy.bestForNavigation,\n-              distanceFilter: 15\n-            )\n-        );\n-\n-        positionStreamSub = positionStream.handleError( (error) {\n-\n-            positionStreamSub?.cancel();\n-            positionStreamSub = null;\n-\n-        } ).listen((position) {\n-            //Api Calling REST Api Calling\n-            lastLocation = position;\n-\n-            if(isSaveFileLocation && bookingId != 0) {\n-              try {\n-                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n-                 debugPrint(\"Save Location ---\");\n-              } catch (e) {\n-                debugPrint(e.toString());\n-              }\n-            }\n-            apiCallingLocationUpdate(position);\n-        });\n-      }\n-  }\n-\n-\n-  //TODO: ApiCall\n-\n-  void apiCallingLocationUpdate(Position pos) {\n-\n-      if(ServiceCall.userType != 2) {\n-        return;\n-      } \n-\n-      debugPrint(\" Driver Location sending api calling\");\n-\n-      ServiceCall.post( {\n-        \"latitude\": pos.latitude.toString(),\n-        \"longitude\": pos.longitude.toString(),\n-        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n-\n-          if(responseObj[KKey.status]  == \"1\" ) {\n-            debugPrint(\" Location send success\");\n-          }else{\n-            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n-          }\n-\n-      }, failure: (error) async {\n-            debugPrint(\" Location send fill : $error\");\n-      } );\n-  }\n-\n-  void startRideLocationSave(int bId, Position position) {\n-    bookingId = bId;\n-    \n-    try {\n-      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n-          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n-          mode: FileMode.append);\n-                \n-\n-          debugPrint(\"Save Location ---\");\n-          isSaveFileLocation = true;\n-    } catch (e) {\n-      debugPrint(e.toString());\n-    }\n-  }\n-\n-  void stopRideLocationSave(){\n-    isSaveFileLocation = false;\n-    bookingId = 0;\n-  }\n-\n-  Future<Directory> getSavePath() async {\n-    if (Platform.isAndroid) {\n-      return getTemporaryDirectory();\n-    }else{\n-      return getApplicationCacheDirectory();\n-    }\n-  }\n-\n-  String getRideSaveLocationJsonString(int bookingId) {\n-    try {\n-      \n-      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n-    } catch (e) {\n-      debugPrint(e.toString());\n-      return \"[]\";\n-    }\n-  }\n-}\n-import 'dart:async';\n-import 'dart:io';\n-\n import 'package:flutter/material.dart';\n-import 'package:geolocator/geolocator.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n+import 'package:google_maps_flutter/google_maps_flutter.dart';\n \n-class LocationHelper {\n-  static final LocationHelper singleton = LocationHelper.internal();\n-  factory LocationHelper() => singleton;\n-  LocationHelper.internal();\n-  static LocationHelper shared() => singleton;\n-\n-  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n-\n-  StreamSubscription<Position>? positionStreamSub;\n-  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n-  bool positionSteamStarted = true;\n-\n-  Position? lastLocation;\n-  bool isSaveFileLocation = false;\n-  int bookingId = 0;\n-\n-  String saveFilePath = \"\";\n-\n-  void startInit() async {\n-    var isAccess = await handlePermission();\n-\n-    if(!isAccess) {\n-      return;\n-    }\n-\n-    saveFilePath =   (await getSavePath()).path;\n-\n-    if(serviceStatusStreamSub == null) {\n-      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n-      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n-\n-          serviceStatusStreamSub?.cancel();\n-          serviceStatusStreamSub = null;\n-\n-      } ).listen((serviceStatus) {\n-          String serviceStatusValue;\n-\n-          if(serviceStatus == ServiceStatus.enabled) {\n-            if(positionSteamStarted) { \n-              //Start Location Listen logic\n-              locationChangeListening();\n-            }\n-            serviceStatusValue = \"enabled\";\n-\n-          }else{\n-            if(positionStreamSub != null) {\n-              positionStreamSub?.cancel();\n-              positionStreamSub = null;\n-\n-              print(\"Position Stream han been canceled\");\n-            }\n-\n-            serviceStatusValue = \"disabled\";\n-\n-          }\n-          print(\"Location service has been $serviceStatusValue\");\n-      });\n-    }\n-  }\n-\n-  void locationSendPause() {\n-      if( positionStreamSub != null) {\n-        positionStreamSub?.cancel();\n-        positionStreamSub = null;\n-        positionSteamStarted = false;\n-      }\n-  }\n-\n-  void locationSendStart() {\n-    if(positionSteamStarted) {\n-      return;\n-    }\n-\n-    locationChangeListening();\n-  }\n-\n-  Future<bool> handlePermission() async {\n-    bool serviceEnable;\n-    LocationPermission permission;\n-\n-    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n-\n-    if (!serviceEnable) {\n-      return false;\n-    }\n-\n-    permission = await geolocatorPlatform.checkPermission();\n-    if (permission == LocationPermission.denied) {\n-      permission = await geolocatorPlatform.requestPermission();\n-      if (permission == LocationPermission.denied) {\n-        return false;\n-      }\n-    }\n-\n-    if(permission == LocationPermission.deniedForever) {\n-      return false;\n-    }\n-\n-    return true;\n-  }\n-\n-  void locationChangeListening() {\n-      if( positionStreamSub == null ) {\n-        final positionStream = geolocatorPlatform.getPositionStream(\n-            locationSettings: const LocationSettings(\n-              accuracy: LocationAccuracy.bestForNavigation,\n-              distanceFilter: 15\n-            )\n-        );\n-\n-        positionStreamSub = positionStream.handleError( (error) {\n-\n-            positionStreamSub?.cancel();\n-            positionStreamSub = null;\n-\n-        } ).listen((position) {\n-            //Api Calling REST Api Calling\n-            lastLocation = position;\n-\n-            if(isSaveFileLocation && bookingId != 0) {\n-              try {\n-                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n-                 debugPrint(\"Save Location ---\");\n-              } catch (e) {\n-                debugPrint(e.toString());\n-              }\n-            }\n-            apiCallingLocationUpdate(position);\n-        });\n-      }\n-  }\n-\n-\n-  //TODO: ApiCall\n-\n-  void apiCallingLocationUpdate(Position pos) {\n-\n-      if(ServiceCall.userType != 2) {\n-        return;\n-      } \n-\n-      debugPrint(\" Driver Location sending api calling\");\n-\n-      ServiceCall.post( {\n-        \"latitude\": pos.latitude.toString(),\n-        \"longitude\": pos.longitude.toString(),\n-        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n-\n-          if(responseObj[KKey.status]  == \"1\" ) {\n-            debugPrint(\" Location send success\");\n-          }else{\n-            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n-          }\n-\n-      }, failure: (error) async {\n-            debugPrint(\" Location send fill : $error\");\n-      } );\n-  }\n-\n-  void startRideLocationSave(int bId, Position position) {\n-    bookingId = bId;\n-    \n-    try {\n-      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n-          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n-          mode: FileMode.append);\n-                \n-\n-          debugPrint(\"Save Location ---\");\n-          isSaveFileLocation = true;\n-    } catch (e) {\n-      debugPrint(e.toString());\n-    }\n-  }\n-\n-  void stopRideLocationSave(){\n-    isSaveFileLocation = false;\n-    bookingId = 0;\n-  }\n-\n-  Future<Directory> getSavePath() async {\n-    if (Platform.isAndroid) {\n-      return getTemporaryDirectory();\n-    }else{\n-      return getApplicationCacheDirectory();\n-    }\n-  }\n-\n-  String getRideSaveLocationJsonString(int bookingId) {\n-    try {\n-      \n-      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n-    } catch (e) {\n-      debugPrint(e.toString());\n-      return \"[]\";\n-    }\n-  }\n+class MapScreen extends StatefulWidget {\n+  @override\n+  _MapScreenState createState() => _MapScreenState();\n }\n-import 'dart:async';\n-import 'dart:io';\n \n-import 'package:flutter/material.dart';\n-import 'package:geolocator/geolocator.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n+class _MapScreenState extends State<MapScreen> {\n+  GoogleMapController? _controller;\n+  final LatLng _initialPosition = LatLng(37.7749, -122.4194); // Example coordinates\n \n-class LocationHelper {\n-  static final LocationHelper singleton = LocationHelper.internal();\n-  factory LocationHelper() => singleton;\n-  LocationHelper.internal();\n-  static LocationHelper shared() => singleton;\n-\n-  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n-\n-  StreamSubscription<Position>? positionStreamSub;\n-  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n-  bool positionSteamStarted = true;\n-\n-  Position? lastLocation;\n-  bool isSaveFileLocation = false;\n-  int bookingId = 0;\n-\n-  String saveFilePath = \"\";\n-\n-  void startInit() async {\n-    var isAccess = await handlePermission();\n-\n-    if(!isAccess) {\n-      return;\n-    }\n-\n-    saveFilePath =   (await getSavePath()).path;\n-\n-    if(serviceStatusStreamSub == null) {\n-      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n-      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n-\n-          serviceStatusStreamSub?.cancel();\n-          serviceStatusStreamSub = null;\n-\n-      } ).listen((serviceStatus) {\n-          String serviceStatusValue;\n-\n-          if(serviceStatus == ServiceStatus.enabled) {\n-            if(positionSteamStarted) { \n-              //Start Location Listen logic\n-              locationChangeListening();\n-            }\n-            serviceStatusValue = \"enabled\";\n-\n-          }else{\n-            if(positionStreamSub != null) {\n-              positionStreamSub?.cancel();\n-              positionStreamSub = null;\n-\n-              print(\"Position Stream han been canceled\");\n-            }\n-\n-            serviceStatusValue = \"disabled\";\n-\n-          }\n-          print(\"Location service has been $serviceStatusValue\");\n-      });\n-    }\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: Text('Google Map Example'),\n+      ),\n+      body: GoogleMap(\n+        initialCameraPosition: CameraPosition(\n+          target: _initialPosition,\n+          zoom: 10,\n+        ),\n+        onMapCreated: (GoogleMapController controller) {\n+          _controller = controller;\n+        },\n+        myLocationEnabled: true,\n+        myLocationButtonEnabled: true,\n+      ),\n+    );\n   }\n-\n-  void locationSendPause() {\n-      if( positionStreamSub != null) {\n-        positionStreamSub?.cancel();\n-        positionStreamSub = null;\n-        positionSteamStarted = false;\n-      }\n-  }\n-\n-  void locationSendStart() {\n-    if(positionSteamStarted) {\n-      return;\n-    }\n-\n-    locationChangeListening();\n-  }\n-\n-  Future<bool> handlePermission() async {\n-    bool serviceEnable;\n-    LocationPermission permission;\n-\n-    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n-\n-    if (!serviceEnable) {\n-      return false;\n-    }\n-\n-    permission = await geolocatorPlatform.checkPermission();\n-    if (permission == LocationPermission.denied) {\n-      permission = await geolocatorPlatform.requestPermission();\n-      if (permission == LocationPermission.denied) {\n-        return false;\n-      }\n-    }\n-\n-    if(permission == LocationPermission.deniedForever) {\n-      return false;\n-    }\n-\n-    return true;\n-  }\n-\n-  void locationChangeListening() {\n-      if( positionStreamSub == null ) {\n-        final positionStream = geolocatorPlatform.getPositionStream(\n-            locationSettings: const LocationSettings(\n-              accuracy: LocationAccuracy.bestForNavigation,\n-              distanceFilter: 15\n-            )\n-        );\n-\n-        positionStreamSub = positionStream.handleError( (error) {\n-\n-            positionStreamSub?.cancel();\n-            positionStreamSub = null;\n-\n-        } ).listen((position) {\n-            //Api Calling REST Api Calling\n-            lastLocation = position;\n-\n-            if(isSaveFileLocation && bookingId != 0) {\n-              try {\n-                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n-                 debugPrint(\"Save Location ---\");\n-              } catch (e) {\n-                debugPrint(e.toString());\n-              }\n-            }\n-            apiCallingLocationUpdate(position);\n-        });\n-      }\n-  }\n-\n-\n-  //TODO: ApiCall\n-\n-  void apiCallingLocationUpdate(Position pos) {\n-\n-      if(ServiceCall.userType != 2) {\n-        return;\n-      } \n-\n-      debugPrint(\" Driver Location sending api calling\");\n-\n-      ServiceCall.post( {\n-        \"latitude\": pos.latitude.toString(),\n-        \"longitude\": pos.longitude.toString(),\n-        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n-\n-          if(responseObj[KKey.status]  == \"1\" ) {\n-            debugPrint(\" Location send success\");\n-          }else{\n-            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n-          }\n-\n-      }, failure: (error) async {\n-            debugPrint(\" Location send fill : $error\");\n-      } );\n-  }\n-\n-  void startRideLocationSave(int bId, Position position) {\n-    bookingId = bId;\n-    \n-    try {\n-      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n-          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n-          mode: FileMode.append);\n-                \n-\n-          debugPrint(\"Save Location ---\");\n-          isSaveFileLocation = true;\n-    } catch (e) {\n-      debugPrint(e.toString());\n-    }\n-  }\n-\n-  void stopRideLocationSave(){\n-    isSaveFileLocation = false;\n-    bookingId = 0;\n-  }\n-\n-  Future<Directory> getSavePath() async {\n-    if (Platform.isAndroid) {\n-      return getTemporaryDirectory();\n-    }else{\n-      return getApplicationCacheDirectory();\n-    }\n-  }\n-\n-  String getRideSaveLocationJsonString(int bookingId) {\n-    try {\n-      \n-      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n-    } catch (e) {\n-      debugPrint(e.toString());\n-      return \"[]\";\n-    }\n-  }\n }\n-\n-\n-\n-/*import 'dart:async';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:geolocator/geolocator.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-\n-class LocationHelper {\n-  static final LocationHelper singleton = LocationHelper.internal();\n-  factory LocationHelper() => singleton;\n-  LocationHelper.internal();\n-  static LocationHelper shared() => singleton;\n-\n-  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n-\n-  StreamSubscription<Position>? positionStreamSub;\n-  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n-  bool positionSteamStarted = true;\n-\n-  Position? lastLocation;\n-  bool isSaveFileLocation = false;\n-  int bookingId = 0;\n-\n-  String saveFilePath = \"\";\n-\n-  void startInit() async {\n-    var isAccess = await handlePermission();\n-\n-    if(!isAccess) {\n-      return;\n-    }\n-\n-    saveFilePath =   (await getSavePath()).path;\n-\n-    if(serviceStatusStreamSub == null) {\n-      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n-      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n-\n-          serviceStatusStreamSub?.cancel();\n-          serviceStatusStreamSub = null;\n-\n-      } ).listen((serviceStatus) {\n-          String serviceStatusValue;\n-\n-          if(serviceStatus == ServiceStatus.enabled) {\n-            if(positionSteamStarted) { \n-              //Start Location Listen logic\n-              locationChangeListening();\n-            }\n-            serviceStatusValue = \"enabled\";\n-\n-          }else{\n-            if(positionStreamSub != null) {\n-              positionStreamSub?.cancel();\n-              positionStreamSub = null;\n-\n-              print(\"Position Stream han been canceled\");\n-            }\n-\n-            serviceStatusValue = \"disabled\";\n-\n-          }\n-          print(\"Location service has been $serviceStatusValue\");\n-      });\n-    }\n-  }\n-\n-  void locationSendPause() {\n-      if( positionStreamSub != null) {\n-        positionStreamSub?.cancel();\n-        positionStreamSub = null;\n-        positionSteamStarted = false;\n-      }\n-  }\n-\n-  void locationSendStart() {\n-    if(positionSteamStarted) {\n-      return;\n-    }\n-\n-    locationChangeListening();\n-  }\n-\n-  Future<bool> handlePermission() async {\n-    bool serviceEnable;\n-    LocationPermission permission;\n-\n-    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n-\n-    if (!serviceEnable) {\n-      return false;\n-    }\n-\n-    permission = await geolocatorPlatform.checkPermission();\n-    if (permission == LocationPermission.denied) {\n-      permission = await geolocatorPlatform.requestPermission();\n-      if (permission == LocationPermission.denied) {\n-        return false;\n-      }\n-    }\n-\n-    if(permission == LocationPermission.deniedForever) {\n-      return false;\n-    }\n-\n-    return true;\n-  }\n-\n-  void locationChangeListening() {\n-      if( positionStreamSub == null ) {\n-        final positionStream = geolocatorPlatform.getPositionStream(\n-            locationSettings: const LocationSettings(\n-              accuracy: LocationAccuracy.bestForNavigation,\n-              distanceFilter: 15\n-            )\n-        );\n-\n-        positionStreamSub = positionStream.handleError( (error) {\n-\n-            positionStreamSub?.cancel();\n-            positionStreamSub = null;\n-\n-        } ).listen((position) {\n-            //Api Calling REST Api Calling\n-            lastLocation = position;\n-\n-            if(isSaveFileLocation && bookingId != 0) {\n-              try {\n-                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n-                 debugPrint(\"Save Location ---\");\n-              } catch (e) {\n-                debugPrint(e.toString());\n-              }\n-            }\n-            apiCallingLocationUpdate(position);\n-        });\n-      }\n-  }\n-\n-\n-  //TODO: ApiCall\n-\n-  void apiCallingLocationUpdate(Position pos) {\n-\n-      if(ServiceCall.userType != 2) {\n-        return;\n-      } \n-\n-      debugPrint(\" Driver Location sending api calling\");\n-\n-      ServiceCall.post( {\n-        \"latitude\": pos.latitude.toString(),\n-        \"longitude\": pos.longitude.toString(),\n-        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n-\n-          if(responseObj[KKey.status]  == \"1\" ) {\n-            debugPrint(\" Location send success\");\n-          }else{\n-            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n-          }\n-\n-      }, failure: (error) async {\n-            debugPrint(\" Location send fill : $error\");\n-      } );\n-  }\n-\n-  void startRideLocationSave(int bId, Position position) {\n-    bookingId = bId;\n-    \n-    try {\n-      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n-          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n-          mode: FileMode.append);\n-                \n-\n-          debugPrint(\"Save Location ---\");\n-          isSaveFileLocation = true;\n-    } catch (e) {\n-      debugPrint(e.toString());\n-    }\n-  }\n-\n-  void stopRideLocationSave(){\n-    isSaveFileLocation = false;\n-    bookingId = 0;\n-  }\n-\n-  Future<Directory> getSavePath() async {\n-    if (Platform.isAndroid) {\n-      return getTemporaryDirectory();\n-    }else{\n-      return getApplicationCacheDirectory();\n-    }\n-  }\n-\n-  String getRideSaveLocationJsonString(int bookingId) {\n-    try {\n-      \n-      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n-    } catch (e) {\n-      debugPrint(e.toString());\n-      return \"[]\";\n-    }\n-  }\n-}*/\n-import 'dart:async';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:geolocator/geolocator.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-\n-class LocationHelper {\n-  static final LocationHelper singleton = LocationHelper.internal();\n-  factory LocationHelper() => singleton;\n-  LocationHelper.internal();\n-  static LocationHelper shared() => singleton;\n-\n-  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n-\n-  StreamSubscription<Position>? positionStreamSub;\n-  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n-  bool positionSteamStarted = true;\n-\n-  Position? lastLocation;\n-  bool isSaveFileLocation = false;\n-  int bookingId = 0;\n-\n-  String saveFilePath = \"\";\n-\n-  void startInit() async {\n-    var isAccess = await handlePermission();\n-\n-    if(!isAccess) {\n-      return;\n-    }\n-\n-    saveFilePath =   (await getSavePath()).path;\n-\n-    if(serviceStatusStreamSub == null) {\n-      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n-      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n-\n-          serviceStatusStreamSub?.cancel();\n-          serviceStatusStreamSub = null;\n-\n-      } ).listen((serviceStatus) {\n-          String serviceStatusValue;\n-\n-          if(serviceStatus == ServiceStatus.enabled) {\n-            if(positionSteamStarted) { \n-              //Start Location Listen logic\n-              locationChangeListening();\n-            }\n-            serviceStatusValue = \"enabled\";\n-\n-          }else{\n-            if(positionStreamSub != null) {\n-              positionStreamSub?.cancel();\n-              positionStreamSub = null;\n-\n-              print(\"Position Stream han been canceled\");\n-            }\n-\n-            serviceStatusValue = \"disabled\";\n-\n-          }\n-          print(\"Location service has been $serviceStatusValue\");\n-      });\n-    }\n-  }\n-\n-  void locationSendPause() {\n-      if( positionStreamSub != null) {\n-        positionStreamSub?.cancel();\n-        positionStreamSub = null;\n-        positionSteamStarted = false;\n-      }\n-  }\n-\n-  void locationSendStart() {\n-    if(positionSteamStarted) {\n-      return;\n-    }\n-\n-    locationChangeListening();\n-  }\n-\n-  Future<bool> handlePermission() async {\n-    bool serviceEnable;\n-    LocationPermission permission;\n-\n-    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n-\n-    if (!serviceEnable) {\n-      return false;\n-    }\n-\n-    permission = await geolocatorPlatform.checkPermission();\n-    if (permission == LocationPermission.denied) {\n-      permission = await geolocatorPlatform.requestPermission();\n-      if (permission == LocationPermission.denied) {\n-        return false;\n-      }\n-    }\n-\n-    if(permission == LocationPermission.deniedForever) {\n-      return false;\n-    }\n-\n-    return true;\n-  }\n-\n-  void locationChangeListening() {\n-      if( positionStreamSub == null ) {\n-        final positionStream = geolocatorPlatform.getPositionStream(\n-            locationSettings: const LocationSettings(\n-              accuracy: LocationAccuracy.bestForNavigation,\n-              distanceFilter: 15\n-            )\n-        );\n-\n-        positionStreamSub = positionStream.handleError( (error) {\n-\n-            positionStreamSub?.cancel();\n-            positionStreamSub = null;\n-\n-        } ).listen((position) {\n-            //Api Calling REST Api Calling\n-            lastLocation = position;\n-\n-            if(isSaveFileLocation && bookingId != 0) {\n-              try {\n-                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n-                 debugPrint(\"Save Location ---\");\n-              } catch (e) {\n-                debugPrint(e.toString());\n-              }\n-            }\n-            apiCallingLocationUpdate(position);\n-        });\n-      }\n-  }\n-\n-\n-  //TODO: ApiCall\n-\n-  void apiCallingLocationUpdate(Position pos) {\n-\n-      if(ServiceCall.userType != 2) {\n-        return;\n-      } \n-\n-      debugPrint(\" Driver Location sending api calling\");\n-\n-      ServiceCall.post( {\n-        \"latitude\": pos.latitude.toString(),\n-        \"longitude\": pos.longitude.toString(),\n-        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n-\n-          if(responseObj[KKey.status]  == \"1\" ) {\n-            debugPrint(\" Location send success\");\n-          }else{\n-            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n-          }\n-\n-      }, failure: (error) async {\n-            debugPrint(\" Location send fill : $error\");\n-      } );\n-  }\n-\n-  void startRideLocationSave(int bId, Position position) {\n-    bookingId = bId;\n-    \n-    try {\n-      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n-          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n-          mode: FileMode.append);\n-                \n-\n-          debugPrint(\"Save Location ---\");\n-          isSaveFileLocation = true;\n-    } catch (e) {\n-      debugPrint(e.toString());\n-    }\n-  }\n-\n-  void stopRideLocationSave(){\n-    isSaveFileLocation = false;\n-    bookingId = 0;\n-  }\n-\n-  Future<Directory> getSavePath() async {\n-    if (Platform.isAndroid) {\n-      return getTemporaryDirectory();\n-    }else{\n-      return getApplicationCacheDirectory();\n-    }\n-  }\n-\n-  String getRideSaveLocationJsonString(int bookingId) {\n-    try {\n-      \n-      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n-    } catch (e) {\n-      debugPrint(e.toString());\n-      return \"[]\";\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1726038700839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import 'dart:async';\n+import 'dart:io';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class LocationHelper {\n+  static final LocationHelper singleton = LocationHelper.internal();\n+  factory LocationHelper() => singleton;\n+  LocationHelper.internal();\n+  static LocationHelper shared() => singleton;\n+\n+  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n+\n+  StreamSubscription<Position>? positionStreamSub;\n+  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n+  bool positionSteamStarted = true;\n+\n+  Position? lastLocation;\n+  bool isSaveFileLocation = false;\n+  int bookingId = 0;\n+\n+  String saveFilePath = \"\";\n+\n+  void startInit() async {\n+    var isAccess = await handlePermission();\n+\n+    if(!isAccess) {\n+      return;\n+    }\n+\n+    saveFilePath =   (await getSavePath()).path;\n+\n+    if(serviceStatusStreamSub == null) {\n+      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n+      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n+\n+          serviceStatusStreamSub?.cancel();\n+          serviceStatusStreamSub = null;\n+\n+      } ).listen((serviceStatus) {\n+          String serviceStatusValue;\n+\n+          if(serviceStatus == ServiceStatus.enabled) {\n+            if(positionSteamStarted) { \n+              //Start Location Listen logic\n+              locationChangeListening();\n+            }\n+            serviceStatusValue = \"enabled\";\n+\n+          }else{\n+            if(positionStreamSub != null) {\n+              positionStreamSub?.cancel();\n+              positionStreamSub = null;\n+\n+              print(\"Position Stream han been canceled\");\n+            }\n+\n+            serviceStatusValue = \"disabled\";\n+\n+          }\n+          print(\"Location service has been $serviceStatusValue\");\n+      });\n+    }\n+  }\n+\n+  void locationSendPause() {\n+      if( positionStreamSub != null) {\n+        positionStreamSub?.cancel();\n+        positionStreamSub = null;\n+        positionSteamStarted = false;\n+      }\n+  }\n+\n+  void locationSendStart() {\n+    if(positionSteamStarted) {\n+      return;\n+    }\n+\n+    locationChangeListening();\n+  }\n+\n+  Future<bool> handlePermission() async {\n+    bool serviceEnable;\n+    LocationPermission permission;\n+\n+    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n+\n+    if (!serviceEnable) {\n+      return false;\n+    }\n+\n+    permission = await geolocatorPlatform.checkPermission();\n+    if (permission == LocationPermission.denied) {\n+      permission = await geolocatorPlatform.requestPermission();\n+      if (permission == LocationPermission.denied) {\n+        return false;\n+      }\n+    }\n+\n+    if(permission == LocationPermission.deniedForever) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  void locationChangeListening() {\n+      if( positionStreamSub == null ) {\n+        final positionStream = geolocatorPlatform.getPositionStream(\n+            locationSettings: const LocationSettings(\n+              accuracy: LocationAccuracy.bestForNavigation,\n+              distanceFilter: 15\n+            )\n+        );\n+\n+        positionStreamSub = positionStream.handleError( (error) {\n+\n+            positionStreamSub?.cancel();\n+            positionStreamSub = null;\n+\n+        } ).listen((position) {\n+            //Api Calling REST Api Calling\n+            lastLocation = position;\n+\n+            if(isSaveFileLocation && bookingId != 0) {\n+              try {\n+                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n+                 debugPrint(\"Save Location ---\");\n+              } catch (e) {\n+                debugPrint(e.toString());\n+              }\n+            }\n+            apiCallingLocationUpdate(position);\n+        });\n+      }\n+  }\n+\n+\n+  //TODO: ApiCall\n+\n+  void apiCallingLocationUpdate(Position pos) {\n+\n+      if(ServiceCall.userType != 2) {\n+        return;\n+      } \n+\n+      debugPrint(\" Driver Location sending api calling\");\n+\n+      ServiceCall.post( {\n+        \"latitude\": pos.latitude.toString(),\n+        \"longitude\": pos.longitude.toString(),\n+        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n+\n+          if(responseObj[KKey.status]  == \"1\" ) {\n+            debugPrint(\" Location send success\");\n+          }else{\n+            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n+          }\n+\n+      }, failure: (error) async {\n+            debugPrint(\" Location send fill : $error\");\n+      } );\n+  }\n+\n+  void startRideLocationSave(int bId, Position position) {\n+    bookingId = bId;\n+    \n+    try {\n+      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n+          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n+          mode: FileMode.append);\n+                \n+\n+          debugPrint(\"Save Location ---\");\n+          isSaveFileLocation = true;\n+    } catch (e) {\n+      debugPrint(e.toString());\n+    }\n+  }\n+\n+  void stopRideLocationSave(){\n+    isSaveFileLocation = false;\n+    bookingId = 0;\n+  }\n+\n+  Future<Directory> getSavePath() async {\n+    if (Platform.isAndroid) {\n+      return getTemporaryDirectory();\n+    }else{\n+      return getApplicationCacheDirectory();\n+    }\n+  }\n+\n+  String getRideSaveLocationJsonString(int bookingId) {\n+    try {\n+      \n+      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n+    } catch (e) {\n+      debugPrint(e.toString());\n+      return \"[]\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1726045064135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import 'dart:async';\n+import 'dart:io';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class LocationHelper {\n+  static final LocationHelper singleton = LocationHelper.internal();\n+  factory LocationHelper() => singleton;\n+  LocationHelper.internal();\n+  static LocationHelper shared() => singleton;\n+\n+  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n+\n+  StreamSubscription<Position>? positionStreamSub;\n+  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n+  bool positionSteamStarted = true;\n+\n+  Position? lastLocation;\n+  bool isSaveFileLocation = false;\n+  int bookingId = 0;\n+\n+  String saveFilePath = \"\";\n+\n+  void startInit() async {\n+    var isAccess = await handlePermission();\n+\n+    if(!isAccess) {\n+      return;\n+    }\n+\n+    saveFilePath =   (await getSavePath()).path;\n+\n+    if(serviceStatusStreamSub == null) {\n+      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n+      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n+\n+          serviceStatusStreamSub?.cancel();\n+          serviceStatusStreamSub = null;\n+\n+      } ).listen((serviceStatus) {\n+          String serviceStatusValue;\n+\n+          if(serviceStatus == ServiceStatus.enabled) {\n+            if(positionSteamStarted) { \n+              //Start Location Listen logic\n+              locationChangeListening();\n+            }\n+            serviceStatusValue = \"enabled\";\n+\n+          }else{\n+            if(positionStreamSub != null) {\n+              positionStreamSub?.cancel();\n+              positionStreamSub = null;\n+\n+              print(\"Position Stream han been canceled\");\n+            }\n+\n+            serviceStatusValue = \"disabled\";\n+\n+          }\n+          print(\"Location service has been $serviceStatusValue\");\n+      });\n+    }\n+  }\n+\n+  void locationSendPause() {\n+      if( positionStreamSub != null) {\n+        positionStreamSub?.cancel();\n+        positionStreamSub = null;\n+        positionSteamStarted = false;\n+      }\n+  }\n+\n+  void locationSendStart() {\n+    if(positionSteamStarted) {\n+      return;\n+    }\n+\n+    locationChangeListening();\n+  }\n+\n+  Future<bool> handlePermission() async {\n+    bool serviceEnable;\n+    LocationPermission permission;\n+\n+    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n+\n+    if (!serviceEnable) {\n+      return false;\n+    }\n+\n+    permission = await geolocatorPlatform.checkPermission();\n+    if (permission == LocationPermission.denied) {\n+      permission = await geolocatorPlatform.requestPermission();\n+      if (permission == LocationPermission.denied) {\n+        return false;\n+      }\n+    }\n+\n+    if(permission == LocationPermission.deniedForever) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  void locationChangeListening() {\n+      if( positionStreamSub == null ) {\n+        final positionStream = geolocatorPlatform.getPositionStream(\n+            locationSettings: const LocationSettings(\n+              accuracy: LocationAccuracy.bestForNavigation,\n+              distanceFilter: 15\n+            )\n+        );\n+\n+        positionStreamSub = positionStream.handleError( (error) {\n+\n+            positionStreamSub?.cancel();\n+            positionStreamSub = null;\n+\n+        } ).listen((position) {\n+            //Api Calling REST Api Calling\n+            lastLocation = position;\n+\n+            if(isSaveFileLocation && bookingId != 0) {\n+              try {\n+                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n+                 debugPrint(\"Save Location ---\");\n+              } catch (e) {\n+                debugPrint(e.toString());\n+              }\n+            }\n+            apiCallingLocationUpdate(position);\n+        });\n+      }\n+  }\n+\n+\n+  //TODO: ApiCall\n+\n+  void apiCallingLocationUpdate(Position pos) {\n+\n+      if(ServiceCall.userType != 2) {\n+        return;\n+      } \n+\n+      debugPrint(\" Driver Location sending api calling\");\n+\n+      ServiceCall.post( {\n+        \"latitude\": pos.latitude.toString(),\n+        \"longitude\": pos.longitude.toString(),\n+        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n+\n+          if(responseObj[KKey.status]  == \"1\" ) {\n+            debugPrint(\" Location send success\");\n+          }else{\n+            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n+          }\n+\n+      }, failure: (error) async {\n+            debugPrint(\" Location send fill : $error\");\n+      } );\n+  }\n+\n+  void startRideLocationSave(int bId, Position position) {\n+    bookingId = bId;\n+    \n+    try {\n+      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n+          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n+          mode: FileMode.append);\n+                \n+\n+          debugPrint(\"Save Location ---\");\n+          isSaveFileLocation = true;\n+    } catch (e) {\n+      debugPrint(e.toString());\n+    }\n+  }\n+\n+  void stopRideLocationSave(){\n+    isSaveFileLocation = false;\n+    bookingId = 0;\n+  }\n+\n+  Future<Directory> getSavePath() async {\n+    if (Platform.isAndroid) {\n+      return getTemporaryDirectory();\n+    }else{\n+      return getApplicationCacheDirectory();\n+    }\n+  }\n+\n+  String getRideSaveLocationJsonString(int bookingId) {\n+    try {\n+      \n+      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n+    } catch (e) {\n+      debugPrint(e.toString());\n+      return \"[]\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1726045140390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,210 @@\n+import 'dart:async';\n+import 'dart:io';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:geolocator/geolocator.dart';\n+import 'package:path_provider/path_provider.dart';\n+import 'package:taxi_driver/common/common_extension.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/common/service_call.dart';\n+import 'package:taxi_driver/common/socket_manager.dart';\n+\n+class LocationHelper {\n+  static final LocationHelper singleton = LocationHelper.internal();\n+  factory LocationHelper() => singleton;\n+  LocationHelper.internal();\n+  static LocationHelper shared() => singleton;\n+\n+  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n+\n+  StreamSubscription<Position>? positionStreamSub;\n+  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n+  bool positionSteamStarted = true;\n+\n+  Position? lastLocation;\n+  bool isSaveFileLocation = false;\n+  int bookingId = 0;\n+\n+  String saveFilePath = \"\";\n+\n+  void startInit() async {\n+    var isAccess = await handlePermission();\n+\n+    if(!isAccess) {\n+      return;\n+    }\n+\n+    saveFilePath =   (await getSavePath()).path;\n+\n+    if(serviceStatusStreamSub == null) {\n+      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n+      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n+\n+          serviceStatusStreamSub?.cancel();\n+          serviceStatusStreamSub = null;\n+\n+      } ).listen((serviceStatus) {\n+          String serviceStatusValue;\n+\n+          if(serviceStatus == ServiceStatus.enabled) {\n+            if(positionSteamStarted) { \n+              //Start Location Listen logic\n+              locationChangeListening();\n+            }\n+            serviceStatusValue = \"enabled\";\n+\n+          }else{\n+            if(positionStreamSub != null) {\n+              positionStreamSub?.cancel();\n+              positionStreamSub = null;\n+\n+              print(\"Position Stream han been canceled\");\n+            }\n+\n+            serviceStatusValue = \"disabled\";\n+\n+          }\n+          print(\"Location service has been $serviceStatusValue\");\n+      });\n+    }\n+  }\n+\n+  void locationSendPause() {\n+      if( positionStreamSub != null) {\n+        positionStreamSub?.cancel();\n+        positionStreamSub = null;\n+        positionSteamStarted = false;\n+      }\n+  }\n+\n+  void locationSendStart() {\n+    if(positionSteamStarted) {\n+      return;\n+    }\n+\n+    locationChangeListening();\n+  }\n+\n+  Future<bool> handlePermission() async {\n+    bool serviceEnable;\n+    LocationPermission permission;\n+\n+    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n+\n+    if (!serviceEnable) {\n+      return false;\n+    }\n+\n+    permission = await geolocatorPlatform.checkPermission();\n+    if (permission == LocationPermission.denied) {\n+      permission = await geolocatorPlatform.requestPermission();\n+      if (permission == LocationPermission.denied) {\n+        return false;\n+      }\n+    }\n+\n+    if(permission == LocationPermission.deniedForever) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n+  void locationChangeListening() {\n+      if( positionStreamSub == null ) {\n+        final positionStream = geolocatorPlatform.getPositionStream(\n+            locationSettings: const LocationSettings(\n+              accuracy: LocationAccuracy.bestForNavigation,\n+              distanceFilter: 15\n+            )\n+        );\n+\n+        positionStreamSub = positionStream.handleError( (error) {\n+\n+            positionStreamSub?.cancel();\n+            positionStreamSub = null;\n+\n+        } ).listen((position) {\n+            //Api Calling REST Api Calling\n+            lastLocation = position;\n+\n+            if(isSaveFileLocation && bookingId != 0) {\n+              try {\n+                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n+                 debugPrint(\"Save Location ---\");\n+              } catch (e) {\n+                debugPrint(e.toString());\n+              }\n+            }\n+            apiCallingLocationUpdate(position);\n+        });\n+      }\n+  }\n+\n+\n+  //TODO: ApiCall\n+\n+  void apiCallingLocationUpdate(Position pos) {\n+\n+      if(ServiceCall.userType != 2) {\n+        return;\n+      } \n+\n+      debugPrint(\" Driver Location sending api calling\");\n+\n+      ServiceCall.post( {\n+        \"latitude\": pos.latitude.toString(),\n+        \"longitude\": pos.longitude.toString(),\n+        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n+      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n+\n+          if(responseObj[KKey.status]  == \"1\" ) {\n+            debugPrint(\" Location send success\");\n+          }else{\n+            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n+          }\n+\n+      }, failure: (error) async {\n+            debugPrint(\" Location send fill : $error\");\n+      } );\n+  }\n+\n+  void startRideLocationSave(int bId, Position position) {\n+    bookingId = bId;\n+    \n+    try {\n+      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n+          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n+          mode: FileMode.append);\n+                \n+\n+          debugPrint(\"Save Location ---\");\n+          isSaveFileLocation = true;\n+    } catch (e) {\n+      debugPrint(e.toString());\n+    }\n+  }\n+\n+  void stopRideLocationSave(){\n+    isSaveFileLocation = false;\n+    bookingId = 0;\n+  }\n+\n+  Future<Directory> getSavePath() async {\n+    if (Platform.isAndroid) {\n+      return getTemporaryDirectory();\n+    }else{\n+      return getApplicationCacheDirectory();\n+    }\n+  }\n+\n+  String getRideSaveLocationJsonString(int bookingId) {\n+    try {\n+      \n+      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n+    } catch (e) {\n+      debugPrint(e.toString());\n+      return \"[]\";\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1726045270351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,456 +207,4 @@\n       return \"[]\";\n     }\n   }\n }\n-import 'dart:async';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:geolocator/geolocator.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-\n-class LocationHelper {\n-  static final LocationHelper singleton = LocationHelper.internal();\n-  factory LocationHelper() => singleton;\n-  LocationHelper.internal();\n-  static LocationHelper shared() => singleton;\n-\n-  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n-\n-  StreamSubscription<Position>? positionStreamSub;\n-  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n-  bool positionSteamStarted = true;\n-\n-  Position? lastLocation;\n-  bool isSaveFileLocation = false;\n-  int bookingId = 0;\n-\n-  String saveFilePath = \"\";\n-\n-  void startInit() async {\n-    var isAccess = await handlePermission();\n-\n-    if(!isAccess) {\n-      return;\n-    }\n-\n-    saveFilePath =   (await getSavePath()).path;\n-\n-    if(serviceStatusStreamSub == null) {\n-      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n-      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n-\n-          serviceStatusStreamSub?.cancel();\n-          serviceStatusStreamSub = null;\n-\n-      } ).listen((serviceStatus) {\n-          String serviceStatusValue;\n-\n-          if(serviceStatus == ServiceStatus.enabled) {\n-            if(positionSteamStarted) { \n-              //Start Location Listen logic\n-              locationChangeListening();\n-            }\n-            serviceStatusValue = \"enabled\";\n-\n-          }else{\n-            if(positionStreamSub != null) {\n-              positionStreamSub?.cancel();\n-              positionStreamSub = null;\n-\n-              print(\"Position Stream han been canceled\");\n-            }\n-\n-            serviceStatusValue = \"disabled\";\n-\n-          }\n-          print(\"Location service has been $serviceStatusValue\");\n-      });\n-    }\n-  }\n-\n-  void locationSendPause() {\n-      if( positionStreamSub != null) {\n-        positionStreamSub?.cancel();\n-        positionStreamSub = null;\n-        positionSteamStarted = false;\n-      }\n-  }\n-\n-  void locationSendStart() {\n-    if(positionSteamStarted) {\n-      return;\n-    }\n-\n-    locationChangeListening();\n-  }\n-\n-  Future<bool> handlePermission() async {\n-    bool serviceEnable;\n-    LocationPermission permission;\n-\n-    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n-\n-    if (!serviceEnable) {\n-      return false;\n-    }\n-\n-    permission = await geolocatorPlatform.checkPermission();\n-    if (permission == LocationPermission.denied) {\n-      permission = await geolocatorPlatform.requestPermission();\n-      if (permission == LocationPermission.denied) {\n-        return false;\n-      }\n-    }\n-\n-    if(permission == LocationPermission.deniedForever) {\n-      return false;\n-    }\n-\n-    return true;\n-  }\n-\n-  void locationChangeListening() {\n-      if( positionStreamSub == null ) {\n-        final positionStream = geolocatorPlatform.getPositionStream(\n-            locationSettings: const LocationSettings(\n-              accuracy: LocationAccuracy.bestForNavigation,\n-              distanceFilter: 15\n-            )\n-        );\n-\n-        positionStreamSub = positionStream.handleError( (error) {\n-\n-            positionStreamSub?.cancel();\n-            positionStreamSub = null;\n-\n-        } ).listen((position) {\n-            //Api Calling REST Api Calling\n-            lastLocation = position;\n-\n-            if(isSaveFileLocation && bookingId != 0) {\n-              try {\n-                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n-                 debugPrint(\"Save Location ---\");\n-              } catch (e) {\n-                debugPrint(e.toString());\n-              }\n-            }\n-            apiCallingLocationUpdate(position);\n-        });\n-      }\n-  }\n-\n-\n-  //TODO: ApiCall\n-\n-  void apiCallingLocationUpdate(Position pos) {\n-\n-      if(ServiceCall.userType != 2) {\n-        return;\n-      } \n-\n-      debugPrint(\" Driver Location sending api calling\");\n-\n-      ServiceCall.post( {\n-        \"latitude\": pos.latitude.toString(),\n-        \"longitude\": pos.longitude.toString(),\n-        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n-\n-          if(responseObj[KKey.status]  == \"1\" ) {\n-            debugPrint(\" Location send success\");\n-          }else{\n-            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n-          }\n-\n-      }, failure: (error) async {\n-            debugPrint(\" Location send fill : $error\");\n-      } );\n-  }\n-\n-  void startRideLocationSave(int bId, Position position) {\n-    bookingId = bId;\n-    \n-    try {\n-      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n-          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n-          mode: FileMode.append);\n-                \n-\n-          debugPrint(\"Save Location ---\");\n-          isSaveFileLocation = true;\n-    } catch (e) {\n-      debugPrint(e.toString());\n-    }\n-  }\n-\n-  void stopRideLocationSave(){\n-    isSaveFileLocation = false;\n-    bookingId = 0;\n-  }\n-\n-  Future<Directory> getSavePath() async {\n-    if (Platform.isAndroid) {\n-      return getTemporaryDirectory();\n-    }else{\n-      return getApplicationCacheDirectory();\n-    }\n-  }\n-\n-  String getRideSaveLocationJsonString(int bookingId) {\n-    try {\n-      \n-      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n-    } catch (e) {\n-      debugPrint(e.toString());\n-      return \"[]\";\n-    }\n-  }\n-}\n-import 'dart:async';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:geolocator/geolocator.dart';\n-import 'package:path_provider/path_provider.dart';\n-import 'package:taxi_driver/common/common_extension.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/common/service_call.dart';\n-import 'package:taxi_driver/common/socket_manager.dart';\n-\n-class LocationHelper {\n-  static final LocationHelper singleton = LocationHelper.internal();\n-  factory LocationHelper() => singleton;\n-  LocationHelper.internal();\n-  static LocationHelper shared() => singleton;\n-\n-  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n-\n-  StreamSubscription<Position>? positionStreamSub;\n-  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n-  bool positionSteamStarted = true;\n-\n-  Position? lastLocation;\n-  bool isSaveFileLocation = false;\n-  int bookingId = 0;\n-\n-  String saveFilePath = \"\";\n-\n-  void startInit() async {\n-    var isAccess = await handlePermission();\n-\n-    if(!isAccess) {\n-      return;\n-    }\n-\n-    saveFilePath =   (await getSavePath()).path;\n-\n-    if(serviceStatusStreamSub == null) {\n-      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n-      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n-\n-          serviceStatusStreamSub?.cancel();\n-          serviceStatusStreamSub = null;\n-\n-      } ).listen((serviceStatus) {\n-          String serviceStatusValue;\n-\n-          if(serviceStatus == ServiceStatus.enabled) {\n-            if(positionSteamStarted) { \n-              //Start Location Listen logic\n-              locationChangeListening();\n-            }\n-            serviceStatusValue = \"enabled\";\n-\n-          }else{\n-            if(positionStreamSub != null) {\n-              positionStreamSub?.cancel();\n-              positionStreamSub = null;\n-\n-              print(\"Position Stream han been canceled\");\n-            }\n-\n-            serviceStatusValue = \"disabled\";\n-\n-          }\n-          print(\"Location service has been $serviceStatusValue\");\n-      });\n-    }\n-  }\n-\n-  void locationSendPause() {\n-      if( positionStreamSub != null) {\n-        positionStreamSub?.cancel();\n-        positionStreamSub = null;\n-        positionSteamStarted = false;\n-      }\n-  }\n-\n-  void locationSendStart() {\n-    if(positionSteamStarted) {\n-      return;\n-    }\n-\n-    locationChangeListening();\n-  }\n-\n-  Future<bool> handlePermission() async {\n-    bool serviceEnable;\n-    LocationPermission permission;\n-\n-    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n-\n-    if (!serviceEnable) {\n-      return false;\n-    }\n-\n-    permission = await geolocatorPlatform.checkPermission();\n-    if (permission == LocationPermission.denied) {\n-      permission = await geolocatorPlatform.requestPermission();\n-      if (permission == LocationPermission.denied) {\n-        return false;\n-      }\n-    }\n-\n-    if(permission == LocationPermission.deniedForever) {\n-      return false;\n-    }\n-\n-    return true;\n-  }\n-\n-  void locationChangeListening() {\n-      if( positionStreamSub == null ) {\n-        final positionStream = geolocatorPlatform.getPositionStream(\n-            locationSettings: const LocationSettings(\n-              accuracy: LocationAccuracy.bestForNavigation,\n-              distanceFilter: 15\n-            )\n-        );\n-\n-        positionStreamSub = positionStream.handleError( (error) {\n-\n-            positionStreamSub?.cancel();\n-            positionStreamSub = null;\n-\n-        } ).listen((position) {\n-            //Api Calling REST Api Calling\n-            lastLocation = position;\n-\n-            if(isSaveFileLocation && bookingId != 0) {\n-              try {\n-                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n-                 debugPrint(\"Save Location ---\");\n-              } catch (e) {\n-                debugPrint(e.toString());\n-              }\n-            }\n-            apiCallingLocationUpdate(position);\n-        });\n-      }\n-  }\n-\n-\n-  //TODO: ApiCall\n-\n-  void apiCallingLocationUpdate(Position pos) {\n-\n-      if(ServiceCall.userType != 2) {\n-        return;\n-      } \n-\n-      debugPrint(\" Driver Location sending api calling\");\n-\n-      ServiceCall.post( {\n-        \"latitude\": pos.latitude.toString(),\n-        \"longitude\": pos.longitude.toString(),\n-        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n-      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n-\n-          if(responseObj[KKey.status]  == \"1\" ) {\n-            debugPrint(\" Location send success\");\n-          }else{\n-            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n-          }\n-\n-      }, failure: (error) async {\n-            debugPrint(\" Location send fill : $error\");\n-      } );\n-  }\n-\n-  void startRideLocationSave(int bId, Position position) {\n-    bookingId = bId;\n-    \n-    try {\n-      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n-          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n-          mode: FileMode.append);\n-                \n-\n-          debugPrint(\"Save Location ---\");\n-          isSaveFileLocation = true;\n-    } catch (e) {\n-      debugPrint(e.toString());\n-    }\n-  }\n-\n-  void stopRideLocationSave(){\n-    isSaveFileLocation = false;\n-    bookingId = 0;\n-  }\n-\n-  Future<Directory> getSavePath() async {\n-    if (Platform.isAndroid) {\n-      return getTemporaryDirectory();\n-    }else{\n-      return getApplicationCacheDirectory();\n-    }\n-  }\n-\n-  String getRideSaveLocationJsonString(int bookingId) {\n-    try {\n-      \n-      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n-    } catch (e) {\n-      debugPrint(e.toString());\n-      return \"[]\";\n-    }\n-  }\n-}\n-import 'package:flutter/material.dart';\n-import 'package:google_maps_flutter/google_maps_flutter.dart';\n-\n-class MapScreen extends StatefulWidget {\n-  @override\n-  _MapScreenState createState() => _MapScreenState();\n-}\n-\n-class _MapScreenState extends State<MapScreen> {\n-  GoogleMapController? _controller;\n-  final LatLng _initialPosition = LatLng(37.7749, -122.4194); // Example coordinates\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        title: Text('Google Map Example'),\n-      ),\n-      body: GoogleMap(\n-        initialCameraPosition: CameraPosition(\n-          target: _initialPosition,\n-          zoom: 10,\n-        ),\n-        onMapCreated: (GoogleMapController controller) {\n-          _controller = controller;\n-        },\n-        myLocationEnabled: true,\n-        myLocationButtonEnabled: true,\n-      ),\n-    );\n-  }\n-}\n"
                }
            ],
            "date": 1722774243448,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'dart:io';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:geolocator/geolocator.dart';\nimport 'package:path_provider/path_provider.dart';\nimport 'package:taxi_driver/common/common_extension.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:taxi_driver/common/service_call.dart';\nimport 'package:taxi_driver/common/socket_manager.dart';\n\nclass LocationHelper {\n  static final LocationHelper singleton = LocationHelper.internal();\n  factory LocationHelper() => singleton;\n  LocationHelper.internal();\n  static LocationHelper shared() => singleton;\n\n  final GeolocatorPlatform geolocatorPlatform = GeolocatorPlatform.instance;\n\n  StreamSubscription<Position>? positionStreamSub;\n  StreamSubscription<ServiceStatus>? serviceStatusStreamSub;\n  bool positionSteamStarted = true;\n\n  Position? lastLocation;\n  bool isSaveFileLocation = false;\n  int bookingId = 0;\n\n  String saveFilePath = \"\";\n\n  void startInit() async {\n    var isAccess = await handlePermission();\n\n    if(!isAccess) {\n      return;\n    }\n\n    saveFilePath =   (await getSavePath()).path;\n\n    if(serviceStatusStreamSub == null) {\n      final serviceStatusStream = geolocatorPlatform.getServiceStatusStream();\n      serviceStatusStreamSub = serviceStatusStream.handleError( (error) {\n\n          serviceStatusStreamSub?.cancel();\n          serviceStatusStreamSub = null;\n\n      } ).listen((serviceStatus) {\n          String serviceStatusValue;\n\n          if(serviceStatus == ServiceStatus.enabled) {\n            if(positionSteamStarted) { \n              //Start Location Listen logic\n              locationChangeListening();\n            }\n            serviceStatusValue = \"enabled\";\n\n          }else{\n            if(positionStreamSub != null) {\n              positionStreamSub?.cancel();\n              positionStreamSub = null;\n\n              print(\"Position Stream han been canceled\");\n            }\n\n            serviceStatusValue = \"disabled\";\n\n          }\n          print(\"Location service has been $serviceStatusValue\");\n      });\n    }\n  }\n\n  void locationSendPause() {\n      if( positionStreamSub != null) {\n        positionStreamSub?.cancel();\n        positionStreamSub = null;\n        positionSteamStarted = false;\n      }\n  }\n\n  void locationSendStart() {\n    if(positionSteamStarted) {\n      return;\n    }\n\n    locationChangeListening();\n  }\n\n  Future<bool> handlePermission() async {\n    bool serviceEnable;\n    LocationPermission permission;\n\n    serviceEnable = await geolocatorPlatform.isLocationServiceEnabled();\n\n    if (!serviceEnable) {\n      return false;\n    }\n\n    permission = await geolocatorPlatform.checkPermission();\n    if (permission == LocationPermission.denied) {\n      permission = await geolocatorPlatform.requestPermission();\n      if (permission == LocationPermission.denied) {\n        return false;\n      }\n    }\n\n    if(permission == LocationPermission.deniedForever) {\n      return false;\n    }\n\n    return true;\n  }\n\n  void locationChangeListening() {\n      if( positionStreamSub == null ) {\n        final positionStream = geolocatorPlatform.getPositionStream(\n            locationSettings: const LocationSettings(\n              accuracy: LocationAccuracy.bestForNavigation,\n              distanceFilter: 15\n            )\n        );\n\n        positionStreamSub = positionStream.handleError( (error) {\n\n            positionStreamSub?.cancel();\n            positionStreamSub = null;\n\n        } ).listen((position) {\n            //Api Calling REST Api Calling\n            lastLocation = position;\n\n            if(isSaveFileLocation && bookingId != 0) {\n              try {\n                File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(',{\"latitude\":${ position.latitude },\"longitude\":${ position.longitude },\"time\":\"${  DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\" ) }\"}', mode: FileMode.append );\n                 debugPrint(\"Save Location ---\");\n              } catch (e) {\n                debugPrint(e.toString());\n              }\n            }\n            apiCallingLocationUpdate(position);\n        });\n      }\n  }\n\n\n  //TODO: ApiCall\n\n  void apiCallingLocationUpdate(Position pos) {\n\n      if(ServiceCall.userType != 2) {\n        return;\n      } \n\n      debugPrint(\" Driver Location sending api calling\");\n\n      ServiceCall.post( {\n        \"latitude\": pos.latitude.toString(),\n        \"longitude\": pos.longitude.toString(),\n        \"socket_id\": SocketManager.shared.socket?.id ?? \"\"\n      }, SVKey.svUpdateLocationDriver, isTokenApi: true, withSuccess: (responseObj) async {\n\n          if(responseObj[KKey.status]  == \"1\" ) {\n            debugPrint(\" Location send success\");\n          }else{\n            debugPrint(\" Location send fill : ${  responseObj[KKey.message].toString() }\");\n          }\n\n      }, failure: (error) async {\n            debugPrint(\" Location send fill : $error\");\n      } );\n  }\n\n  void startRideLocationSave(int bId, Position position) {\n    bookingId = bId;\n    \n    try {\n      File(\"$saveFilePath/$bookingId.txt\").writeAsStringSync(\n          '{\"latitude\":${position.latitude},\"longitude\":${position.longitude},\"time\":\"${DateTime.now().stringFormat(format: \"yyyy-MM-dd HH:mm:ss\")}\"}',\n          mode: FileMode.append);\n                \n\n          debugPrint(\"Save Location ---\");\n          isSaveFileLocation = true;\n    } catch (e) {\n      debugPrint(e.toString());\n    }\n  }\n\n  void stopRideLocationSave(){\n    isSaveFileLocation = false;\n    bookingId = 0;\n  }\n\n  Future<Directory> getSavePath() async {\n    if (Platform.isAndroid) {\n      return getTemporaryDirectory();\n    }else{\n      return getApplicationCacheDirectory();\n    }\n  }\n\n  String getRideSaveLocationJsonString(int bookingId) {\n    try {\n      \n      return \"[${File(\"$saveFilePath/$bookingId.txt\").readAsStringSync()}]\";\n    } catch (e) {\n      debugPrint(e.toString());\n      return \"[]\";\n    }\n  }\n}\n"
        }
    ]
}