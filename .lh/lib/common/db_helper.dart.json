{
    "sourceFile": "lib/common/db_helper.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1722699182887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722853735012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'package:flutter/foundation.dart';\n import 'package:sqflite/sqflite.dart';\n-import 'package:path/path.dart';\n+import 'package:path/path.dart'; \n \n+\n class DBHelper {\n   static final DBHelper singleton = DBHelper.internal();\n   factory DBHelper() => singleton;\n   static Database? _db;\n@@ -117,4 +118,122 @@\n     var dbClient = await db;\n     return dbClient?.close();\n   }\n }\n+\n+\n+/*class DBHelper {\n+  static final DBHelper singleton = DBHelper.internal();\n+  factory DBHelper() => singleton;\n+  static Database? _db;\n+  DBHelper.internal();\n+  static DBHelper shared() => singleton;\n+\n+  static const String tbZoneList = 'zone_list';\n+  static const String tbServiceDetail = 'service_detail';\n+  static const String tbPriceDetail = 'price_detail';\n+  static const String tbDocument = 'document';\n+  static const String tbZoneDocument = 'zone_detail';\n+\n+  static const String zoneId = \"zone_id\";\n+  static const String zoneName = \"zone_name\";\n+  static const String zoneJson = \"zone_json\";\n+  static const String city = \"city\";\n+  static const String tax = \"tax\";\n+  static const String status = \"status\";\n+  static const String createdDate = \"created_date\";\n+  static const String modifyDate = \"modify_date\";\n+\n+  static const String serviceId = \"service_id\";\n+  static const String serviceName = \"service_name\";\n+  static const String seat = \"seat\";\n+  static const String color = \"color\";\n+  static const String icon = \"icon\";\n+  static const String topIcon = \"top_icon\";\n+  static const String gender = \"gender\";\n+  static const String description = \"description\";\n+\n+  static const String priceId = \"price_id\";\n+  static const String baseCharge = \"base_charge\";\n+  static const String perKmCharge = \"per_km_charge\";\n+  static const String perMinCharge = \"per_min_charge\";\n+  static const String bookingCharge = \"booking_charge\";\n+  static const String miniFair = \"mini_fair\";\n+  static const String miniKm = \"mini_km\";\n+  static const String cancelCharge = \"cancel_charge\";\n+\n+  static const String docId = \"doc_id\";\n+  static const String name = \"name\";\n+  static const String type = \"type\";\n+\n+  static const String zoneDocId = \"zone_doc_id\";\n+  static const String personalDoc = \"personal_doc\";\n+  static const String carDoc = \"car_doc\";\n+  static const String requiredPersonalDoc = \"required_personal_doc\";\n+  static const String requiredCarDoc = \"required_car_doc\";\n+\n+  Future<Database?> get db async {\n+    if (_db != null) {\n+      return _db;\n+    }\n+    _db = await initDB();\n+\n+    return _db;\n+  }\n+\n+  initDB() async {\n+    String databasePath = await getDatabasesPath();\n+    String path = join(databasePath, 'data.db');\n+    var isDBExists = await databaseExists(path);\n+    if (kDebugMode) {\n+      print(isDBExists);\n+      print(path);\n+    }\n+    return await openDatabase(path, version: 1, onCreate: onCreate);\n+  }\n+\n+  void onCreate(Database db, int newVersion) async {\n+   \n+\n+    await db.execute(\n+        'CREATE TABLE $tbZoneList ($zoneId TEXT PRIMARY KEY, $zoneName TEXT, $zoneJson TEXT, $city TEXT, $tax TEXT, $status Text, $createdDate Text, $modifyDate Text)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbServiceDetail ($serviceId TEXT PRIMARY KEY, $serviceName TEXT, $seat TEXT, $color TEXT, $icon TEXT, $topIcon TEXT, $gender TEXT, $description TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbPriceDetail ($priceId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $baseCharge TEXT, $perKmCharge TEXT, $perMinCharge TEXT,$bookingCharge TEXT,$miniFair TEXT,$miniKm TEXT,$cancelCharge TEXT, $tax TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbDocument ($docId TEXT PRIMARY KEY, $name TEXT, $type TEXT,$status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbZoneDocument ($zoneDocId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $personalDoc TEXT, $carDoc TEXT, $requiredPersonalDoc TEXT, $requiredCarDoc TEXT,  $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+     debugPrint(\"db create table\");\n+  }\n+\n+  static Future dbClearAll() async {\n+    if(_db == null) {\n+      return;\n+    }\n+\n+    await _db?.execute('DELETE FROM $tbZoneList');\n+    await _db?.execute('DELETE FROM $tbServiceDetail');\n+    await _db?.execute('DELETE FROM $tbPriceDetail');\n+    await _db?.execute('DELETE FROM $tbDocument');\n+    await _db?.execute('DELETE FROM $tbZoneDocument');\n+  }\n+\n+  static Future dbClearTable(String table) async {\n+     if (_db == null) {\n+      return;\n+    }\n+\n+    await _db?.execute('DELETE FROM $table');\n+  }\n+\n+  Future close() async {\n+    var dbClient = await db;\n+    return dbClient?.close();\n+  }\n+}*/\n"
                },
                {
                    "date": 1725462637550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:sqflite/sqflite.dart';\n+import 'package:path/path.dart'; \n+\n+\n+class DBHelper {\n+  static final DBHelper singleton = DBHelper.internal();\n+  factory DBHelper() => singleton;\n+  static Database? _db;\n+  DBHelper.internal();\n+  static DBHelper shared() => singleton;\n+\n+  static const String tbZoneList = 'zone_list';\n+  static const String tbServiceDetail = 'service_detail';\n+  static const String tbPriceDetail = 'price_detail';\n+  static const String tbDocument = 'document';\n+  static const String tbZoneDocument = 'zone_detail';\n+\n+  static const String zoneId = \"zone_id\";\n+  static const String zoneName = \"zone_name\";\n+  static const String zoneJson = \"zone_json\";\n+  static const String city = \"city\";\n+  static const String tax = \"tax\";\n+  static const String status = \"status\";\n+  static const String createdDate = \"created_date\";\n+  static const String modifyDate = \"modify_date\";\n+\n+  static const String serviceId = \"service_id\";\n+  static const String serviceName = \"service_name\";\n+  static const String seat = \"seat\";\n+  static const String color = \"color\";\n+  static const String icon = \"icon\";\n+  static const String topIcon = \"top_icon\";\n+  static const String gender = \"gender\";\n+  static const String description = \"description\";\n+\n+  static const String priceId = \"price_id\";\n+  static const String baseCharge = \"base_charge\";\n+  static const String perKmCharge = \"per_km_charge\";\n+  static const String perMinCharge = \"per_min_charge\";\n+  static const String bookingCharge = \"booking_charge\";\n+  static const String miniFair = \"mini_fair\";\n+  static const String miniKm = \"mini_km\";\n+  static const String cancelCharge = \"cancel_charge\";\n+\n+  static const String docId = \"doc_id\";\n+  static const String name = \"name\";\n+  static const String type = \"type\";\n+\n+  static const String zoneDocId = \"zone_doc_id\";\n+  static const String personalDoc = \"personal_doc\";\n+  static const String carDoc = \"car_doc\";\n+  static const String requiredPersonalDoc = \"required_personal_doc\";\n+  static const String requiredCarDoc = \"required_car_doc\";\n+\n+  Future<Database?> get db async {\n+    if (_db != null) {\n+      return _db;\n+    }\n+    _db = await initDB();\n+\n+    return _db;\n+  }\n+\n+  initDB() async {\n+    String databasePath = await getDatabasesPath();\n+    String path = join(databasePath, 'data.db');\n+    var isDBExists = await databaseExists(path);\n+    if (kDebugMode) {\n+      print(isDBExists);\n+      print(path);\n+    }\n+    return await openDatabase(path, version: 1, onCreate: onCreate);\n+  }\n+\n+  void onCreate(Database db, int newVersion) async {\n+   \n+\n+    await db.execute(\n+        'CREATE TABLE $tbZoneList ($zoneId TEXT PRIMARY KEY, $zoneName TEXT, $zoneJson TEXT, $city TEXT, $tax TEXT, $status Text, $createdDate Text, $modifyDate Text)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbServiceDetail ($serviceId TEXT PRIMARY KEY, $serviceName TEXT, $seat TEXT, $color TEXT, $icon TEXT, $topIcon TEXT, $gender TEXT, $description TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbPriceDetail ($priceId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $baseCharge TEXT, $perKmCharge TEXT, $perMinCharge TEXT,$bookingCharge TEXT,$miniFair TEXT,$miniKm TEXT,$cancelCharge TEXT, $tax TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbDocument ($docId TEXT PRIMARY KEY, $name TEXT, $type TEXT,$status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbZoneDocument ($zoneDocId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $personalDoc TEXT, $carDoc TEXT, $requiredPersonalDoc TEXT, $requiredCarDoc TEXT,  $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+     debugPrint(\"db create table\");\n+  }\n+\n+  static Future dbClearAll() async {\n+    if(_db == null) {\n+      return;\n+    }\n+\n+    await _db?.execute('DELETE FROM $tbZoneList');\n+    await _db?.execute('DELETE FROM $tbServiceDetail');\n+    await _db?.execute('DELETE FROM $tbPriceDetail');\n+    await _db?.execute('DELETE FROM $tbDocument');\n+    await _db?.execute('DELETE FROM $tbZoneDocument');\n+  }\n+\n+  static Future dbClearTable(String table) async {\n+     if (_db == null) {\n+      return;\n+    }\n+\n+    await _db?.execute('DELETE FROM $table');\n+  }\n+\n+  Future close() async {\n+    var dbClient = await db;\n+    return dbClient?.close();\n+  }\n+}\n+\n+\n"
                },
                {
                    "date": 1725804106995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import 'package:flutter/foundation.dart';\n+import 'package:sqflite/sqflite.dart';\n+import 'package:path/path.dart';\n+\n+class DBHelper {\n+  static final DBHelper singleton = DBHelper.internal();\n+  factory DBHelper() => singleton;\n+  static Database? _db;\n+  DBHelper.internal();\n+  static DBHelper shared() => singleton;\n+\n+  static const String tbZoneList = 'zone_list';\n+  static const String tbServiceDetail = 'service_detail';\n+  static const String tbPriceDetail = 'price_detail';\n+  static const String tbDocument = 'document';\n+  static const String tbZoneDocument = 'zone_detail';\n+\n+  static const String zoneId = \"zone_id\";\n+  static const String zoneName = \"zone_name\";\n+  static const String zoneJson = \"zone_json\";\n+  static const String city = \"city\";\n+  static const String tax = \"tax\";\n+  static const String status = \"status\";\n+  static const String createdDate = \"created_date\";\n+  static const String modifyDate = \"modify_date\";\n+\n+  static const String serviceId = \"service_id\";\n+  static const String serviceName = \"service_name\";\n+  static const String seat = \"seat\";\n+  static const String color = \"color\";\n+  static const String icon = \"icon\";\n+  static const String topIcon = \"top_icon\";\n+  static const String gender = \"gender\";\n+  static const String description = \"description\";\n+\n+  static const String priceId = \"price_id\";\n+  static const String baseCharge = \"base_charge\";\n+  static const String perKmCharge = \"per_km_charge\";\n+  static const String perMinCharge = \"per_min_charge\";\n+  static const String bookingCharge = \"booking_charge\";\n+  static const String miniFair = \"mini_fair\";\n+  static const String miniKm = \"mini_km\";\n+  static const String cancelCharge = \"cancel_charge\";\n+\n+  static const String docId = \"doc_id\";\n+  static const String name = \"name\";\n+  static const String type = \"type\";\n+\n+  static const String zoneDocId = \"zone_doc_id\";\n+  static const String personalDoc = \"personal_doc\";\n+  static const String carDoc = \"car_doc\";\n+  static const String requiredPersonalDoc = \"required_personal_doc\";\n+  static const String requiredCarDoc = \"required_car_doc\";\n+\n+  Future<Database?> get db async {\n+    if (_db != null) {\n+      return _db;\n+    }\n+    _db = await initDB();\n+\n+    return _db;\n+  }\n+\n+  initDB() async {\n+    String databasePath = await getDatabasesPath();\n+    String path = join(databasePath, 'data.db');\n+    var isDBExists = await databaseExists(path);\n+    if (kDebugMode) {\n+      print(isDBExists);\n+      print(path);\n+    }\n+    return await openDatabase(path, version: 1, onCreate: onCreate);\n+  }\n+\n+  void onCreate(Database db, int newVersion) async {\n+   \n+\n+    await db.execute(\n+        'CREATE TABLE $tbZoneList ($zoneId TEXT PRIMARY KEY, $zoneName TEXT, $zoneJson TEXT, $city TEXT, $tax TEXT, $status Text, $createdDate Text, $modifyDate Text)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbServiceDetail ($serviceId TEXT PRIMARY KEY, $serviceName TEXT, $seat TEXT, $color TEXT, $icon TEXT, $topIcon TEXT, $gender TEXT, $description TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbPriceDetail ($priceId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $baseCharge TEXT, $perKmCharge TEXT, $perMinCharge TEXT,$bookingCharge TEXT,$miniFair TEXT,$miniKm TEXT,$cancelCharge TEXT, $tax TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbDocument ($docId TEXT PRIMARY KEY, $name TEXT, $type TEXT,$status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+    await db.execute(\n+        'CREATE TABLE $tbZoneDocument ($zoneDocId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $personalDoc TEXT, $carDoc TEXT, $requiredPersonalDoc TEXT, $requiredCarDoc TEXT,  $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n+\n+     debugPrint(\"db create table\");\n+  }\n+\n+  static Future dbClearAll() async {\n+    if(_db == null) {\n+      return;\n+    }\n+\n+    await _db?.execute('DELETE FROM $tbZoneList');\n+    await _db?.execute('DELETE FROM $tbServiceDetail');\n+    await _db?.execute('DELETE FROM $tbPriceDetail');\n+    await _db?.execute('DELETE FROM $tbDocument');\n+    await _db?.execute('DELETE FROM $tbZoneDocument');\n+  }\n+\n+  static Future dbClearTable(String table) async {\n+     if (_db == null) {\n+      return;\n+    }\n+\n+    await _db?.execute('DELETE FROM $table');\n+  }\n+\n+  Future close() async {\n+    var dbClient = await db;\n+    return dbClient?.close();\n+  }\n+}\n"
                },
                {
                    "date": 1726045259532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,366 +117,4 @@\n     var dbClient = await db;\n     return dbClient?.close();\n   }\n }\n-import 'package:flutter/foundation.dart';\n-import 'package:sqflite/sqflite.dart';\n-import 'package:path/path.dart'; \n-\n-\n-class DBHelper {\n-  static final DBHelper singleton = DBHelper.internal();\n-  factory DBHelper() => singleton;\n-  static Database? _db;\n-  DBHelper.internal();\n-  static DBHelper shared() => singleton;\n-\n-  static const String tbZoneList = 'zone_list';\n-  static const String tbServiceDetail = 'service_detail';\n-  static const String tbPriceDetail = 'price_detail';\n-  static const String tbDocument = 'document';\n-  static const String tbZoneDocument = 'zone_detail';\n-\n-  static const String zoneId = \"zone_id\";\n-  static const String zoneName = \"zone_name\";\n-  static const String zoneJson = \"zone_json\";\n-  static const String city = \"city\";\n-  static const String tax = \"tax\";\n-  static const String status = \"status\";\n-  static const String createdDate = \"created_date\";\n-  static const String modifyDate = \"modify_date\";\n-\n-  static const String serviceId = \"service_id\";\n-  static const String serviceName = \"service_name\";\n-  static const String seat = \"seat\";\n-  static const String color = \"color\";\n-  static const String icon = \"icon\";\n-  static const String topIcon = \"top_icon\";\n-  static const String gender = \"gender\";\n-  static const String description = \"description\";\n-\n-  static const String priceId = \"price_id\";\n-  static const String baseCharge = \"base_charge\";\n-  static const String perKmCharge = \"per_km_charge\";\n-  static const String perMinCharge = \"per_min_charge\";\n-  static const String bookingCharge = \"booking_charge\";\n-  static const String miniFair = \"mini_fair\";\n-  static const String miniKm = \"mini_km\";\n-  static const String cancelCharge = \"cancel_charge\";\n-\n-  static const String docId = \"doc_id\";\n-  static const String name = \"name\";\n-  static const String type = \"type\";\n-\n-  static const String zoneDocId = \"zone_doc_id\";\n-  static const String personalDoc = \"personal_doc\";\n-  static const String carDoc = \"car_doc\";\n-  static const String requiredPersonalDoc = \"required_personal_doc\";\n-  static const String requiredCarDoc = \"required_car_doc\";\n-\n-  Future<Database?> get db async {\n-    if (_db != null) {\n-      return _db;\n-    }\n-    _db = await initDB();\n-\n-    return _db;\n-  }\n-\n-  initDB() async {\n-    String databasePath = await getDatabasesPath();\n-    String path = join(databasePath, 'data.db');\n-    var isDBExists = await databaseExists(path);\n-    if (kDebugMode) {\n-      print(isDBExists);\n-      print(path);\n-    }\n-    return await openDatabase(path, version: 1, onCreate: onCreate);\n-  }\n-\n-  void onCreate(Database db, int newVersion) async {\n-   \n-\n-    await db.execute(\n-        'CREATE TABLE $tbZoneList ($zoneId TEXT PRIMARY KEY, $zoneName TEXT, $zoneJson TEXT, $city TEXT, $tax TEXT, $status Text, $createdDate Text, $modifyDate Text)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbServiceDetail ($serviceId TEXT PRIMARY KEY, $serviceName TEXT, $seat TEXT, $color TEXT, $icon TEXT, $topIcon TEXT, $gender TEXT, $description TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbPriceDetail ($priceId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $baseCharge TEXT, $perKmCharge TEXT, $perMinCharge TEXT,$bookingCharge TEXT,$miniFair TEXT,$miniKm TEXT,$cancelCharge TEXT, $tax TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbDocument ($docId TEXT PRIMARY KEY, $name TEXT, $type TEXT,$status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbZoneDocument ($zoneDocId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $personalDoc TEXT, $carDoc TEXT, $requiredPersonalDoc TEXT, $requiredCarDoc TEXT,  $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-     debugPrint(\"db create table\");\n-  }\n-\n-  static Future dbClearAll() async {\n-    if(_db == null) {\n-      return;\n-    }\n-\n-    await _db?.execute('DELETE FROM $tbZoneList');\n-    await _db?.execute('DELETE FROM $tbServiceDetail');\n-    await _db?.execute('DELETE FROM $tbPriceDetail');\n-    await _db?.execute('DELETE FROM $tbDocument');\n-    await _db?.execute('DELETE FROM $tbZoneDocument');\n-  }\n-\n-  static Future dbClearTable(String table) async {\n-     if (_db == null) {\n-      return;\n-    }\n-\n-    await _db?.execute('DELETE FROM $table');\n-  }\n-\n-  Future close() async {\n-    var dbClient = await db;\n-    return dbClient?.close();\n-  }\n-}\n-\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:sqflite/sqflite.dart';\n-import 'package:path/path.dart'; \n-\n-\n-class DBHelper {\n-  static final DBHelper singleton = DBHelper.internal();\n-  factory DBHelper() => singleton;\n-  static Database? _db;\n-  DBHelper.internal();\n-  static DBHelper shared() => singleton;\n-\n-  static const String tbZoneList = 'zone_list';\n-  static const String tbServiceDetail = 'service_detail';\n-  static const String tbPriceDetail = 'price_detail';\n-  static const String tbDocument = 'document';\n-  static const String tbZoneDocument = 'zone_detail';\n-\n-  static const String zoneId = \"zone_id\";\n-  static const String zoneName = \"zone_name\";\n-  static const String zoneJson = \"zone_json\";\n-  static const String city = \"city\";\n-  static const String tax = \"tax\";\n-  static const String status = \"status\";\n-  static const String createdDate = \"created_date\";\n-  static const String modifyDate = \"modify_date\";\n-\n-  static const String serviceId = \"service_id\";\n-  static const String serviceName = \"service_name\";\n-  static const String seat = \"seat\";\n-  static const String color = \"color\";\n-  static const String icon = \"icon\";\n-  static const String topIcon = \"top_icon\";\n-  static const String gender = \"gender\";\n-  static const String description = \"description\";\n-\n-  static const String priceId = \"price_id\";\n-  static const String baseCharge = \"base_charge\";\n-  static const String perKmCharge = \"per_km_charge\";\n-  static const String perMinCharge = \"per_min_charge\";\n-  static const String bookingCharge = \"booking_charge\";\n-  static const String miniFair = \"mini_fair\";\n-  static const String miniKm = \"mini_km\";\n-  static const String cancelCharge = \"cancel_charge\";\n-\n-  static const String docId = \"doc_id\";\n-  static const String name = \"name\";\n-  static const String type = \"type\";\n-\n-  static const String zoneDocId = \"zone_doc_id\";\n-  static const String personalDoc = \"personal_doc\";\n-  static const String carDoc = \"car_doc\";\n-  static const String requiredPersonalDoc = \"required_personal_doc\";\n-  static const String requiredCarDoc = \"required_car_doc\";\n-\n-  Future<Database?> get db async {\n-    if (_db != null) {\n-      return _db;\n-    }\n-    _db = await initDB();\n-\n-    return _db;\n-  }\n-\n-  initDB() async {\n-    String databasePath = await getDatabasesPath();\n-    String path = join(databasePath, 'data.db');\n-    var isDBExists = await databaseExists(path);\n-    if (kDebugMode) {\n-      print(isDBExists);\n-      print(path);\n-    }\n-    return await openDatabase(path, version: 1, onCreate: onCreate);\n-  }\n-\n-  void onCreate(Database db, int newVersion) async {\n-   \n-\n-    await db.execute(\n-        'CREATE TABLE $tbZoneList ($zoneId TEXT PRIMARY KEY, $zoneName TEXT, $zoneJson TEXT, $city TEXT, $tax TEXT, $status Text, $createdDate Text, $modifyDate Text)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbServiceDetail ($serviceId TEXT PRIMARY KEY, $serviceName TEXT, $seat TEXT, $color TEXT, $icon TEXT, $topIcon TEXT, $gender TEXT, $description TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbPriceDetail ($priceId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $baseCharge TEXT, $perKmCharge TEXT, $perMinCharge TEXT,$bookingCharge TEXT,$miniFair TEXT,$miniKm TEXT,$cancelCharge TEXT, $tax TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbDocument ($docId TEXT PRIMARY KEY, $name TEXT, $type TEXT,$status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbZoneDocument ($zoneDocId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $personalDoc TEXT, $carDoc TEXT, $requiredPersonalDoc TEXT, $requiredCarDoc TEXT,  $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-     debugPrint(\"db create table\");\n-  }\n-\n-  static Future dbClearAll() async {\n-    if(_db == null) {\n-      return;\n-    }\n-\n-    await _db?.execute('DELETE FROM $tbZoneList');\n-    await _db?.execute('DELETE FROM $tbServiceDetail');\n-    await _db?.execute('DELETE FROM $tbPriceDetail');\n-    await _db?.execute('DELETE FROM $tbDocument');\n-    await _db?.execute('DELETE FROM $tbZoneDocument');\n-  }\n-\n-  static Future dbClearTable(String table) async {\n-     if (_db == null) {\n-      return;\n-    }\n-\n-    await _db?.execute('DELETE FROM $table');\n-  }\n-\n-  Future close() async {\n-    var dbClient = await db;\n-    return dbClient?.close();\n-  }\n-}\n-\n-\n-/*class DBHelper {\n-  static final DBHelper singleton = DBHelper.internal();\n-  factory DBHelper() => singleton;\n-  static Database? _db;\n-  DBHelper.internal();\n-  static DBHelper shared() => singleton;\n-\n-  static const String tbZoneList = 'zone_list';\n-  static const String tbServiceDetail = 'service_detail';\n-  static const String tbPriceDetail = 'price_detail';\n-  static const String tbDocument = 'document';\n-  static const String tbZoneDocument = 'zone_detail';\n-\n-  static const String zoneId = \"zone_id\";\n-  static const String zoneName = \"zone_name\";\n-  static const String zoneJson = \"zone_json\";\n-  static const String city = \"city\";\n-  static const String tax = \"tax\";\n-  static const String status = \"status\";\n-  static const String createdDate = \"created_date\";\n-  static const String modifyDate = \"modify_date\";\n-\n-  static const String serviceId = \"service_id\";\n-  static const String serviceName = \"service_name\";\n-  static const String seat = \"seat\";\n-  static const String color = \"color\";\n-  static const String icon = \"icon\";\n-  static const String topIcon = \"top_icon\";\n-  static const String gender = \"gender\";\n-  static const String description = \"description\";\n-\n-  static const String priceId = \"price_id\";\n-  static const String baseCharge = \"base_charge\";\n-  static const String perKmCharge = \"per_km_charge\";\n-  static const String perMinCharge = \"per_min_charge\";\n-  static const String bookingCharge = \"booking_charge\";\n-  static const String miniFair = \"mini_fair\";\n-  static const String miniKm = \"mini_km\";\n-  static const String cancelCharge = \"cancel_charge\";\n-\n-  static const String docId = \"doc_id\";\n-  static const String name = \"name\";\n-  static const String type = \"type\";\n-\n-  static const String zoneDocId = \"zone_doc_id\";\n-  static const String personalDoc = \"personal_doc\";\n-  static const String carDoc = \"car_doc\";\n-  static const String requiredPersonalDoc = \"required_personal_doc\";\n-  static const String requiredCarDoc = \"required_car_doc\";\n-\n-  Future<Database?> get db async {\n-    if (_db != null) {\n-      return _db;\n-    }\n-    _db = await initDB();\n-\n-    return _db;\n-  }\n-\n-  initDB() async {\n-    String databasePath = await getDatabasesPath();\n-    String path = join(databasePath, 'data.db');\n-    var isDBExists = await databaseExists(path);\n-    if (kDebugMode) {\n-      print(isDBExists);\n-      print(path);\n-    }\n-    return await openDatabase(path, version: 1, onCreate: onCreate);\n-  }\n-\n-  void onCreate(Database db, int newVersion) async {\n-   \n-\n-    await db.execute(\n-        'CREATE TABLE $tbZoneList ($zoneId TEXT PRIMARY KEY, $zoneName TEXT, $zoneJson TEXT, $city TEXT, $tax TEXT, $status Text, $createdDate Text, $modifyDate Text)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbServiceDetail ($serviceId TEXT PRIMARY KEY, $serviceName TEXT, $seat TEXT, $color TEXT, $icon TEXT, $topIcon TEXT, $gender TEXT, $description TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbPriceDetail ($priceId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $baseCharge TEXT, $perKmCharge TEXT, $perMinCharge TEXT,$bookingCharge TEXT,$miniFair TEXT,$miniKm TEXT,$cancelCharge TEXT, $tax TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbDocument ($docId TEXT PRIMARY KEY, $name TEXT, $type TEXT,$status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-    await db.execute(\n-        'CREATE TABLE $tbZoneDocument ($zoneDocId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $personalDoc TEXT, $carDoc TEXT, $requiredPersonalDoc TEXT, $requiredCarDoc TEXT,  $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n-\n-     debugPrint(\"db create table\");\n-  }\n-\n-  static Future dbClearAll() async {\n-    if(_db == null) {\n-      return;\n-    }\n-\n-    await _db?.execute('DELETE FROM $tbZoneList');\n-    await _db?.execute('DELETE FROM $tbServiceDetail');\n-    await _db?.execute('DELETE FROM $tbPriceDetail');\n-    await _db?.execute('DELETE FROM $tbDocument');\n-    await _db?.execute('DELETE FROM $tbZoneDocument');\n-  }\n-\n-  static Future dbClearTable(String table) async {\n-     if (_db == null) {\n-      return;\n-    }\n-\n-    await _db?.execute('DELETE FROM $table');\n-  }\n-\n-  Future close() async {\n-    var dbClient = await db;\n-    return dbClient?.close();\n-  }\n-}*/\n"
                }
            ],
            "date": 1722699182887,
            "name": "Commit-0",
            "content": "import 'package:flutter/foundation.dart';\nimport 'package:sqflite/sqflite.dart';\nimport 'package:path/path.dart';\n\nclass DBHelper {\n  static final DBHelper singleton = DBHelper.internal();\n  factory DBHelper() => singleton;\n  static Database? _db;\n  DBHelper.internal();\n  static DBHelper shared() => singleton;\n\n  static const String tbZoneList = 'zone_list';\n  static const String tbServiceDetail = 'service_detail';\n  static const String tbPriceDetail = 'price_detail';\n  static const String tbDocument = 'document';\n  static const String tbZoneDocument = 'zone_detail';\n\n  static const String zoneId = \"zone_id\";\n  static const String zoneName = \"zone_name\";\n  static const String zoneJson = \"zone_json\";\n  static const String city = \"city\";\n  static const String tax = \"tax\";\n  static const String status = \"status\";\n  static const String createdDate = \"created_date\";\n  static const String modifyDate = \"modify_date\";\n\n  static const String serviceId = \"service_id\";\n  static const String serviceName = \"service_name\";\n  static const String seat = \"seat\";\n  static const String color = \"color\";\n  static const String icon = \"icon\";\n  static const String topIcon = \"top_icon\";\n  static const String gender = \"gender\";\n  static const String description = \"description\";\n\n  static const String priceId = \"price_id\";\n  static const String baseCharge = \"base_charge\";\n  static const String perKmCharge = \"per_km_charge\";\n  static const String perMinCharge = \"per_min_charge\";\n  static const String bookingCharge = \"booking_charge\";\n  static const String miniFair = \"mini_fair\";\n  static const String miniKm = \"mini_km\";\n  static const String cancelCharge = \"cancel_charge\";\n\n  static const String docId = \"doc_id\";\n  static const String name = \"name\";\n  static const String type = \"type\";\n\n  static const String zoneDocId = \"zone_doc_id\";\n  static const String personalDoc = \"personal_doc\";\n  static const String carDoc = \"car_doc\";\n  static const String requiredPersonalDoc = \"required_personal_doc\";\n  static const String requiredCarDoc = \"required_car_doc\";\n\n  Future<Database?> get db async {\n    if (_db != null) {\n      return _db;\n    }\n    _db = await initDB();\n\n    return _db;\n  }\n\n  initDB() async {\n    String databasePath = await getDatabasesPath();\n    String path = join(databasePath, 'data.db');\n    var isDBExists = await databaseExists(path);\n    if (kDebugMode) {\n      print(isDBExists);\n      print(path);\n    }\n    return await openDatabase(path, version: 1, onCreate: onCreate);\n  }\n\n  void onCreate(Database db, int newVersion) async {\n   \n\n    await db.execute(\n        'CREATE TABLE $tbZoneList ($zoneId TEXT PRIMARY KEY, $zoneName TEXT, $zoneJson TEXT, $city TEXT, $tax TEXT, $status Text, $createdDate Text, $modifyDate Text)');\n\n    await db.execute(\n        'CREATE TABLE $tbServiceDetail ($serviceId TEXT PRIMARY KEY, $serviceName TEXT, $seat TEXT, $color TEXT, $icon TEXT, $topIcon TEXT, $gender TEXT, $description TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n\n    await db.execute(\n        'CREATE TABLE $tbPriceDetail ($priceId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $baseCharge TEXT, $perKmCharge TEXT, $perMinCharge TEXT,$bookingCharge TEXT,$miniFair TEXT,$miniKm TEXT,$cancelCharge TEXT, $tax TEXT, $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n\n    await db.execute(\n        'CREATE TABLE $tbDocument ($docId TEXT PRIMARY KEY, $name TEXT, $type TEXT,$status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n\n    await db.execute(\n        'CREATE TABLE $tbZoneDocument ($zoneDocId TEXT PRIMARY KEY, $zoneId TEXT, $serviceId TEXT, $personalDoc TEXT, $carDoc TEXT, $requiredPersonalDoc TEXT, $requiredCarDoc TEXT,  $status TEXT, $createdDate TEXT, $modifyDate TEXT)');\n\n     debugPrint(\"db create table\");\n  }\n\n  static Future dbClearAll() async {\n    if(_db == null) {\n      return;\n    }\n\n    await _db?.execute('DELETE FROM $tbZoneList');\n    await _db?.execute('DELETE FROM $tbServiceDetail');\n    await _db?.execute('DELETE FROM $tbPriceDetail');\n    await _db?.execute('DELETE FROM $tbDocument');\n    await _db?.execute('DELETE FROM $tbZoneDocument');\n  }\n\n  static Future dbClearTable(String table) async {\n     if (_db == null) {\n      return;\n    }\n\n    await _db?.execute('DELETE FROM $table');\n  }\n\n  Future close() async {\n    var dbClient = await db;\n    return dbClient?.close();\n  }\n}\n"
        }
    ]
}