{
    "sourceFile": "lib/common/service_call.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1720706183504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720717946620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n \n \n \n import 'dart:convert';\n+import 'dart:io';\n \n import 'package:flutter/foundation.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:http/http.dart' as http;\n+import 'package:path/path.dart' as pth;\n \n typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n typedef ResFailure = Future<void> Function(dynamic);\n \n@@ -26,10 +28,10 @@\n       try {\n         var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n \n         if (isTokenApi) {\n-         var token = Globs.udValueString (\"token\") ;\n-         headers[\"acess_token\"] = token;\n+        \n+         headers[\"acess_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n         }\n \n         http.post(Uri.parse(path), body: parameter, headers: headers)\n         .then((value) {\n@@ -56,5 +58,66 @@\n       }\n     });\n   }\n \n+\n+\n+static void multipart(Map<String, String> parameter, String path,\n+      {bool isTokenApi = false,\n+      Map<String, File>? imgObj,\n+      ResSuccess? withSuccess,\n+      ResFailure? failure}) {\n+    Future(() {\n+      try {\n+        var uri = Uri.parse(path);\n+        var request = http.MultipartRequest('POST', uri);\n+        request.fields.addAll(parameter);\n+\n+        if (isTokenApi) {\n+          request.headers\n+              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n+        }\n+\n+        if (kDebugMode) {\n+          print('Service Call: $path');\n+          print('Service para: ${parameter.toString()}');\n+          print('Service header: ${request.headers.toString()}');\n+        }\n+\n+        if (imgObj != null) {\n+          imgObj.forEach((key, value) async {\n+            var multipartFile = http.MultipartFile(\n+                key, value.readAsBytes().asStream(), value.lengthSync(),\n+                filename: pth.basename(value.path));\n+            request.files.add(multipartFile);\n+          });\n+        }\n+\n+        request.send().then((response) async {\n+          var value = await response.stream.transform(utf8.decoder).join();\n+\n+          try {\n+            if (kDebugMode) {\n+              print(value);\n+            }\n+\n+            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) {\n+              withSuccess(jsonObj);\n+            }\n+\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+          \n+        }).catchError((err) {\n+          if (failure != null) failure(err.toString());\n+        });\n+      } on SocketException catch (e) {\n+        if (failure != null) failure(e.toString());\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722433802528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,123 @@\n+\n+\n+\n+import 'dart:convert';\n+import 'dart:io';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:http/http.dart' as http;\n+import 'package:path/path.dart' as pth;\n+\n+typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n+typedef ResFailure = Future<void> Function(dynamic);\n+\n+\n+class ServiceCall {\n+  static Map userObj = {};\n+  static int userType = 1;\n+\n+  static void post(\n+    Map<String, dynamic> parameter,\n+    String path, {\n+    bool isTokenApi = false,\n+    ResSuccess? withSuccess,\n+    ResFailure? failure,\n+  }) {\n+    Future(() {\n+      try {\n+        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n+\n+        if (isTokenApi) {\n+        \n+         headers[\"acess_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n+        }\n+\n+        http.post(Uri.parse(path), body: parameter, headers: headers)\n+        .then((value) {\n+          \n+          if(kDebugMode) {\n+            print(value.body);\n+          }\n+\n+          try {\n+            var jsonObj = json.decode(value.body) as Map<String, dynamic>? ?? {};\n+\n+            if(withSuccess != null) withSuccess(jsonObj);\n+            \n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+          \n+         \n+        }).catchError((e) {\n+          if (failure != null) failure(e.toString());\n+        });\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+\n+\n+static void multipart(Map<String, String> parameter, String path,\n+      {bool isTokenApi = false,\n+      Map<String, File>? imgObj,\n+      ResSuccess? withSuccess,\n+      ResFailure? failure}) {\n+    Future(() {\n+      try {\n+        var uri = Uri.parse(path);\n+        var request = http.MultipartRequest('POST', uri);\n+        request.fields.addAll(parameter);\n+\n+        if (isTokenApi) {\n+          request.headers\n+              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n+        }\n+\n+        if (kDebugMode) {\n+          print('Service Call: $path');\n+          print('Service para: ${parameter.toString()}');\n+          print('Service header: ${request.headers.toString()}');\n+        }\n+\n+        if (imgObj != null) {\n+          imgObj.forEach((key, value) async {\n+            var multipartFile = http.MultipartFile(\n+                key, value.readAsBytes().asStream(), value.lengthSync(),\n+                filename: pth.basename(value.path));\n+            request.files.add(multipartFile);\n+          });\n+        }\n+\n+        request.send().then((response) async {\n+          var value = await response.stream.transform(utf8.decoder).join();\n+\n+          try {\n+            if (kDebugMode) {\n+              print(value);\n+            }\n+\n+            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) {\n+              withSuccess(jsonObj);\n+            }\n+\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+          \n+        }).catchError((err) {\n+          if (failure != null) failure(err.toString());\n+        });\n+      } on SocketException catch (e) {\n+        if (failure != null) failure(e.toString());\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722434276293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,128 +119,5 @@\n       }\n     });\n   }\n \n-}\n-\n-\n-\n-import 'dart:convert';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:http/http.dart' as http;\n-import 'package:path/path.dart' as pth;\n-\n-typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n-typedef ResFailure = Future<void> Function(dynamic);\n-\n-\n-class ServiceCall {\n-  static Map userObj = {};\n-  static int userType = 1;\n-\n-  static void post(\n-    Map<String, dynamic> parameter,\n-    String path, {\n-    bool isTokenApi = false,\n-    ResSuccess? withSuccess,\n-    ResFailure? failure,\n-  }) {\n-    Future(() {\n-      try {\n-        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n-\n-        if (isTokenApi) {\n-        \n-         headers[\"acess_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n-        }\n-\n-        http.post(Uri.parse(path), body: parameter, headers: headers)\n-        .then((value) {\n-          \n-          if(kDebugMode) {\n-            print(value.body);\n-          }\n-\n-          try {\n-            var jsonObj = json.decode(value.body) as Map<String, dynamic>? ?? {};\n-\n-            if(withSuccess != null) withSuccess(jsonObj);\n-            \n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-          \n-         \n-        }).catchError((e) {\n-          if (failure != null) failure(e.toString());\n-        });\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-\n-\n-static void multipart(Map<String, String> parameter, String path,\n-      {bool isTokenApi = false,\n-      Map<String, File>? imgObj,\n-      ResSuccess? withSuccess,\n-      ResFailure? failure}) {\n-    Future(() {\n-      try {\n-        var uri = Uri.parse(path);\n-        var request = http.MultipartRequest('POST', uri);\n-        request.fields.addAll(parameter);\n-\n-        if (isTokenApi) {\n-          request.headers\n-              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n-        }\n-\n-        if (kDebugMode) {\n-          print('Service Call: $path');\n-          print('Service para: ${parameter.toString()}');\n-          print('Service header: ${request.headers.toString()}');\n-        }\n-\n-        if (imgObj != null) {\n-          imgObj.forEach((key, value) async {\n-            var multipartFile = http.MultipartFile(\n-                key, value.readAsBytes().asStream(), value.lengthSync(),\n-                filename: pth.basename(value.path));\n-            request.files.add(multipartFile);\n-          });\n-        }\n-\n-        request.send().then((response) async {\n-          var value = await response.stream.transform(utf8.decoder).join();\n-\n-          try {\n-            if (kDebugMode) {\n-              print(value);\n-            }\n-\n-            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) {\n-              withSuccess(jsonObj);\n-            }\n-\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-          \n-        }).catchError((err) {\n-          if (failure != null) failure(err.toString());\n-        });\n-      } on SocketException catch (e) {\n-        if (failure != null) failure(e.toString());\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722703962702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import 'dart:convert';\n+import 'dart:io';\n+import 'package:flutter/foundation.dart';\n+import 'package:sqflite/sqflite.dart';\n+import 'package:taxi_driver/common/db_helper.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:http/http.dart' as http;\n+import 'package:path/path.dart' as pth;\n+import 'package:taxi_driver/model/document_model.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/service_detail_model.dart';\n+import 'package:taxi_driver/model/zone_document_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+\n+typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n+typedef ResFailure = Future<void> Function(dynamic);\n+\n+class ServiceCall {\n+  static Map userObj = {};\n+  static int userType = 1;\n+\n+  static void post(\n+    Map<String, dynamic> parameter,\n+    String path, {\n+    bool isTokenApi = false,\n+    ResSuccess? withSuccess,\n+    ResFailure? failure,\n+  }) {\n+    Future(() {\n+      try {\n+        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n+\n+        if (isTokenApi) {\n+          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n+        }\n+\n+        http\n+            .post(Uri.parse(path), body: parameter, headers: headers)\n+            .then((value) {\n+          if (kDebugMode) {\n+            print(value.body);\n+          }\n+\n+          try {\n+            var jsonObj =\n+                json.decode(value.body) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) withSuccess(jsonObj);\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((e) {\n+          if (failure != null) failure(e.toString());\n+        });\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void multipart(Map<String, String> parameter, String path,\n+      {bool isTokenApi = false,\n+      Map<String, File>? imgObj,\n+      ResSuccess? withSuccess,\n+      ResFailure? failure}) {\n+    Future(() {\n+      try {\n+        var uri = Uri.parse(path);\n+        var request = http.MultipartRequest('POST', uri);\n+        request.fields.addAll(parameter);\n+\n+        if (isTokenApi) {\n+          request.headers\n+              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n+        }\n+\n+        if (kDebugMode) {\n+          print('Service Call: $path');\n+          print('Service para: ${parameter.toString()}');\n+          print('Service header: ${request.headers.toString()}');\n+        }\n+\n+        if (imgObj != null) {\n+          imgObj.forEach((key, value) async {\n+            var multipartFile = http.MultipartFile(\n+                key, value.readAsBytes().asStream(), value.lengthSync(),\n+                filename: pth.basename(value.path));\n+            request.files.add(multipartFile);\n+          });\n+        }\n+\n+        request.send().then((response) async {\n+          var value = await response.stream.transform(utf8.decoder).join();\n+\n+          try {\n+            if (kDebugMode) {\n+              print(value);\n+            }\n+\n+            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) {\n+              withSuccess(jsonObj);\n+            }\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((err) {\n+          if (failure != null) failure(err.toString());\n+        });\n+      } on SocketException catch (e) {\n+        if (failure != null) failure(e.toString());\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void getStaticDateApi() {\n+    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n+      try {\n+        if (responseObj[KKey.status] == \"1\") {\n+          var payload = responseObj[KKey.payload] as Map? ?? {};\n+\n+          var db = await DBHelper.shared().db;\n+\n+          var batch = db?.batch();\n+\n+          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          } \n+\n+         var bResult =  batch?.commit();\n+\n+         print(bResult);\n+\n+          debugPrint(\"Static Save Successfully\");\n+\n+        } else {\n+          debugPrint(responseObj.toString());\n+        }\n+      } catch (e) {\n+        debugPrint(e.toString());\n+      }\n+    }, failure: (err) async {\n+      debugPrint(err.toString());\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1722774262487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,127 +168,4 @@\n       debugPrint(err.toString());\n     });\n   }\n }\n-\n-\n-\n-import 'dart:convert';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:http/http.dart' as http;\n-import 'package:path/path.dart' as pth;\n-\n-typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n-typedef ResFailure = Future<void> Function(dynamic);\n-\n-\n-class ServiceCall {\n-  static Map userObj = {};\n-  static int userType = 1;\n-\n-  static void post(\n-    Map<String, dynamic> parameter,\n-    String path, {\n-    bool isTokenApi = false,\n-    ResSuccess? withSuccess,\n-    ResFailure? failure,\n-  }) {\n-    Future(() {\n-      try {\n-        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n-\n-        if (isTokenApi) {\n-        \n-         headers[\"acess_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n-        }\n-\n-        http.post(Uri.parse(path), body: parameter, headers: headers)\n-        .then((value) {\n-          \n-          if(kDebugMode) {\n-            print(value.body);\n-          }\n-\n-          try {\n-            var jsonObj = json.decode(value.body) as Map<String, dynamic>? ?? {};\n-\n-            if(withSuccess != null) withSuccess(jsonObj);\n-            \n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-          \n-         \n-        }).catchError((e) {\n-          if (failure != null) failure(e.toString());\n-        });\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-\n-\n-static void multipart(Map<String, String> parameter, String path,\n-      {bool isTokenApi = false,\n-      Map<String, File>? imgObj,\n-      ResSuccess? withSuccess,\n-      ResFailure? failure}) {\n-    Future(() {\n-      try {\n-        var uri = Uri.parse(path);\n-        var request = http.MultipartRequest('POST', uri);\n-        request.fields.addAll(parameter);\n-\n-        if (isTokenApi) {\n-          request.headers\n-              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n-        }\n-\n-        if (kDebugMode) {\n-          print('Service Call: $path');\n-          print('Service para: ${parameter.toString()}');\n-          print('Service header: ${request.headers.toString()}');\n-        }\n-\n-        if (imgObj != null) {\n-          imgObj.forEach((key, value) async {\n-            var multipartFile = http.MultipartFile(\n-                key, value.readAsBytes().asStream(), value.lengthSync(),\n-                filename: pth.basename(value.path));\n-            request.files.add(multipartFile);\n-          });\n-        }\n-\n-        request.send().then((response) async {\n-          var value = await response.stream.transform(utf8.decoder).join();\n-\n-          try {\n-            if (kDebugMode) {\n-              print(value);\n-            }\n-\n-            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) {\n-              withSuccess(jsonObj);\n-            }\n-\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-          \n-        }).catchError((err) {\n-          if (failure != null) failure(err.toString());\n-        });\n-      } on SocketException catch (e) {\n-        if (failure != null) failure(e.toString());\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1723290749166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import 'dart:convert';\n+import 'dart:io';\n+import 'package:flutter/foundation.dart';\n+import 'package:sqflite/sqflite.dart';\n+import 'package:taxi_driver/common/db_helper.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:http/http.dart' as http;\n+import 'package:path/path.dart' as pth;\n+import 'package:taxi_driver/model/document_model.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/service_detail_model.dart';\n+import 'package:taxi_driver/model/zone_document_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+\n+typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n+typedef ResFailure = Future<void> Function(dynamic);\n+\n+class ServiceCall {\n+  static Map userObj = {};\n+  static int userType = 1;\n+\n+  static void post(\n+    Map<String, dynamic> parameter,\n+    String path, {\n+    bool isTokenApi = false,\n+    ResSuccess? withSuccess,\n+    ResFailure? failure,\n+  }) {\n+    Future(() {\n+      try {\n+        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n+\n+        if (isTokenApi) {\n+          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n+        }\n+\n+        http\n+            .post(Uri.parse(path), body: parameter, headers: headers)\n+            .then((value) {\n+          if (kDebugMode) {\n+            print(value.body);\n+          }\n+\n+          try {\n+            var jsonObj =\n+                json.decode(value.body) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) withSuccess(jsonObj);\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((e) {\n+          if (failure != null) failure(e.toString());\n+        });\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void multipart(Map<String, String> parameter, String path,\n+      {bool isTokenApi = false,\n+      Map<String, File>? imgObj,\n+      ResSuccess? withSuccess,\n+      ResFailure? failure}) {\n+    Future(() {\n+      try {\n+        var uri = Uri.parse(path);\n+        var request = http.MultipartRequest('POST', uri);\n+        request.fields.addAll(parameter);\n+\n+        if (isTokenApi) {\n+          request.headers\n+              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n+        }\n+\n+        if (kDebugMode) {\n+          print('Service Call: $path');\n+          print('Service para: ${parameter.toString()}');\n+          print('Service header: ${request.headers.toString()}');\n+        }\n+\n+        if (imgObj != null) {\n+          imgObj.forEach((key, value) async {\n+            var multipartFile = http.MultipartFile(\n+                key, value.readAsBytes().asStream(), value.lengthSync(),\n+                filename: pth.basename(value.path));\n+            request.files.add(multipartFile);\n+          });\n+        }\n+\n+        request.send().then((response) async {\n+          var value = await response.stream.transform(utf8.decoder).join();\n+\n+          try {\n+            if (kDebugMode) {\n+              print(value);\n+            }\n+\n+            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) {\n+              withSuccess(jsonObj);\n+            }\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((err) {\n+          if (failure != null) failure(err.toString());\n+        });\n+      } on SocketException catch (e) {\n+        if (failure != null) failure(e.toString());\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void getStaticDateApi() {\n+    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n+      try {\n+        if (responseObj[KKey.status] == \"1\") {\n+          var payload = responseObj[KKey.payload] as Map? ?? {};\n+\n+          var db = await DBHelper.shared().db;\n+\n+          var batch = db?.batch();\n+\n+          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          } \n+\n+         var bResult =  batch?.commit();\n+\n+         print(bResult);\n+\n+          debugPrint(\"Static Save Successfully\");\n+\n+        } else {\n+          debugPrint(responseObj.toString());\n+        }\n+      } catch (e) {\n+        debugPrint(e.toString());\n+      }\n+    }, failure: (err) async {\n+      debugPrint(err.toString());\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1723424350444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,345 @@\n+import 'dart:convert';\n+import 'dart:io';\n+\n+import 'package:flutter/foundation.dart';\n+import 'package:http/http.dart' as http;\n+import 'package:path/path.dart' as pth;\n+import 'package:sqflite/sqflite.dart';\n+import 'package:taxi_driver/common/db_helper.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/model/document_model.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/service_detail_model.dart';\n+import 'package:taxi_driver/model/zone_document_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+\n+typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n+typedef ResFailure = Future<void> Function(dynamic);\n+\n+class ServiceCall {\n+  static Map userObj = {};\n+  static int userType = 1;\n+\n+  static void post(\n+    Map<String, dynamic> parameter,\n+    String path, {\n+    bool isTokenApi = false,\n+    ResSuccess? withSuccess,\n+    ResFailure? failure,\n+  }) {\n+    Future(() {\n+      try {\n+        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n+\n+        if (isTokenApi) {\n+          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n+        }\n+\n+        http\n+            .post(Uri.parse(path), body: parameter, headers: headers)\n+            .then((value) {\n+          if (kDebugMode) {\n+            print(value.body);\n+          }\n+\n+          try {\n+            var jsonObj =\n+                json.decode(value.body) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) withSuccess(jsonObj);\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((e) {\n+          if (failure != null) failure(e.toString());\n+        });\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void multipart(Map<String, String> parameter, String path,\n+      {bool isTokenApi = false,\n+      Map<String, File>? imgObj,\n+      ResSuccess? withSuccess,\n+      ResFailure? failure}) {\n+    Future(() {\n+      try {\n+        var uri = Uri.parse(path);\n+        var request = http.MultipartRequest('POST', uri);\n+        request.fields.addAll(parameter);\n+\n+        if (isTokenApi) {\n+          request.headers\n+              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n+        }\n+\n+        if (kDebugMode) {\n+          print('Service Call: $path');\n+          print('Service para: ${parameter.toString()}');\n+          print('Service header: ${request.headers.toString()}');\n+        }\n+\n+        if (imgObj != null) {\n+          imgObj.forEach((key, value) async {\n+            var multipartFile = http.MultipartFile(\n+                key, value.readAsBytes().asStream(), value.lengthSync(),\n+                filename: pth.basename(value.path));\n+            request.files.add(multipartFile);\n+          });\n+        }\n+\n+        request.send().then((response) async {\n+          var value = await response.stream.transform(utf8.decoder).join();\n+\n+          try {\n+            if (kDebugMode) {\n+              print(value);\n+            }\n+\n+            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) {\n+              withSuccess(jsonObj);\n+            }\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((err) {\n+          if (failure != null) failure(err.toString());\n+        });\n+      } on SocketException catch (e) {\n+        if (failure != null) failure(e.toString());\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void getStaticDateApi() {\n+    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n+      try {\n+        if (responseObj[KKey.status] == \"1\") {\n+          var payload = responseObj[KKey.payload] as Map? ?? {};\n+\n+          var db = await DBHelper.shared().db;\n+\n+          var batch = db?.batch();\n+\n+          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          } \n+\n+         var bResult =  batch?.commit();\n+\n+         print(bResult);\n+\n+          debugPrint(\"Static Save Successfully\");\n+\n+        } else {\n+          debugPrint(responseObj.toString());\n+        }\n+      } catch (e) {\n+        debugPrint(e.toString());\n+      }\n+    }, failure: (err) async {\n+      debugPrint(err.toString());\n+    });\n+  }\n+}\n+\n+\n+/*import 'dart:convert';\n+import 'dart:io';\n+import 'package:flutter/foundation.dart';\n+import 'package:sqflite/sqflite.dart';\n+import 'package:taxi_driver/common/db_helper.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:http/http.dart' as http;\n+import 'package:path/path.dart' as pth;\n+import 'package:taxi_driver/model/document_model.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/service_detail_model.dart';\n+import 'package:taxi_driver/model/zone_document_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+\n+typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n+typedef ResFailure = Future<void> Function(dynamic);\n+\n+class ServiceCall {\n+  static Map userObj = {};\n+  static int userType = 1;\n+\n+  static void post(\n+    Map<String, dynamic> parameter,\n+    String path, {\n+    bool isTokenApi = false,\n+    ResSuccess? withSuccess,\n+    ResFailure? failure,\n+  }) {\n+    Future(() {\n+      try {\n+        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n+\n+        if (isTokenApi) {\n+          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n+        }\n+\n+        http\n+            .post(Uri.parse(path), body: parameter, headers: headers)\n+            .then((value) {\n+          if (kDebugMode) {\n+            print(value.body);\n+          }\n+\n+          try {\n+            var jsonObj =\n+                json.decode(value.body) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) withSuccess(jsonObj);\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((e) {\n+          if (failure != null) failure(e.toString());\n+        });\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void multipart(Map<String, String> parameter, String path,\n+      {bool isTokenApi = false,\n+      Map<String, File>? imgObj,\n+      ResSuccess? withSuccess,\n+      ResFailure? failure}) {\n+    Future(() {\n+      try {\n+        var uri = Uri.parse(path);\n+        var request = http.MultipartRequest('POST', uri);\n+        request.fields.addAll(parameter);\n+\n+        if (isTokenApi) {\n+          request.headers\n+              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n+        }\n+\n+        if (kDebugMode) {\n+          print('Service Call: $path');\n+          print('Service para: ${parameter.toString()}');\n+          print('Service header: ${request.headers.toString()}');\n+        }\n+\n+        if (imgObj != null) {\n+          imgObj.forEach((key, value) async {\n+            var multipartFile = http.MultipartFile(\n+                key, value.readAsBytes().asStream(), value.lengthSync(),\n+                filename: pth.basename(value.path));\n+            request.files.add(multipartFile);\n+          });\n+        }\n+\n+        request.send().then((response) async {\n+          var value = await response.stream.transform(utf8.decoder).join();\n+\n+          try {\n+            if (kDebugMode) {\n+              print(value);\n+            }\n+\n+            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) {\n+              withSuccess(jsonObj);\n+            }\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((err) {\n+          if (failure != null) failure(err.toString());\n+        });\n+      } on SocketException catch (e) {\n+        if (failure != null) failure(e.toString());\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void getStaticDateApi() {\n+    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n+      try {\n+        if (responseObj[KKey.status] == \"1\") {\n+          var payload = responseObj[KKey.payload] as Map? ?? {};\n+\n+          var db = await DBHelper.shared().db;\n+\n+          var batch = db?.batch();\n+\n+          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          } \n+\n+         var bResult =  batch?.commit();\n+\n+         print(bResult);\n+\n+          debugPrint(\"Static Save Successfully\");\n+\n+        } else {\n+          debugPrint(responseObj.toString());\n+        }\n+      } catch (e) {\n+        debugPrint(e.toString());\n+      }\n+    }, failure: (err) async {\n+      debugPrint(err.toString());\n+    });\n+  }\n+}*/\n"
                },
                {
                    "date": 1725464885080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import 'dart:convert';\n+import 'dart:io';\n+import 'package:flutter/foundation.dart';\n+import 'package:http/http.dart' as http;\n+import 'package:path/path.dart' as pth;\n+import 'package:sqflite/sqflite.dart';\n+import 'package:taxi_driver/common/db_helper.dart';\n+import 'package:taxi_driver/common/globs.dart';\n+import 'package:taxi_driver/model/document_model.dart';\n+import 'package:taxi_driver/model/price_detail_model.dart';\n+import 'package:taxi_driver/model/service_detail_model.dart';\n+import 'package:taxi_driver/model/zone_document_model.dart';\n+import 'package:taxi_driver/model/zone_list_model.dart';\n+\n+typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n+typedef ResFailure = Future<void> Function(dynamic);\n+\n+class ServiceCall {\n+  static Map userObj = {};\n+  static int userType = 1;\n+\n+  static void post(\n+    Map<String, dynamic> parameter,\n+    String path, {\n+    bool isTokenApi = false,\n+    ResSuccess? withSuccess,\n+    ResFailure? failure,\n+  }) {\n+    Future(() {\n+      try {\n+        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n+\n+        if (isTokenApi) {\n+          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n+        }\n+\n+        http\n+            .post(Uri.parse(path), body: parameter, headers: headers)\n+            .then((value) {\n+          if (kDebugMode) {\n+            print(value.body);\n+          }\n+\n+          try {\n+            var jsonObj =\n+                json.decode(value.body) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) withSuccess(jsonObj);\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((e) {\n+          if (failure != null) failure(e.toString());\n+        });\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void multipart(Map<String, String> parameter, String path,\n+      {bool isTokenApi = false,\n+      Map<String, File>? imgObj,\n+      ResSuccess? withSuccess,\n+      ResFailure? failure}) {\n+    Future(() {\n+      try {\n+        var uri = Uri.parse(path);\n+        var request = http.MultipartRequest('POST', uri);\n+        request.fields.addAll(parameter);\n+\n+        if (isTokenApi) {\n+          request.headers\n+              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n+        }\n+\n+        if (kDebugMode) {\n+          print('Service Call: $path');\n+          print('Service para: ${parameter.toString()}');\n+          print('Service header: ${request.headers.toString()}');\n+        }\n+\n+        if (imgObj != null) {\n+          imgObj.forEach((key, value) async {\n+            var multipartFile = http.MultipartFile(\n+                key, value.readAsBytes().asStream(), value.lengthSync(),\n+                filename: pth.basename(value.path));\n+            request.files.add(multipartFile);\n+          });\n+        }\n+\n+        request.send().then((response) async {\n+          var value = await response.stream.transform(utf8.decoder).join();\n+\n+          try {\n+            if (kDebugMode) {\n+              print(value);\n+            }\n+\n+            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n+            if (withSuccess != null) {\n+              withSuccess(jsonObj);\n+            }\n+          } catch (e) {\n+            if (failure != null) failure(e.toString());\n+          }\n+        }).catchError((err) {\n+          if (failure != null) failure(err.toString());\n+        });\n+      } on SocketException catch (e) {\n+        if (failure != null) failure(e.toString());\n+      } catch (e) {\n+        if (failure != null) failure(e.toString());\n+      }\n+    });\n+  }\n+\n+  static void getStaticDateApi() {\n+    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n+      try {\n+        if (responseObj[KKey.status] == \"1\") {\n+          var payload = responseObj[KKey.payload] as Map? ?? {};\n+\n+          var db = await DBHelper.shared().db;\n+\n+          var batch = db?.batch();\n+\n+          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n+            batch?.insert(\n+                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          }\n+\n+           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n+            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n+                conflictAlgorithm: ConflictAlgorithm.replace);\n+          } \n+\n+         var bResult =  batch?.commit();\n+\n+         print(bResult);\n+\n+          debugPrint(\"Static Save Successfully\");\n+\n+        } else {\n+          debugPrint(responseObj.toString());\n+        }\n+      } catch (e) {\n+        debugPrint(e.toString());\n+      }\n+    }, failure: (err) async {\n+      debugPrint(err.toString());\n+    });\n+  }\n+}\n"
                },
                {
                    "date": 1725804466062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import 'package:sqflite/sqflite.dart';\n import 'package:taxi_driver/common/db_helper.dart';\n import 'package:taxi_driver/common/globs.dart';\n import 'package:taxi_driver/model/document_model.dart';\n+\n import 'package:taxi_driver/model/price_detail_model.dart';\n import 'package:taxi_driver/model/service_detail_model.dart';\n import 'package:taxi_driver/model/zone_document_model.dart';\n import 'package:taxi_driver/model/zone_list_model.dart';\n"
                },
                {
                    "date": 1726045282129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,691 +169,4 @@\n       debugPrint(err.toString());\n     });\n   }\n }\n-import 'dart:convert';\n-import 'dart:io';\n-\n-import 'package:flutter/foundation.dart';\n-import 'package:http/http.dart' as http;\n-import 'package:path/path.dart' as pth;\n-import 'package:sqflite/sqflite.dart';\n-import 'package:taxi_driver/common/db_helper.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:taxi_driver/model/document_model.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/service_detail_model.dart';\n-import 'package:taxi_driver/model/zone_document_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-\n-typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n-typedef ResFailure = Future<void> Function(dynamic);\n-\n-class ServiceCall {\n-  static Map userObj = {};\n-  static int userType = 1;\n-\n-  static void post(\n-    Map<String, dynamic> parameter,\n-    String path, {\n-    bool isTokenApi = false,\n-    ResSuccess? withSuccess,\n-    ResFailure? failure,\n-  }) {\n-    Future(() {\n-      try {\n-        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n-\n-        if (isTokenApi) {\n-          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n-        }\n-\n-        http\n-            .post(Uri.parse(path), body: parameter, headers: headers)\n-            .then((value) {\n-          if (kDebugMode) {\n-            print(value.body);\n-          }\n-\n-          try {\n-            var jsonObj =\n-                json.decode(value.body) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) withSuccess(jsonObj);\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-        }).catchError((e) {\n-          if (failure != null) failure(e.toString());\n-        });\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-  static void multipart(Map<String, String> parameter, String path,\n-      {bool isTokenApi = false,\n-      Map<String, File>? imgObj,\n-      ResSuccess? withSuccess,\n-      ResFailure? failure}) {\n-    Future(() {\n-      try {\n-        var uri = Uri.parse(path);\n-        var request = http.MultipartRequest('POST', uri);\n-        request.fields.addAll(parameter);\n-\n-        if (isTokenApi) {\n-          request.headers\n-              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n-        }\n-\n-        if (kDebugMode) {\n-          print('Service Call: $path');\n-          print('Service para: ${parameter.toString()}');\n-          print('Service header: ${request.headers.toString()}');\n-        }\n-\n-        if (imgObj != null) {\n-          imgObj.forEach((key, value) async {\n-            var multipartFile = http.MultipartFile(\n-                key, value.readAsBytes().asStream(), value.lengthSync(),\n-                filename: pth.basename(value.path));\n-            request.files.add(multipartFile);\n-          });\n-        }\n-\n-        request.send().then((response) async {\n-          var value = await response.stream.transform(utf8.decoder).join();\n-\n-          try {\n-            if (kDebugMode) {\n-              print(value);\n-            }\n-\n-            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) {\n-              withSuccess(jsonObj);\n-            }\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-        }).catchError((err) {\n-          if (failure != null) failure(err.toString());\n-        });\n-      } on SocketException catch (e) {\n-        if (failure != null) failure(e.toString());\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-  static void getStaticDateApi() {\n-    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n-      try {\n-        if (responseObj[KKey.status] == \"1\") {\n-          var payload = responseObj[KKey.payload] as Map? ?? {};\n-\n-          var db = await DBHelper.shared().db;\n-\n-          var batch = db?.batch();\n-\n-          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n-            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n-            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          } \n-\n-         var bResult =  batch?.commit();\n-\n-         print(bResult);\n-\n-          debugPrint(\"Static Save Successfully\");\n-\n-        } else {\n-          debugPrint(responseObj.toString());\n-        }\n-      } catch (e) {\n-        debugPrint(e.toString());\n-      }\n-    }, failure: (err) async {\n-      debugPrint(err.toString());\n-    });\n-  }\n-}\n-\n-\n-/*import 'dart:convert';\n-import 'dart:io';\n-import 'package:flutter/foundation.dart';\n-import 'package:sqflite/sqflite.dart';\n-import 'package:taxi_driver/common/db_helper.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:http/http.dart' as http;\n-import 'package:path/path.dart' as pth;\n-import 'package:taxi_driver/model/document_model.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/service_detail_model.dart';\n-import 'package:taxi_driver/model/zone_document_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-\n-typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n-typedef ResFailure = Future<void> Function(dynamic);\n-\n-class ServiceCall {\n-  static Map userObj = {};\n-  static int userType = 1;\n-\n-  static void post(\n-    Map<String, dynamic> parameter,\n-    String path, {\n-    bool isTokenApi = false,\n-    ResSuccess? withSuccess,\n-    ResFailure? failure,\n-  }) {\n-    Future(() {\n-      try {\n-        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n-\n-        if (isTokenApi) {\n-          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n-        }\n-\n-        http\n-            .post(Uri.parse(path), body: parameter, headers: headers)\n-            .then((value) {\n-          if (kDebugMode) {\n-            print(value.body);\n-          }\n-\n-          try {\n-            var jsonObj =\n-                json.decode(value.body) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) withSuccess(jsonObj);\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-        }).catchError((e) {\n-          if (failure != null) failure(e.toString());\n-        });\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-  static void multipart(Map<String, String> parameter, String path,\n-      {bool isTokenApi = false,\n-      Map<String, File>? imgObj,\n-      ResSuccess? withSuccess,\n-      ResFailure? failure}) {\n-    Future(() {\n-      try {\n-        var uri = Uri.parse(path);\n-        var request = http.MultipartRequest('POST', uri);\n-        request.fields.addAll(parameter);\n-\n-        if (isTokenApi) {\n-          request.headers\n-              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n-        }\n-\n-        if (kDebugMode) {\n-          print('Service Call: $path');\n-          print('Service para: ${parameter.toString()}');\n-          print('Service header: ${request.headers.toString()}');\n-        }\n-\n-        if (imgObj != null) {\n-          imgObj.forEach((key, value) async {\n-            var multipartFile = http.MultipartFile(\n-                key, value.readAsBytes().asStream(), value.lengthSync(),\n-                filename: pth.basename(value.path));\n-            request.files.add(multipartFile);\n-          });\n-        }\n-\n-        request.send().then((response) async {\n-          var value = await response.stream.transform(utf8.decoder).join();\n-\n-          try {\n-            if (kDebugMode) {\n-              print(value);\n-            }\n-\n-            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) {\n-              withSuccess(jsonObj);\n-            }\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-        }).catchError((err) {\n-          if (failure != null) failure(err.toString());\n-        });\n-      } on SocketException catch (e) {\n-        if (failure != null) failure(e.toString());\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-  static void getStaticDateApi() {\n-    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n-      try {\n-        if (responseObj[KKey.status] == \"1\") {\n-          var payload = responseObj[KKey.payload] as Map? ?? {};\n-\n-          var db = await DBHelper.shared().db;\n-\n-          var batch = db?.batch();\n-\n-          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n-            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n-            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          } \n-\n-         var bResult =  batch?.commit();\n-\n-         print(bResult);\n-\n-          debugPrint(\"Static Save Successfully\");\n-\n-        } else {\n-          debugPrint(responseObj.toString());\n-        }\n-      } catch (e) {\n-        debugPrint(e.toString());\n-      }\n-    }, failure: (err) async {\n-      debugPrint(err.toString());\n-    });\n-  }\n-}*/\n-import 'dart:convert';\n-import 'dart:io';\n-import 'package:flutter/foundation.dart';\n-import 'package:sqflite/sqflite.dart';\n-import 'package:taxi_driver/common/db_helper.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:http/http.dart' as http;\n-import 'package:path/path.dart' as pth;\n-import 'package:taxi_driver/model/document_model.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/service_detail_model.dart';\n-import 'package:taxi_driver/model/zone_document_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-\n-typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n-typedef ResFailure = Future<void> Function(dynamic);\n-\n-class ServiceCall {\n-  static Map userObj = {};\n-  static int userType = 1;\n-\n-  static void post(\n-    Map<String, dynamic> parameter,\n-    String path, {\n-    bool isTokenApi = false,\n-    ResSuccess? withSuccess,\n-    ResFailure? failure,\n-  }) {\n-    Future(() {\n-      try {\n-        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n-\n-        if (isTokenApi) {\n-          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n-        }\n-\n-        http\n-            .post(Uri.parse(path), body: parameter, headers: headers)\n-            .then((value) {\n-          if (kDebugMode) {\n-            print(value.body);\n-          }\n-\n-          try {\n-            var jsonObj =\n-                json.decode(value.body) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) withSuccess(jsonObj);\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-        }).catchError((e) {\n-          if (failure != null) failure(e.toString());\n-        });\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-  static void multipart(Map<String, String> parameter, String path,\n-      {bool isTokenApi = false,\n-      Map<String, File>? imgObj,\n-      ResSuccess? withSuccess,\n-      ResFailure? failure}) {\n-    Future(() {\n-      try {\n-        var uri = Uri.parse(path);\n-        var request = http.MultipartRequest('POST', uri);\n-        request.fields.addAll(parameter);\n-\n-        if (isTokenApi) {\n-          request.headers\n-              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n-        }\n-\n-        if (kDebugMode) {\n-          print('Service Call: $path');\n-          print('Service para: ${parameter.toString()}');\n-          print('Service header: ${request.headers.toString()}');\n-        }\n-\n-        if (imgObj != null) {\n-          imgObj.forEach((key, value) async {\n-            var multipartFile = http.MultipartFile(\n-                key, value.readAsBytes().asStream(), value.lengthSync(),\n-                filename: pth.basename(value.path));\n-            request.files.add(multipartFile);\n-          });\n-        }\n-\n-        request.send().then((response) async {\n-          var value = await response.stream.transform(utf8.decoder).join();\n-\n-          try {\n-            if (kDebugMode) {\n-              print(value);\n-            }\n-\n-            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) {\n-              withSuccess(jsonObj);\n-            }\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-        }).catchError((err) {\n-          if (failure != null) failure(err.toString());\n-        });\n-      } on SocketException catch (e) {\n-        if (failure != null) failure(e.toString());\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-  static void getStaticDateApi() {\n-    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n-      try {\n-        if (responseObj[KKey.status] == \"1\") {\n-          var payload = responseObj[KKey.payload] as Map? ?? {};\n-\n-          var db = await DBHelper.shared().db;\n-\n-          var batch = db?.batch();\n-\n-          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n-            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n-            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          } \n-\n-         var bResult =  batch?.commit();\n-\n-         print(bResult);\n-\n-          debugPrint(\"Static Save Successfully\");\n-\n-        } else {\n-          debugPrint(responseObj.toString());\n-        }\n-      } catch (e) {\n-        debugPrint(e.toString());\n-      }\n-    }, failure: (err) async {\n-      debugPrint(err.toString());\n-    });\n-  }\n-}\n-import 'dart:convert';\n-import 'dart:io';\n-import 'package:flutter/foundation.dart';\n-import 'package:sqflite/sqflite.dart';\n-import 'package:taxi_driver/common/db_helper.dart';\n-import 'package:taxi_driver/common/globs.dart';\n-import 'package:http/http.dart' as http;\n-import 'package:path/path.dart' as pth;\n-import 'package:taxi_driver/model/document_model.dart';\n-import 'package:taxi_driver/model/price_detail_model.dart';\n-import 'package:taxi_driver/model/service_detail_model.dart';\n-import 'package:taxi_driver/model/zone_document_model.dart';\n-import 'package:taxi_driver/model/zone_list_model.dart';\n-\n-typedef ResSuccess = Future<void> Function(Map<String, dynamic>);\n-typedef ResFailure = Future<void> Function(dynamic);\n-\n-class ServiceCall {\n-  static Map userObj = {};\n-  static int userType = 1;\n-\n-  static void post(\n-    Map<String, dynamic> parameter,\n-    String path, {\n-    bool isTokenApi = false,\n-    ResSuccess? withSuccess,\n-    ResFailure? failure,\n-  }) {\n-    Future(() {\n-      try {\n-        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n-\n-        if (isTokenApi) {\n-          headers[\"access_token\"] = userObj[\"auth_token\"] as String? ?? \"\";\n-        }\n-\n-        http\n-            .post(Uri.parse(path), body: parameter, headers: headers)\n-            .then((value) {\n-          if (kDebugMode) {\n-            print(value.body);\n-          }\n-\n-          try {\n-            var jsonObj =\n-                json.decode(value.body) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) withSuccess(jsonObj);\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-        }).catchError((e) {\n-          if (failure != null) failure(e.toString());\n-        });\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-  static void multipart(Map<String, String> parameter, String path,\n-      {bool isTokenApi = false,\n-      Map<String, File>? imgObj,\n-      ResSuccess? withSuccess,\n-      ResFailure? failure}) {\n-    Future(() {\n-      try {\n-        var uri = Uri.parse(path);\n-        var request = http.MultipartRequest('POST', uri);\n-        request.fields.addAll(parameter);\n-\n-        if (isTokenApi) {\n-          request.headers\n-              .addAll({\"access_token\": userObj[\"auth_token\"] as String? ?? \"\"});\n-        }\n-\n-        if (kDebugMode) {\n-          print('Service Call: $path');\n-          print('Service para: ${parameter.toString()}');\n-          print('Service header: ${request.headers.toString()}');\n-        }\n-\n-        if (imgObj != null) {\n-          imgObj.forEach((key, value) async {\n-            var multipartFile = http.MultipartFile(\n-                key, value.readAsBytes().asStream(), value.lengthSync(),\n-                filename: pth.basename(value.path));\n-            request.files.add(multipartFile);\n-          });\n-        }\n-\n-        request.send().then((response) async {\n-          var value = await response.stream.transform(utf8.decoder).join();\n-\n-          try {\n-            if (kDebugMode) {\n-              print(value);\n-            }\n-\n-            var jsonObj = json.decode(value) as Map<String, dynamic>? ?? {};\n-            if (withSuccess != null) {\n-              withSuccess(jsonObj);\n-            }\n-          } catch (e) {\n-            if (failure != null) failure(e.toString());\n-          }\n-        }).catchError((err) {\n-          if (failure != null) failure(err.toString());\n-        });\n-      } on SocketException catch (e) {\n-        if (failure != null) failure(e.toString());\n-      } catch (e) {\n-        if (failure != null) failure(e.toString());\n-      }\n-    });\n-  }\n-\n-  static void getStaticDateApi() {\n-    post({\"last_call_time\":\"\"}, SVKey.svStaticData, withSuccess: (responseObj) async {\n-      try {\n-        if (responseObj[KKey.status] == \"1\") {\n-          var payload = responseObj[KKey.payload] as Map? ?? {};\n-\n-          var db = await DBHelper.shared().db;\n-\n-          var batch = db?.batch();\n-\n-          for (var zObj in (payload[\"zone_list\"] as List? ?? [])) {\n-            batch?.insert(DBHelper.tbZoneList, ZoneListModel.map(zObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var sObj in (payload[\"service_detail\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbServiceDetail, ServiceDetailModel.map(sObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var pObj in (payload[\"price_detail\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbPriceDetail, PriceDetailModel.map(pObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-          for (var dObj in (payload[\"document\"] as List? ?? [])) {\n-            batch?.insert(\n-                DBHelper.tbDocument, DocumentModel.map(dObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          }\n-\n-           for (var dObj in (payload[\"zone_document\"] as List? ?? [])) {\n-            batch?.insert(DBHelper.tbZoneDocument, ZoneDocumentModel.map(dObj).toMap(),\n-                conflictAlgorithm: ConflictAlgorithm.replace);\n-          } \n-\n-         var bResult =  batch?.commit();\n-\n-         print(bResult);\n-\n-          debugPrint(\"Static Save Successfully\");\n-\n-        } else {\n-          debugPrint(responseObj.toString());\n-        }\n-      } catch (e) {\n-        debugPrint(e.toString());\n-      }\n-    }, failure: (err) async {\n-      debugPrint(err.toString());\n-    });\n-  }\n-}\n"
                }
            ],
            "date": 1720706183504,
            "name": "Commit-0",
            "content": "\n\n\nimport 'dart:convert';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:taxi_driver/common/globs.dart';\nimport 'package:http/http.dart' as http;\n\ntypedef ResSuccess = Future<void> Function(Map<String, dynamic>);\ntypedef ResFailure = Future<void> Function(dynamic);\n\n\nclass ServiceCall {\n  static Map userObj = {};\n  static int userType = 1;\n\n  static void post(\n    Map<String, dynamic> parameter,\n    String path, {\n    bool isTokenApi = false,\n    ResSuccess? withSuccess,\n    ResFailure? failure,\n  }) {\n    Future(() {\n      try {\n        var headers = {\"Content-Type\": 'application/x-www-form-urlencoded'};\n\n        if (isTokenApi) {\n         var token = Globs.udValueString (\"token\") ;\n         headers[\"acess_token\"] = token;\n        }\n\n        http.post(Uri.parse(path), body: parameter, headers: headers)\n        .then((value) {\n          \n          if(kDebugMode) {\n            print(value.body);\n          }\n\n          try {\n            var jsonObj = json.decode(value.body) as Map<String, dynamic>? ?? {};\n\n            if(withSuccess != null) withSuccess(jsonObj);\n            \n          } catch (e) {\n            if (failure != null) failure(e.toString());\n          }\n          \n         \n        }).catchError((e) {\n          if (failure != null) failure(e.toString());\n        });\n      } catch (e) {\n        if (failure != null) failure(e.toString());\n      }\n    });\n  }\n\n}"
        }
    ]
}